/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var NetworkResourceProviderClient = ( /** @lends NetworkResourceProviderClient */ function() {
  /**
   * @class
   * The Windows Azure Network management API provides a RESTful set of web
   * services that interact with Windows Azure Networks service to manage your
   * network resrources. The API has entities that capture the relationship
   * between an end user and the Windows Azure Networks service.
   * Initializes a new instance of the NetworkResourceProviderClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function NetworkResourceProviderClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    NetworkResourceProviderClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com/';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-12-01-preview';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [LoadBalancerOperations](-LoadBalancerOperations.html) object.
     * @type {object}
     */
    this.loadBalancers = new LoadBalancerOperations(this);
    /**
     * Provides an instance of the
     * [NetworkInterfaceOperations](-NetworkInterfaceOperations.html) object.
     * @type {object}
     */
    this.networkInterfaces = new NetworkInterfaceOperations(this);
    /**
     * Provides an instance of the
     * [PublicIpAddressOperations](-PublicIpAddressOperations.html) object.
     * @type {object}
     */
    this.publicIpAddresses = new PublicIpAddressOperations(this);
    /**
     * Provides an instance of the [SubnetOperations](-SubnetOperations.html)
     * object.
     * @type {object}
     */
    this.subnets = new SubnetOperations(this);
    /**
     * Provides an instance of the
     * [VirtualNetworkOperations](-VirtualNetworkOperations.html) object.
     * @type {object}
     */
    this.virtualNetworks = new VirtualNetworkOperations(this);
  }
  
  util.inherits(NetworkResourceProviderClient, Service);
  
  /**
   * Checks whether a domain name in the cloudapp.net zone is available for use.
   * 
   * @param {string} location The location of the domain name
   * 
   * @param {string} domainNameLabel The domain name to be verified. It must
   * conform to the following regular expression:
   * ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkResourceProviderClient.prototype.checkDnsNameAvailability = function(location, domainNameLabel, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (location === null || location === undefined) {
      return callback(new Error('location cannot be null.'));
    }
    if (domainNameLabel === null || domainNameLabel === undefined) {
      return callback(new Error('domainNameLabel cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.credentials.subscriptionId !== null && this.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/microsoft.network/locations/';
    url2 = url2 + encodeURIComponent(location);
    url2 = url2 + '/CheckDnsNameAvailability';
    var queryParameters = [];
    queryParameters.push('domainNameLabel=' + encodeURIComponent(domainNameLabel));
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var availableValue = responseDoc['available'];
          if (availableValue !== null && availableValue !== undefined) {
            var availableInstance = availableValue;
            result.dnsNameAvailability = availableInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Get Operation Status operation returns the status of the specified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.
   * 
   * @param {string} azureAsyncOperation Location value returned by the Begin
   * operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkResourceProviderClient.prototype.getLongRunningOperationStatus = function(azureAsyncOperation, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (azureAsyncOperation === null || azureAsyncOperation === undefined) {
      return callback(new Error('azureAsyncOperation cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + azureAsyncOperation;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-12-01-preview';
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var statusValue = responseDoc['status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = statusValue;
            result.status = statusInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return NetworkResourceProviderClient;
})();
exports.NetworkResourceProviderClient = NetworkResourceProviderClient;

var LoadBalancerOperations = ( /** @lends LoadBalancerOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * load balancers for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [loadBalancers] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#loadBalancers}.
   * Initializes a new instance of the LoadBalancerOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function LoadBalancerOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put LoadBalancer operation creates/updates a LoadBalancer
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} loadBalancerName The name of the loadBalancer.
   * 
   * @param {LoadBalancerCreateOrUpdateParameters} parameters Parameters
   * supplied to the create/delete LoadBalancer operation
   * 
   * @param {LoadBalancerProperties} [parameters.properties]
   * 
   * @param {IEnumerable} [parameters.properties.frontendIpConfigurations]
   * Frontend IP addresses of the load balancer
   * 
   * @param {IEnumerable} [parameters.properties.backendAddressPools] Pools of
   * backend IP addresseses
   * 
   * @param {IEnumerable} [parameters.properties.loadBalancingRules]
   * 
   * @param {IEnumerable} [parameters.properties.probes] List of Load balancer
   * probes
   * 
   * @param {IEnumerable} [parameters.properties.inboundNatRules]
   * 
   * @param {string} [parameters.properties.provisioningState] Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.location] The location of the resource
   * 
   * @param {object} [parameters.tags]
   * 
   * @param {string} [parameters.name] Read-OnlyA Name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [parameters.etag] A unique read-only string that changes
   * whenever the resource is updated
   * 
   * @param {string} [parameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, loadBalancerName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (loadBalancerName === null || loadBalancerName === undefined) {
      return callback(new Error('loadBalancerName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties !== null && parameters.properties !== undefined) {
      if (parameters.properties.inboundNatRules !== null && parameters.properties.inboundNatRules !== undefined) {
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.properties.inboundNatRules.length; loweredIndex1 = loweredIndex1 + 1) {
          var inboundNatRulesParameterItem = parameters.properties.inboundNatRules[loweredIndex1];
          if (inboundNatRulesParameterItem.properties !== null && inboundNatRulesParameterItem.properties !== undefined) {
            if (inboundNatRulesParameterItem.properties.enableFloatingIP === null || inboundNatRulesParameterItem.properties.enableFloatingIP === undefined) {
              return callback(new Error('parameters.properties.inboundNatRules.properties.enableFloatingIP cannot be null.'));
            }
            if (inboundNatRulesParameterItem.properties.frontendPort === null || inboundNatRulesParameterItem.properties.frontendPort === undefined) {
              return callback(new Error('parameters.properties.inboundNatRules.properties.frontendPort cannot be null.'));
            }
            if (inboundNatRulesParameterItem.properties.protocol === null || inboundNatRulesParameterItem.properties.protocol === undefined) {
              return callback(new Error('parameters.properties.inboundNatRules.properties.protocol cannot be null.'));
            }
          }
        }
      }
      if (parameters.properties.loadBalancingRules !== null && parameters.properties.loadBalancingRules !== undefined) {
        for (var loweredIndex2 = 0; loweredIndex2 < parameters.properties.loadBalancingRules.length; loweredIndex2 = loweredIndex2 + 1) {
          var loadBalancingRulesParameterItem = parameters.properties.loadBalancingRules[loweredIndex2];
          if (loadBalancingRulesParameterItem.properties !== null && loadBalancingRulesParameterItem.properties !== undefined) {
            if (loadBalancingRulesParameterItem.properties.backendAddressPool === null || loadBalancingRulesParameterItem.properties.backendAddressPool === undefined) {
              return callback(new Error('parameters.properties.loadBalancingRules.properties.backendAddressPool cannot be null.'));
            }
            if (loadBalancingRulesParameterItem.properties.enableFloatingIP === null || loadBalancingRulesParameterItem.properties.enableFloatingIP === undefined) {
              return callback(new Error('parameters.properties.loadBalancingRules.properties.enableFloatingIP cannot be null.'));
            }
            if (loadBalancingRulesParameterItem.properties.frontendIPConfigurations === null || loadBalancingRulesParameterItem.properties.frontendIPConfigurations === undefined) {
              return callback(new Error('parameters.properties.loadBalancingRules.properties.frontendIPConfigurations cannot be null.'));
            }
            if (loadBalancingRulesParameterItem.properties.frontendPort === null || loadBalancingRulesParameterItem.properties.frontendPort === undefined) {
              return callback(new Error('parameters.properties.loadBalancingRules.properties.frontendPort cannot be null.'));
            }
            if (loadBalancingRulesParameterItem.properties.protocol === null || loadBalancingRulesParameterItem.properties.protocol === undefined) {
              return callback(new Error('parameters.properties.loadBalancingRules.properties.protocol cannot be null.'));
            }
          }
        }
      }
      if (parameters.properties.probes !== null && parameters.properties.probes !== undefined) {
        for (var loweredIndex3 = 0; loweredIndex3 < parameters.properties.probes.length; loweredIndex3 = loweredIndex3 + 1) {
          var probesParameterItem = parameters.properties.probes[loweredIndex3];
          if (probesParameterItem.properties !== null && probesParameterItem.properties !== undefined) {
            if (probesParameterItem.properties.port === null || probesParameterItem.properties.port === undefined) {
              return callback(new Error('parameters.properties.probes.properties.port cannot be null.'));
            }
            if (probesParameterItem.properties.protocol === null || probesParameterItem.properties.protocol === undefined) {
              return callback(new Error('parameters.properties.probes.properties.protocol cannot be null.'));
            }
          }
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/loadBalancers/';
    url2 = url2 + encodeURIComponent(loadBalancerName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var loadBalancerCreateOrUpdateParametersValue = {};
    requestDoc = loadBalancerCreateOrUpdateParametersValue;
    
    if (parameters.properties !== null && parameters.properties !== undefined) {
      var propertiesValue = {};
      loadBalancerCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.properties.frontendIpConfigurations !== null && parameters.properties.frontendIpConfigurations !== undefined) {
        var frontendIPConfigurationsArray = [];
        for (var loweredIndex4 = 0; loweredIndex4 < parameters.properties.frontendIpConfigurations.length; loweredIndex4 = loweredIndex4 + 1) {
          var frontendIPConfigurationsItem = parameters.properties.frontendIpConfigurations[loweredIndex4];
          var frontendIpConfigurationValue = {};
          frontendIPConfigurationsArray.push(frontendIpConfigurationValue);
          
          if (frontendIPConfigurationsItem.properties !== null && frontendIPConfigurationsItem.properties !== undefined) {
            var propertiesValue2 = {};
            frontendIpConfigurationValue['properties'] = propertiesValue2;
            
            if (frontendIPConfigurationsItem.properties.privateIpAddress !== null && frontendIPConfigurationsItem.properties.privateIpAddress !== undefined) {
              propertiesValue2['privateIPAddress'] = frontendIPConfigurationsItem.properties.privateIpAddress;
            }
            
            if (frontendIPConfigurationsItem.properties.privateIpAllocationMethod !== null && frontendIPConfigurationsItem.properties.privateIpAllocationMethod !== undefined) {
              propertiesValue2['privateIPAllocationMethod'] = frontendIPConfigurationsItem.properties.privateIpAllocationMethod;
            }
            
            if (frontendIPConfigurationsItem.properties.subnet !== null && frontendIPConfigurationsItem.properties.subnet !== undefined) {
              var subnetValue = {};
              propertiesValue2['subnet'] = subnetValue;
              
              if (frontendIPConfigurationsItem.properties.subnet.id !== null && frontendIPConfigurationsItem.properties.subnet.id !== undefined) {
                subnetValue['id'] = frontendIPConfigurationsItem.properties.subnet.id;
              }
            }
            
            if (frontendIPConfigurationsItem.properties.publicIpAddress !== null && frontendIPConfigurationsItem.properties.publicIpAddress !== undefined) {
              var publicIPAddressValue = {};
              propertiesValue2['publicIPAddress'] = publicIPAddressValue;
              
              if (frontendIPConfigurationsItem.properties.publicIpAddress.id !== null && frontendIPConfigurationsItem.properties.publicIpAddress.id !== undefined) {
                publicIPAddressValue['id'] = frontendIPConfigurationsItem.properties.publicIpAddress.id;
              }
            }
            
            if (frontendIPConfigurationsItem.properties.inboundNatRules !== null && frontendIPConfigurationsItem.properties.inboundNatRules !== undefined) {
              var inboundNatRulesArray = [];
              for (var loweredIndex5 = 0; loweredIndex5 < frontendIPConfigurationsItem.properties.inboundNatRules.length; loweredIndex5 = loweredIndex5 + 1) {
                var inboundNatRulesItem = frontendIPConfigurationsItem.properties.inboundNatRules[loweredIndex5];
                var resourceIdValue = {};
                inboundNatRulesArray.push(resourceIdValue);
                
                if (inboundNatRulesItem.id !== null && inboundNatRulesItem.id !== undefined) {
                  resourceIdValue['id'] = inboundNatRulesItem.id;
                }
              }
              propertiesValue2['inboundNatRules'] = inboundNatRulesArray;
            }
            
            if (frontendIPConfigurationsItem.properties.loadBalancingRules !== null && frontendIPConfigurationsItem.properties.loadBalancingRules !== undefined) {
              var loadBalancingRulesArray = [];
              for (var loweredIndex6 = 0; loweredIndex6 < frontendIPConfigurationsItem.properties.loadBalancingRules.length; loweredIndex6 = loweredIndex6 + 1) {
                var loadBalancingRulesItem = frontendIPConfigurationsItem.properties.loadBalancingRules[loweredIndex6];
                var resourceIdValue2 = {};
                loadBalancingRulesArray.push(resourceIdValue2);
                
                if (loadBalancingRulesItem.id !== null && loadBalancingRulesItem.id !== undefined) {
                  resourceIdValue2['id'] = loadBalancingRulesItem.id;
                }
              }
              propertiesValue2['loadBalancingRules'] = loadBalancingRulesArray;
            }
            
            if (frontendIPConfigurationsItem.properties.provisioningState !== null && frontendIPConfigurationsItem.properties.provisioningState !== undefined) {
              propertiesValue2['provisioningState'] = frontendIPConfigurationsItem.properties.provisioningState;
            }
          }
          
          if (frontendIPConfigurationsItem.name !== null && frontendIPConfigurationsItem.name !== undefined) {
            frontendIpConfigurationValue['name'] = frontendIPConfigurationsItem.name;
          }
          
          if (frontendIPConfigurationsItem.etag !== null && frontendIPConfigurationsItem.etag !== undefined) {
            frontendIpConfigurationValue['etag'] = frontendIPConfigurationsItem.etag;
          }
          
          if (frontendIPConfigurationsItem.id !== null && frontendIPConfigurationsItem.id !== undefined) {
            frontendIpConfigurationValue['id'] = frontendIPConfigurationsItem.id;
          }
        }
        propertiesValue['frontendIPConfigurations'] = frontendIPConfigurationsArray;
      }
      
      if (parameters.properties.backendAddressPools !== null && parameters.properties.backendAddressPools !== undefined) {
        var backendAddressPoolsArray = [];
        for (var loweredIndex7 = 0; loweredIndex7 < parameters.properties.backendAddressPools.length; loweredIndex7 = loweredIndex7 + 1) {
          var backendAddressPoolsItem = parameters.properties.backendAddressPools[loweredIndex7];
          var backendAddressPoolValue = {};
          backendAddressPoolsArray.push(backendAddressPoolValue);
          
          if (backendAddressPoolsItem.properties !== null && backendAddressPoolsItem.properties !== undefined) {
            var propertiesValue3 = {};
            backendAddressPoolValue['properties'] = propertiesValue3;
            
            if (backendAddressPoolsItem.properties.backendIpConfigurations !== null && backendAddressPoolsItem.properties.backendIpConfigurations !== undefined) {
              var backendIPConfigurationsArray = [];
              for (var loweredIndex8 = 0; loweredIndex8 < backendAddressPoolsItem.properties.backendIpConfigurations.length; loweredIndex8 = loweredIndex8 + 1) {
                var backendIPConfigurationsItem = backendAddressPoolsItem.properties.backendIpConfigurations[loweredIndex8];
                var resourceIdValue3 = {};
                backendIPConfigurationsArray.push(resourceIdValue3);
                
                if (backendIPConfigurationsItem.id !== null && backendIPConfigurationsItem.id !== undefined) {
                  resourceIdValue3['id'] = backendIPConfigurationsItem.id;
                }
              }
              propertiesValue3['backendIPConfigurations'] = backendIPConfigurationsArray;
            }
            
            if (backendAddressPoolsItem.properties.loadBalancingRules !== null && backendAddressPoolsItem.properties.loadBalancingRules !== undefined) {
              var loadBalancingRulesArray2 = [];
              for (var loweredIndex9 = 0; loweredIndex9 < backendAddressPoolsItem.properties.loadBalancingRules.length; loweredIndex9 = loweredIndex9 + 1) {
                var loadBalancingRulesItem2 = backendAddressPoolsItem.properties.loadBalancingRules[loweredIndex9];
                var resourceIdValue4 = {};
                loadBalancingRulesArray2.push(resourceIdValue4);
                
                if (loadBalancingRulesItem2.id !== null && loadBalancingRulesItem2.id !== undefined) {
                  resourceIdValue4['id'] = loadBalancingRulesItem2.id;
                }
              }
              propertiesValue3['loadBalancingRules'] = loadBalancingRulesArray2;
            }
            
            if (backendAddressPoolsItem.properties.provisioningState !== null && backendAddressPoolsItem.properties.provisioningState !== undefined) {
              propertiesValue3['provisioningState'] = backendAddressPoolsItem.properties.provisioningState;
            }
          }
          
          if (backendAddressPoolsItem.name !== null && backendAddressPoolsItem.name !== undefined) {
            backendAddressPoolValue['name'] = backendAddressPoolsItem.name;
          }
          
          if (backendAddressPoolsItem.etag !== null && backendAddressPoolsItem.etag !== undefined) {
            backendAddressPoolValue['etag'] = backendAddressPoolsItem.etag;
          }
          
          if (backendAddressPoolsItem.id !== null && backendAddressPoolsItem.id !== undefined) {
            backendAddressPoolValue['id'] = backendAddressPoolsItem.id;
          }
        }
        propertiesValue['backendAddressPools'] = backendAddressPoolsArray;
      }
      
      if (parameters.properties.loadBalancingRules !== null && parameters.properties.loadBalancingRules !== undefined) {
        var loadBalancingRulesArray3 = [];
        for (var loweredIndex10 = 0; loweredIndex10 < parameters.properties.loadBalancingRules.length; loweredIndex10 = loweredIndex10 + 1) {
          var loadBalancingRulesItem3 = parameters.properties.loadBalancingRules[loweredIndex10];
          var loadBalancingRuleValue = {};
          loadBalancingRulesArray3.push(loadBalancingRuleValue);
          
          if (loadBalancingRulesItem3.properties !== null && loadBalancingRulesItem3.properties !== undefined) {
            var propertiesValue4 = {};
            loadBalancingRuleValue['properties'] = propertiesValue4;
            
            if (loadBalancingRulesItem3.properties.frontendIPConfigurations !== null && loadBalancingRulesItem3.properties.frontendIPConfigurations !== undefined) {
              var frontendIPConfigurationsArray2 = [];
              for (var loweredIndex11 = 0; loweredIndex11 < loadBalancingRulesItem3.properties.frontendIPConfigurations.length; loweredIndex11 = loweredIndex11 + 1) {
                var frontendIPConfigurationsItem2 = loadBalancingRulesItem3.properties.frontendIPConfigurations[loweredIndex11];
                var resourceIdValue5 = {};
                frontendIPConfigurationsArray2.push(resourceIdValue5);
                
                if (frontendIPConfigurationsItem2.id !== null && frontendIPConfigurationsItem2.id !== undefined) {
                  resourceIdValue5['id'] = frontendIPConfigurationsItem2.id;
                }
              }
              propertiesValue4['frontendIPConfigurations'] = frontendIPConfigurationsArray2;
            }
            
            var backendAddressPoolValue2 = {};
            propertiesValue4['backendAddressPool'] = backendAddressPoolValue2;
            
            if (loadBalancingRulesItem3.properties.backendAddressPool.id !== null && loadBalancingRulesItem3.properties.backendAddressPool.id !== undefined) {
              backendAddressPoolValue2['id'] = loadBalancingRulesItem3.properties.backendAddressPool.id;
            }
            
            if (loadBalancingRulesItem3.properties.probe !== null && loadBalancingRulesItem3.properties.probe !== undefined) {
              var probeValue = {};
              propertiesValue4['probe'] = probeValue;
              
              if (loadBalancingRulesItem3.properties.probe.id !== null && loadBalancingRulesItem3.properties.probe.id !== undefined) {
                probeValue['id'] = loadBalancingRulesItem3.properties.probe.id;
              }
            }
            
            propertiesValue4['protocol'] = loadBalancingRulesItem3.properties.protocol;
            
            if (loadBalancingRulesItem3.properties.loadDistribution !== null && loadBalancingRulesItem3.properties.loadDistribution !== undefined) {
              propertiesValue4['loadDistribution'] = loadBalancingRulesItem3.properties.loadDistribution;
            }
            
            propertiesValue4['frontendPort'] = loadBalancingRulesItem3.properties.frontendPort;
            
            if (loadBalancingRulesItem3.properties.backendPort !== null && loadBalancingRulesItem3.properties.backendPort !== undefined) {
              propertiesValue4['backendPort'] = loadBalancingRulesItem3.properties.backendPort;
            }
            
            if (loadBalancingRulesItem3.properties.idleTimeoutInMinutes !== null && loadBalancingRulesItem3.properties.idleTimeoutInMinutes !== undefined) {
              propertiesValue4['idleTimeoutInMinutes'] = loadBalancingRulesItem3.properties.idleTimeoutInMinutes;
            }
            
            propertiesValue4['enableFloatingIP'] = loadBalancingRulesItem3.properties.enableFloatingIP;
            
            if (loadBalancingRulesItem3.properties.provisioningState !== null && loadBalancingRulesItem3.properties.provisioningState !== undefined) {
              propertiesValue4['provisioningState'] = loadBalancingRulesItem3.properties.provisioningState;
            }
          }
          
          if (loadBalancingRulesItem3.name !== null && loadBalancingRulesItem3.name !== undefined) {
            loadBalancingRuleValue['name'] = loadBalancingRulesItem3.name;
          }
          
          if (loadBalancingRulesItem3.etag !== null && loadBalancingRulesItem3.etag !== undefined) {
            loadBalancingRuleValue['etag'] = loadBalancingRulesItem3.etag;
          }
          
          if (loadBalancingRulesItem3.id !== null && loadBalancingRulesItem3.id !== undefined) {
            loadBalancingRuleValue['id'] = loadBalancingRulesItem3.id;
          }
        }
        propertiesValue['loadBalancingRules'] = loadBalancingRulesArray3;
      }
      
      if (parameters.properties.probes !== null && parameters.properties.probes !== undefined) {
        var probesArray = [];
        for (var loweredIndex12 = 0; loweredIndex12 < parameters.properties.probes.length; loweredIndex12 = loweredIndex12 + 1) {
          var probesItem = parameters.properties.probes[loweredIndex12];
          var probeValue2 = {};
          probesArray.push(probeValue2);
          
          if (probesItem.properties !== null && probesItem.properties !== undefined) {
            var propertiesValue5 = {};
            probeValue2['properties'] = propertiesValue5;
            
            if (probesItem.properties.loadBalancingRules !== null && probesItem.properties.loadBalancingRules !== undefined) {
              var loadBalancingRulesArray4 = [];
              for (var loweredIndex13 = 0; loweredIndex13 < probesItem.properties.loadBalancingRules.length; loweredIndex13 = loweredIndex13 + 1) {
                var loadBalancingRulesItem4 = probesItem.properties.loadBalancingRules[loweredIndex13];
                var resourceIdValue6 = {};
                loadBalancingRulesArray4.push(resourceIdValue6);
                
                if (loadBalancingRulesItem4.id !== null && loadBalancingRulesItem4.id !== undefined) {
                  resourceIdValue6['id'] = loadBalancingRulesItem4.id;
                }
              }
              propertiesValue5['loadBalancingRules'] = loadBalancingRulesArray4;
            }
            
            propertiesValue5['protocol'] = probesItem.properties.protocol;
            
            propertiesValue5['port'] = probesItem.properties.port;
            
            if (probesItem.properties.intervalInSeconds !== null && probesItem.properties.intervalInSeconds !== undefined) {
              propertiesValue5['intervalInSeconds'] = probesItem.properties.intervalInSeconds;
            }
            
            if (probesItem.properties.numberOfProbes !== null && probesItem.properties.numberOfProbes !== undefined) {
              propertiesValue5['numberOfProbes'] = probesItem.properties.numberOfProbes;
            }
            
            if (probesItem.properties.requestPath !== null && probesItem.properties.requestPath !== undefined) {
              propertiesValue5['requestPath'] = probesItem.properties.requestPath;
            }
            
            if (probesItem.properties.provisioningState !== null && probesItem.properties.provisioningState !== undefined) {
              propertiesValue5['provisioningState'] = probesItem.properties.provisioningState;
            }
          }
          
          if (probesItem.name !== null && probesItem.name !== undefined) {
            probeValue2['name'] = probesItem.name;
          }
          
          if (probesItem.etag !== null && probesItem.etag !== undefined) {
            probeValue2['etag'] = probesItem.etag;
          }
          
          if (probesItem.id !== null && probesItem.id !== undefined) {
            probeValue2['id'] = probesItem.id;
          }
        }
        propertiesValue['probes'] = probesArray;
      }
      
      if (parameters.properties.inboundNatRules !== null && parameters.properties.inboundNatRules !== undefined) {
        var inboundNatRulesArray2 = [];
        for (var loweredIndex14 = 0; loweredIndex14 < parameters.properties.inboundNatRules.length; loweredIndex14 = loweredIndex14 + 1) {
          var inboundNatRulesItem2 = parameters.properties.inboundNatRules[loweredIndex14];
          var inboundNatRuleValue = {};
          inboundNatRulesArray2.push(inboundNatRuleValue);
          
          if (inboundNatRulesItem2.properties !== null && inboundNatRulesItem2.properties !== undefined) {
            var propertiesValue6 = {};
            inboundNatRuleValue['properties'] = propertiesValue6;
            
            if (inboundNatRulesItem2.properties.frontendIPConfigurations !== null && inboundNatRulesItem2.properties.frontendIPConfigurations !== undefined) {
              var frontendIPConfigurationsArray3 = [];
              for (var loweredIndex15 = 0; loweredIndex15 < inboundNatRulesItem2.properties.frontendIPConfigurations.length; loweredIndex15 = loweredIndex15 + 1) {
                var frontendIPConfigurationsItem3 = inboundNatRulesItem2.properties.frontendIPConfigurations[loweredIndex15];
                var resourceIdValue7 = {};
                frontendIPConfigurationsArray3.push(resourceIdValue7);
                
                if (frontendIPConfigurationsItem3.id !== null && frontendIPConfigurationsItem3.id !== undefined) {
                  resourceIdValue7['id'] = frontendIPConfigurationsItem3.id;
                }
              }
              propertiesValue6['frontendIPConfigurations'] = frontendIPConfigurationsArray3;
            }
            
            if (inboundNatRulesItem2.properties.backendIPConfiguration !== null && inboundNatRulesItem2.properties.backendIPConfiguration !== undefined) {
              var backendIPConfigurationValue = {};
              propertiesValue6['backendIPConfiguration'] = backendIPConfigurationValue;
              
              if (inboundNatRulesItem2.properties.backendIPConfiguration.id !== null && inboundNatRulesItem2.properties.backendIPConfiguration.id !== undefined) {
                backendIPConfigurationValue['id'] = inboundNatRulesItem2.properties.backendIPConfiguration.id;
              }
            }
            
            propertiesValue6['protocol'] = inboundNatRulesItem2.properties.protocol;
            
            propertiesValue6['frontendPort'] = inboundNatRulesItem2.properties.frontendPort;
            
            if (inboundNatRulesItem2.properties.backendPort !== null && inboundNatRulesItem2.properties.backendPort !== undefined) {
              propertiesValue6['backendPort'] = inboundNatRulesItem2.properties.backendPort;
            }
            
            if (inboundNatRulesItem2.properties.idleTimeoutInMinutes !== null && inboundNatRulesItem2.properties.idleTimeoutInMinutes !== undefined) {
              propertiesValue6['idleTimeoutInMinutes'] = inboundNatRulesItem2.properties.idleTimeoutInMinutes;
            }
            
            propertiesValue6['enableFloatingIP'] = inboundNatRulesItem2.properties.enableFloatingIP;
            
            if (inboundNatRulesItem2.properties.provisioningState !== null && inboundNatRulesItem2.properties.provisioningState !== undefined) {
              propertiesValue6['provisioningState'] = inboundNatRulesItem2.properties.provisioningState;
            }
          }
          
          if (inboundNatRulesItem2.name !== null && inboundNatRulesItem2.name !== undefined) {
            inboundNatRuleValue['name'] = inboundNatRulesItem2.name;
          }
          
          if (inboundNatRulesItem2.etag !== null && inboundNatRulesItem2.etag !== undefined) {
            inboundNatRuleValue['etag'] = inboundNatRulesItem2.etag;
          }
          
          if (inboundNatRulesItem2.id !== null && inboundNatRulesItem2.id !== undefined) {
            inboundNatRuleValue['id'] = inboundNatRulesItem2.id;
          }
        }
        propertiesValue['inboundNatRules'] = inboundNatRulesArray2;
      }
      
      if (parameters.properties.provisioningState !== null && parameters.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = parameters.properties.provisioningState;
      }
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      loadBalancerCreateOrUpdateParametersValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      loadBalancerCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      loadBalancerCreateOrUpdateParametersValue['name'] = parameters.name;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      loadBalancerCreateOrUpdateParametersValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      loadBalancerCreateOrUpdateParametersValue['id'] = parameters.id;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var loadBalancerInstance = { tags: {} };
          result.loadBalancer = loadBalancerInstance;
          
          var propertiesValue7 = responseDoc['properties'];
          if (propertiesValue7 !== null && propertiesValue7 !== undefined) {
            var propertiesInstance = { backendAddressPools: [], frontendIpConfigurations: [], inboundNatRules: [], loadBalancingRules: [], probes: [] };
            loadBalancerInstance.properties = propertiesInstance;
            
            var frontendIPConfigurationsArray4 = propertiesValue7['frontendIPConfigurations'];
            if (frontendIPConfigurationsArray4 !== null && frontendIPConfigurationsArray4 !== undefined) {
              for (var loweredIndex16 = 0; loweredIndex16 < frontendIPConfigurationsArray4.length; loweredIndex16 = loweredIndex16 + 1) {
                var frontendIPConfigurationsValue = frontendIPConfigurationsArray4[loweredIndex16];
                var frontendIpConfigurationInstance = {};
                propertiesInstance.frontendIpConfigurations.push(frontendIpConfigurationInstance);
                
                var propertiesValue8 = frontendIPConfigurationsValue['properties'];
                if (propertiesValue8 !== null && propertiesValue8 !== undefined) {
                  var propertiesInstance2 = { inboundNatRules: [], loadBalancingRules: [] };
                  frontendIpConfigurationInstance.properties = propertiesInstance2;
                  
                  var privateIPAddressValue = propertiesValue8['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    propertiesInstance2.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue8['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    propertiesInstance2.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue2 = propertiesValue8['subnet'];
                  if (subnetValue2 !== null && subnetValue2 !== undefined) {
                    var subnetInstance = {};
                    propertiesInstance2.subnet = subnetInstance;
                    
                    var idValue = subnetValue2['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      subnetInstance.id = idInstance;
                    }
                  }
                  
                  var publicIPAddressValue2 = propertiesValue8['publicIPAddress'];
                  if (publicIPAddressValue2 !== null && publicIPAddressValue2 !== undefined) {
                    var publicIPAddressInstance = {};
                    propertiesInstance2.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue2 = publicIPAddressValue2['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      publicIPAddressInstance.id = idInstance2;
                    }
                  }
                  
                  var inboundNatRulesArray3 = propertiesValue8['inboundNatRules'];
                  if (inboundNatRulesArray3 !== null && inboundNatRulesArray3 !== undefined) {
                    for (var loweredIndex17 = 0; loweredIndex17 < inboundNatRulesArray3.length; loweredIndex17 = loweredIndex17 + 1) {
                      var inboundNatRulesValue = inboundNatRulesArray3[loweredIndex17];
                      var resourceIdInstance = {};
                      propertiesInstance2.inboundNatRules.push(resourceIdInstance);
                      
                      var idValue3 = inboundNatRulesValue['id'];
                      if (idValue3 !== null && idValue3 !== undefined) {
                        var idInstance3 = idValue3;
                        resourceIdInstance.id = idInstance3;
                      }
                    }
                  }
                  
                  var loadBalancingRulesArray5 = propertiesValue8['loadBalancingRules'];
                  if (loadBalancingRulesArray5 !== null && loadBalancingRulesArray5 !== undefined) {
                    for (var loweredIndex18 = 0; loweredIndex18 < loadBalancingRulesArray5.length; loweredIndex18 = loweredIndex18 + 1) {
                      var loadBalancingRulesValue = loadBalancingRulesArray5[loweredIndex18];
                      var resourceIdInstance2 = {};
                      propertiesInstance2.loadBalancingRules.push(resourceIdInstance2);
                      
                      var idValue4 = loadBalancingRulesValue['id'];
                      if (idValue4 !== null && idValue4 !== undefined) {
                        var idInstance4 = idValue4;
                        resourceIdInstance2.id = idInstance4;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue8['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    propertiesInstance2.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = frontendIPConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  frontendIpConfigurationInstance.name = nameInstance;
                }
                
                var etagValue = frontendIPConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  frontendIpConfigurationInstance.etag = etagInstance;
                }
                
                var idValue5 = frontendIPConfigurationsValue['id'];
                if (idValue5 !== null && idValue5 !== undefined) {
                  var idInstance5 = idValue5;
                  frontendIpConfigurationInstance.id = idInstance5;
                }
              }
            }
            
            var backendAddressPoolsArray2 = propertiesValue7['backendAddressPools'];
            if (backendAddressPoolsArray2 !== null && backendAddressPoolsArray2 !== undefined) {
              for (var loweredIndex19 = 0; loweredIndex19 < backendAddressPoolsArray2.length; loweredIndex19 = loweredIndex19 + 1) {
                var backendAddressPoolsValue = backendAddressPoolsArray2[loweredIndex19];
                var backendAddressPoolInstance = {};
                propertiesInstance.backendAddressPools.push(backendAddressPoolInstance);
                
                var propertiesValue9 = backendAddressPoolsValue['properties'];
                if (propertiesValue9 !== null && propertiesValue9 !== undefined) {
                  var propertiesInstance3 = { backendIpConfigurations: [], loadBalancingRules: [] };
                  backendAddressPoolInstance.properties = propertiesInstance3;
                  
                  var backendIPConfigurationsArray2 = propertiesValue9['backendIPConfigurations'];
                  if (backendIPConfigurationsArray2 !== null && backendIPConfigurationsArray2 !== undefined) {
                    for (var loweredIndex20 = 0; loweredIndex20 < backendIPConfigurationsArray2.length; loweredIndex20 = loweredIndex20 + 1) {
                      var backendIPConfigurationsValue = backendIPConfigurationsArray2[loweredIndex20];
                      var resourceIdInstance3 = {};
                      propertiesInstance3.backendIpConfigurations.push(resourceIdInstance3);
                      
                      var idValue6 = backendIPConfigurationsValue['id'];
                      if (idValue6 !== null && idValue6 !== undefined) {
                        var idInstance6 = idValue6;
                        resourceIdInstance3.id = idInstance6;
                      }
                    }
                  }
                  
                  var loadBalancingRulesArray6 = propertiesValue9['loadBalancingRules'];
                  if (loadBalancingRulesArray6 !== null && loadBalancingRulesArray6 !== undefined) {
                    for (var loweredIndex21 = 0; loweredIndex21 < loadBalancingRulesArray6.length; loweredIndex21 = loweredIndex21 + 1) {
                      var loadBalancingRulesValue2 = loadBalancingRulesArray6[loweredIndex21];
                      var resourceIdInstance4 = {};
                      propertiesInstance3.loadBalancingRules.push(resourceIdInstance4);
                      
                      var idValue7 = loadBalancingRulesValue2['id'];
                      if (idValue7 !== null && idValue7 !== undefined) {
                        var idInstance7 = idValue7;
                        resourceIdInstance4.id = idInstance7;
                      }
                    }
                  }
                  
                  var provisioningStateValue2 = propertiesValue9['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    propertiesInstance3.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue2 = backendAddressPoolsValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  backendAddressPoolInstance.name = nameInstance2;
                }
                
                var etagValue2 = backendAddressPoolsValue['etag'];
                if (etagValue2 !== null && etagValue2 !== undefined) {
                  var etagInstance2 = etagValue2;
                  backendAddressPoolInstance.etag = etagInstance2;
                }
                
                var idValue8 = backendAddressPoolsValue['id'];
                if (idValue8 !== null && idValue8 !== undefined) {
                  var idInstance8 = idValue8;
                  backendAddressPoolInstance.id = idInstance8;
                }
              }
            }
            
            var loadBalancingRulesArray7 = propertiesValue7['loadBalancingRules'];
            if (loadBalancingRulesArray7 !== null && loadBalancingRulesArray7 !== undefined) {
              for (var loweredIndex22 = 0; loweredIndex22 < loadBalancingRulesArray7.length; loweredIndex22 = loweredIndex22 + 1) {
                var loadBalancingRulesValue3 = loadBalancingRulesArray7[loweredIndex22];
                var loadBalancingRuleInstance = {};
                propertiesInstance.loadBalancingRules.push(loadBalancingRuleInstance);
                
                var propertiesValue10 = loadBalancingRulesValue3['properties'];
                if (propertiesValue10 !== null && propertiesValue10 !== undefined) {
                  var propertiesInstance4 = { frontendIPConfigurations: [] };
                  loadBalancingRuleInstance.properties = propertiesInstance4;
                  
                  var frontendIPConfigurationsArray5 = propertiesValue10['frontendIPConfigurations'];
                  if (frontendIPConfigurationsArray5 !== null && frontendIPConfigurationsArray5 !== undefined) {
                    for (var loweredIndex23 = 0; loweredIndex23 < frontendIPConfigurationsArray5.length; loweredIndex23 = loweredIndex23 + 1) {
                      var frontendIPConfigurationsValue2 = frontendIPConfigurationsArray5[loweredIndex23];
                      var resourceIdInstance5 = {};
                      propertiesInstance4.frontendIPConfigurations.push(resourceIdInstance5);
                      
                      var idValue9 = frontendIPConfigurationsValue2['id'];
                      if (idValue9 !== null && idValue9 !== undefined) {
                        var idInstance9 = idValue9;
                        resourceIdInstance5.id = idInstance9;
                      }
                    }
                  }
                  
                  var backendAddressPoolValue3 = propertiesValue10['backendAddressPool'];
                  if (backendAddressPoolValue3 !== null && backendAddressPoolValue3 !== undefined) {
                    var backendAddressPoolInstance2 = {};
                    propertiesInstance4.backendAddressPool = backendAddressPoolInstance2;
                    
                    var idValue10 = backendAddressPoolValue3['id'];
                    if (idValue10 !== null && idValue10 !== undefined) {
                      var idInstance10 = idValue10;
                      backendAddressPoolInstance2.id = idInstance10;
                    }
                  }
                  
                  var probeValue3 = propertiesValue10['probe'];
                  if (probeValue3 !== null && probeValue3 !== undefined) {
                    var probeInstance = {};
                    propertiesInstance4.probe = probeInstance;
                    
                    var idValue11 = probeValue3['id'];
                    if (idValue11 !== null && idValue11 !== undefined) {
                      var idInstance11 = idValue11;
                      probeInstance.id = idInstance11;
                    }
                  }
                  
                  var protocolValue = propertiesValue10['protocol'];
                  if (protocolValue !== null && protocolValue !== undefined) {
                    var protocolInstance = protocolValue;
                    propertiesInstance4.protocol = protocolInstance;
                  }
                  
                  var loadDistributionValue = propertiesValue10['loadDistribution'];
                  if (loadDistributionValue !== null && loadDistributionValue !== undefined) {
                    var loadDistributionInstance = loadDistributionValue;
                    propertiesInstance4.loadDistribution = loadDistributionInstance;
                  }
                  
                  var frontendPortValue = propertiesValue10['frontendPort'];
                  if (frontendPortValue !== null && frontendPortValue !== undefined) {
                    var frontendPortInstance = frontendPortValue;
                    propertiesInstance4.frontendPort = frontendPortInstance;
                  }
                  
                  var backendPortValue = propertiesValue10['backendPort'];
                  if (backendPortValue !== null && backendPortValue !== undefined) {
                    var backendPortInstance = backendPortValue;
                    propertiesInstance4.backendPort = backendPortInstance;
                  }
                  
                  var idleTimeoutInMinutesValue = propertiesValue10['idleTimeoutInMinutes'];
                  if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
                    var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
                    propertiesInstance4.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                  }
                  
                  var enableFloatingIPValue = propertiesValue10['enableFloatingIP'];
                  if (enableFloatingIPValue !== null && enableFloatingIPValue !== undefined) {
                    var enableFloatingIPInstance = enableFloatingIPValue;
                    propertiesInstance4.enableFloatingIP = enableFloatingIPInstance;
                  }
                  
                  var provisioningStateValue3 = propertiesValue10['provisioningState'];
                  if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                    var provisioningStateInstance3 = provisioningStateValue3;
                    propertiesInstance4.provisioningState = provisioningStateInstance3;
                  }
                }
                
                var nameValue3 = loadBalancingRulesValue3['name'];
                if (nameValue3 !== null && nameValue3 !== undefined) {
                  var nameInstance3 = nameValue3;
                  loadBalancingRuleInstance.name = nameInstance3;
                }
                
                var etagValue3 = loadBalancingRulesValue3['etag'];
                if (etagValue3 !== null && etagValue3 !== undefined) {
                  var etagInstance3 = etagValue3;
                  loadBalancingRuleInstance.etag = etagInstance3;
                }
                
                var idValue12 = loadBalancingRulesValue3['id'];
                if (idValue12 !== null && idValue12 !== undefined) {
                  var idInstance12 = idValue12;
                  loadBalancingRuleInstance.id = idInstance12;
                }
              }
            }
            
            var probesArray2 = propertiesValue7['probes'];
            if (probesArray2 !== null && probesArray2 !== undefined) {
              for (var loweredIndex24 = 0; loweredIndex24 < probesArray2.length; loweredIndex24 = loweredIndex24 + 1) {
                var probesValue = probesArray2[loweredIndex24];
                var probeInstance2 = {};
                propertiesInstance.probes.push(probeInstance2);
                
                var propertiesValue11 = probesValue['properties'];
                if (propertiesValue11 !== null && propertiesValue11 !== undefined) {
                  var propertiesInstance5 = { loadBalancingRules: [] };
                  probeInstance2.properties = propertiesInstance5;
                  
                  var loadBalancingRulesArray8 = propertiesValue11['loadBalancingRules'];
                  if (loadBalancingRulesArray8 !== null && loadBalancingRulesArray8 !== undefined) {
                    for (var loweredIndex25 = 0; loweredIndex25 < loadBalancingRulesArray8.length; loweredIndex25 = loweredIndex25 + 1) {
                      var loadBalancingRulesValue4 = loadBalancingRulesArray8[loweredIndex25];
                      var resourceIdInstance6 = {};
                      propertiesInstance5.loadBalancingRules.push(resourceIdInstance6);
                      
                      var idValue13 = loadBalancingRulesValue4['id'];
                      if (idValue13 !== null && idValue13 !== undefined) {
                        var idInstance13 = idValue13;
                        resourceIdInstance6.id = idInstance13;
                      }
                    }
                  }
                  
                  var protocolValue2 = propertiesValue11['protocol'];
                  if (protocolValue2 !== null && protocolValue2 !== undefined) {
                    var protocolInstance2 = protocolValue2;
                    propertiesInstance5.protocol = protocolInstance2;
                  }
                  
                  var portValue = propertiesValue11['port'];
                  if (portValue !== null && portValue !== undefined) {
                    var portInstance = portValue;
                    propertiesInstance5.port = portInstance;
                  }
                  
                  var intervalInSecondsValue = propertiesValue11['intervalInSeconds'];
                  if (intervalInSecondsValue !== null && intervalInSecondsValue !== undefined) {
                    var intervalInSecondsInstance = intervalInSecondsValue;
                    propertiesInstance5.intervalInSeconds = intervalInSecondsInstance;
                  }
                  
                  var numberOfProbesValue = propertiesValue11['numberOfProbes'];
                  if (numberOfProbesValue !== null && numberOfProbesValue !== undefined) {
                    var numberOfProbesInstance = numberOfProbesValue;
                    propertiesInstance5.numberOfProbes = numberOfProbesInstance;
                  }
                  
                  var requestPathValue = propertiesValue11['requestPath'];
                  if (requestPathValue !== null && requestPathValue !== undefined) {
                    var requestPathInstance = requestPathValue;
                    propertiesInstance5.requestPath = requestPathInstance;
                  }
                  
                  var provisioningStateValue4 = propertiesValue11['provisioningState'];
                  if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                    var provisioningStateInstance4 = provisioningStateValue4;
                    propertiesInstance5.provisioningState = provisioningStateInstance4;
                  }
                }
                
                var nameValue4 = probesValue['name'];
                if (nameValue4 !== null && nameValue4 !== undefined) {
                  var nameInstance4 = nameValue4;
                  probeInstance2.name = nameInstance4;
                }
                
                var etagValue4 = probesValue['etag'];
                if (etagValue4 !== null && etagValue4 !== undefined) {
                  var etagInstance4 = etagValue4;
                  probeInstance2.etag = etagInstance4;
                }
                
                var idValue14 = probesValue['id'];
                if (idValue14 !== null && idValue14 !== undefined) {
                  var idInstance14 = idValue14;
                  probeInstance2.id = idInstance14;
                }
              }
            }
            
            var inboundNatRulesArray4 = propertiesValue7['inboundNatRules'];
            if (inboundNatRulesArray4 !== null && inboundNatRulesArray4 !== undefined) {
              for (var loweredIndex26 = 0; loweredIndex26 < inboundNatRulesArray4.length; loweredIndex26 = loweredIndex26 + 1) {
                var inboundNatRulesValue2 = inboundNatRulesArray4[loweredIndex26];
                var inboundNatRuleInstance = {};
                propertiesInstance.inboundNatRules.push(inboundNatRuleInstance);
                
                var propertiesValue12 = inboundNatRulesValue2['properties'];
                if (propertiesValue12 !== null && propertiesValue12 !== undefined) {
                  var propertiesInstance6 = { frontendIPConfigurations: [] };
                  inboundNatRuleInstance.properties = propertiesInstance6;
                  
                  var frontendIPConfigurationsArray6 = propertiesValue12['frontendIPConfigurations'];
                  if (frontendIPConfigurationsArray6 !== null && frontendIPConfigurationsArray6 !== undefined) {
                    for (var loweredIndex27 = 0; loweredIndex27 < frontendIPConfigurationsArray6.length; loweredIndex27 = loweredIndex27 + 1) {
                      var frontendIPConfigurationsValue3 = frontendIPConfigurationsArray6[loweredIndex27];
                      var resourceIdInstance7 = {};
                      propertiesInstance6.frontendIPConfigurations.push(resourceIdInstance7);
                      
                      var idValue15 = frontendIPConfigurationsValue3['id'];
                      if (idValue15 !== null && idValue15 !== undefined) {
                        var idInstance15 = idValue15;
                        resourceIdInstance7.id = idInstance15;
                      }
                    }
                  }
                  
                  var backendIPConfigurationValue2 = propertiesValue12['backendIPConfiguration'];
                  if (backendIPConfigurationValue2 !== null && backendIPConfigurationValue2 !== undefined) {
                    var backendIPConfigurationInstance = {};
                    propertiesInstance6.backendIPConfiguration = backendIPConfigurationInstance;
                    
                    var idValue16 = backendIPConfigurationValue2['id'];
                    if (idValue16 !== null && idValue16 !== undefined) {
                      var idInstance16 = idValue16;
                      backendIPConfigurationInstance.id = idInstance16;
                    }
                  }
                  
                  var protocolValue3 = propertiesValue12['protocol'];
                  if (protocolValue3 !== null && protocolValue3 !== undefined) {
                    var protocolInstance3 = protocolValue3;
                    propertiesInstance6.protocol = protocolInstance3;
                  }
                  
                  var frontendPortValue2 = propertiesValue12['frontendPort'];
                  if (frontendPortValue2 !== null && frontendPortValue2 !== undefined) {
                    var frontendPortInstance2 = frontendPortValue2;
                    propertiesInstance6.frontendPort = frontendPortInstance2;
                  }
                  
                  var backendPortValue2 = propertiesValue12['backendPort'];
                  if (backendPortValue2 !== null && backendPortValue2 !== undefined) {
                    var backendPortInstance2 = backendPortValue2;
                    propertiesInstance6.backendPort = backendPortInstance2;
                  }
                  
                  var idleTimeoutInMinutesValue2 = propertiesValue12['idleTimeoutInMinutes'];
                  if (idleTimeoutInMinutesValue2 !== null && idleTimeoutInMinutesValue2 !== undefined) {
                    var idleTimeoutInMinutesInstance2 = idleTimeoutInMinutesValue2;
                    propertiesInstance6.idleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                  }
                  
                  var enableFloatingIPValue2 = propertiesValue12['enableFloatingIP'];
                  if (enableFloatingIPValue2 !== null && enableFloatingIPValue2 !== undefined) {
                    var enableFloatingIPInstance2 = enableFloatingIPValue2;
                    propertiesInstance6.enableFloatingIP = enableFloatingIPInstance2;
                  }
                  
                  var provisioningStateValue5 = propertiesValue12['provisioningState'];
                  if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                    var provisioningStateInstance5 = provisioningStateValue5;
                    propertiesInstance6.provisioningState = provisioningStateInstance5;
                  }
                }
                
                var nameValue5 = inboundNatRulesValue2['name'];
                if (nameValue5 !== null && nameValue5 !== undefined) {
                  var nameInstance5 = nameValue5;
                  inboundNatRuleInstance.name = nameInstance5;
                }
                
                var etagValue5 = inboundNatRulesValue2['etag'];
                if (etagValue5 !== null && etagValue5 !== undefined) {
                  var etagInstance5 = etagValue5;
                  inboundNatRuleInstance.etag = etagInstance5;
                }
                
                var idValue17 = inboundNatRulesValue2['id'];
                if (idValue17 !== null && idValue17 !== undefined) {
                  var idInstance17 = idValue17;
                  inboundNatRuleInstance.id = idInstance17;
                }
              }
            }
            
            var provisioningStateValue6 = propertiesValue7['provisioningState'];
            if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
              var provisioningStateInstance6 = provisioningStateValue6;
              propertiesInstance.provisioningState = provisioningStateInstance6;
            }
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            loadBalancerInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              loadBalancerInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var nameValue6 = responseDoc['name'];
          if (nameValue6 !== null && nameValue6 !== undefined) {
            var nameInstance6 = nameValue6;
            loadBalancerInstance.name = nameInstance6;
          }
          
          var etagValue6 = responseDoc['etag'];
          if (etagValue6 !== null && etagValue6 !== undefined) {
            var etagInstance6 = etagValue6;
            loadBalancerInstance.etag = etagInstance6;
          }
          
          var idValue18 = responseDoc['id'];
          if (idValue18 !== null && idValue18 !== undefined) {
            var idInstance18 = idValue18;
            loadBalancerInstance.id = idInstance18;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex28 = 0; loweredIndex28 < detailsArray.length; loweredIndex28 = loweredIndex28 + 1) {
                var detailsValue = detailsArray[loweredIndex28];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete loadbalancer operation deletes the specified loadbalancer.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} loadBalancerName The name of the loadBalancer.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.beginDeleting = function(resourceGroupName, loadBalancerName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (loadBalancerName === null || loadBalancerName === undefined) {
      return callback(new Error('loadBalancerName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/loadBalancers/';
    url2 = url2 + encodeURIComponent(loadBalancerName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put LoadBalancer operation creates/updates a LoadBalancer
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} loadBalancerName The name of the loadBalancer.
   * 
   * @param {LoadBalancerCreateOrUpdateParameters} parameters Parameters
   * supplied to the create/update LoadBalancer operation
   * 
   * @param {LoadBalancerProperties} [parameters.properties]
   * 
   * @param {IEnumerable} [parameters.properties.frontendIpConfigurations]
   * Frontend IP addresses of the load balancer
   * 
   * @param {IEnumerable} [parameters.properties.backendAddressPools] Pools of
   * backend IP addresseses
   * 
   * @param {IEnumerable} [parameters.properties.loadBalancingRules]
   * 
   * @param {IEnumerable} [parameters.properties.probes] List of Load balancer
   * probes
   * 
   * @param {IEnumerable} [parameters.properties.inboundNatRules]
   * 
   * @param {string} [parameters.properties.provisioningState] Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.location] The location of the resource
   * 
   * @param {object} [parameters.tags]
   * 
   * @param {string} [parameters.name] Read-OnlyA Name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [parameters.etag] A unique read-only string that changes
   * whenever the resource is updated
   * 
   * @param {string} [parameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.createOrUpdate = function(resourceGroupName, loadBalancerName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.loadBalancers.beginCreateOrUpdating(resourceGroupName, loadBalancerName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} loadBalancerName The name of the loadBalancer.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.deleteMethod = function(resourceGroupName, loadBalancerName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.loadBalancers.beginDeleting(resourceGroupName, loadBalancerName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get ntework interface operation retreives information about the
   * specified network interface.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} loadBalancerName The name of the loadBalancer.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.get = function(resourceGroupName, loadBalancerName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (loadBalancerName === null || loadBalancerName === undefined) {
      return callback(new Error('loadBalancerName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/loadBalancers/';
    url2 = url2 + encodeURIComponent(loadBalancerName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var loadBalancerInstance = { tags: {} };
          result.loadBalancer = loadBalancerInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { backendAddressPools: [], frontendIpConfigurations: [], inboundNatRules: [], loadBalancingRules: [], probes: [] };
            loadBalancerInstance.properties = propertiesInstance;
            
            var frontendIPConfigurationsArray = propertiesValue['frontendIPConfigurations'];
            if (frontendIPConfigurationsArray !== null && frontendIPConfigurationsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < frontendIPConfigurationsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var frontendIPConfigurationsValue = frontendIPConfigurationsArray[loweredIndex1];
                var frontendIpConfigurationInstance = {};
                propertiesInstance.frontendIpConfigurations.push(frontendIpConfigurationInstance);
                
                var propertiesValue2 = frontendIPConfigurationsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var propertiesInstance2 = { inboundNatRules: [], loadBalancingRules: [] };
                  frontendIpConfigurationInstance.properties = propertiesInstance2;
                  
                  var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    propertiesInstance2.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    propertiesInstance2.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue = propertiesValue2['subnet'];
                  if (subnetValue !== null && subnetValue !== undefined) {
                    var subnetInstance = {};
                    propertiesInstance2.subnet = subnetInstance;
                    
                    var idValue = subnetValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      subnetInstance.id = idInstance;
                    }
                  }
                  
                  var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                  if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                    var publicIPAddressInstance = {};
                    propertiesInstance2.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue2 = publicIPAddressValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      publicIPAddressInstance.id = idInstance2;
                    }
                  }
                  
                  var inboundNatRulesArray = propertiesValue2['inboundNatRules'];
                  if (inboundNatRulesArray !== null && inboundNatRulesArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < inboundNatRulesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var inboundNatRulesValue = inboundNatRulesArray[loweredIndex2];
                      var resourceIdInstance = {};
                      propertiesInstance2.inboundNatRules.push(resourceIdInstance);
                      
                      var idValue3 = inboundNatRulesValue['id'];
                      if (idValue3 !== null && idValue3 !== undefined) {
                        var idInstance3 = idValue3;
                        resourceIdInstance.id = idInstance3;
                      }
                    }
                  }
                  
                  var loadBalancingRulesArray = propertiesValue2['loadBalancingRules'];
                  if (loadBalancingRulesArray !== null && loadBalancingRulesArray !== undefined) {
                    for (var loweredIndex3 = 0; loweredIndex3 < loadBalancingRulesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var loadBalancingRulesValue = loadBalancingRulesArray[loweredIndex3];
                      var resourceIdInstance2 = {};
                      propertiesInstance2.loadBalancingRules.push(resourceIdInstance2);
                      
                      var idValue4 = loadBalancingRulesValue['id'];
                      if (idValue4 !== null && idValue4 !== undefined) {
                        var idInstance4 = idValue4;
                        resourceIdInstance2.id = idInstance4;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    propertiesInstance2.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = frontendIPConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  frontendIpConfigurationInstance.name = nameInstance;
                }
                
                var etagValue = frontendIPConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  frontendIpConfigurationInstance.etag = etagInstance;
                }
                
                var idValue5 = frontendIPConfigurationsValue['id'];
                if (idValue5 !== null && idValue5 !== undefined) {
                  var idInstance5 = idValue5;
                  frontendIpConfigurationInstance.id = idInstance5;
                }
              }
            }
            
            var backendAddressPoolsArray = propertiesValue['backendAddressPools'];
            if (backendAddressPoolsArray !== null && backendAddressPoolsArray !== undefined) {
              for (var loweredIndex4 = 0; loweredIndex4 < backendAddressPoolsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                var backendAddressPoolsValue = backendAddressPoolsArray[loweredIndex4];
                var backendAddressPoolInstance = {};
                propertiesInstance.backendAddressPools.push(backendAddressPoolInstance);
                
                var propertiesValue3 = backendAddressPoolsValue['properties'];
                if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                  var propertiesInstance3 = { backendIpConfigurations: [], loadBalancingRules: [] };
                  backendAddressPoolInstance.properties = propertiesInstance3;
                  
                  var backendIPConfigurationsArray = propertiesValue3['backendIPConfigurations'];
                  if (backendIPConfigurationsArray !== null && backendIPConfigurationsArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < backendIPConfigurationsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var backendIPConfigurationsValue = backendIPConfigurationsArray[loweredIndex5];
                      var resourceIdInstance3 = {};
                      propertiesInstance3.backendIpConfigurations.push(resourceIdInstance3);
                      
                      var idValue6 = backendIPConfigurationsValue['id'];
                      if (idValue6 !== null && idValue6 !== undefined) {
                        var idInstance6 = idValue6;
                        resourceIdInstance3.id = idInstance6;
                      }
                    }
                  }
                  
                  var loadBalancingRulesArray2 = propertiesValue3['loadBalancingRules'];
                  if (loadBalancingRulesArray2 !== null && loadBalancingRulesArray2 !== undefined) {
                    for (var loweredIndex6 = 0; loweredIndex6 < loadBalancingRulesArray2.length; loweredIndex6 = loweredIndex6 + 1) {
                      var loadBalancingRulesValue2 = loadBalancingRulesArray2[loweredIndex6];
                      var resourceIdInstance4 = {};
                      propertiesInstance3.loadBalancingRules.push(resourceIdInstance4);
                      
                      var idValue7 = loadBalancingRulesValue2['id'];
                      if (idValue7 !== null && idValue7 !== undefined) {
                        var idInstance7 = idValue7;
                        resourceIdInstance4.id = idInstance7;
                      }
                    }
                  }
                  
                  var provisioningStateValue2 = propertiesValue3['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    propertiesInstance3.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue2 = backendAddressPoolsValue['name'];
                if (nameValue2 !== null && nameValue2 !== undefined) {
                  var nameInstance2 = nameValue2;
                  backendAddressPoolInstance.name = nameInstance2;
                }
                
                var etagValue2 = backendAddressPoolsValue['etag'];
                if (etagValue2 !== null && etagValue2 !== undefined) {
                  var etagInstance2 = etagValue2;
                  backendAddressPoolInstance.etag = etagInstance2;
                }
                
                var idValue8 = backendAddressPoolsValue['id'];
                if (idValue8 !== null && idValue8 !== undefined) {
                  var idInstance8 = idValue8;
                  backendAddressPoolInstance.id = idInstance8;
                }
              }
            }
            
            var loadBalancingRulesArray3 = propertiesValue['loadBalancingRules'];
            if (loadBalancingRulesArray3 !== null && loadBalancingRulesArray3 !== undefined) {
              for (var loweredIndex7 = 0; loweredIndex7 < loadBalancingRulesArray3.length; loweredIndex7 = loweredIndex7 + 1) {
                var loadBalancingRulesValue3 = loadBalancingRulesArray3[loweredIndex7];
                var loadBalancingRuleInstance = {};
                propertiesInstance.loadBalancingRules.push(loadBalancingRuleInstance);
                
                var propertiesValue4 = loadBalancingRulesValue3['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var propertiesInstance4 = { frontendIPConfigurations: [] };
                  loadBalancingRuleInstance.properties = propertiesInstance4;
                  
                  var frontendIPConfigurationsArray2 = propertiesValue4['frontendIPConfigurations'];
                  if (frontendIPConfigurationsArray2 !== null && frontendIPConfigurationsArray2 !== undefined) {
                    for (var loweredIndex8 = 0; loweredIndex8 < frontendIPConfigurationsArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                      var frontendIPConfigurationsValue2 = frontendIPConfigurationsArray2[loweredIndex8];
                      var resourceIdInstance5 = {};
                      propertiesInstance4.frontendIPConfigurations.push(resourceIdInstance5);
                      
                      var idValue9 = frontendIPConfigurationsValue2['id'];
                      if (idValue9 !== null && idValue9 !== undefined) {
                        var idInstance9 = idValue9;
                        resourceIdInstance5.id = idInstance9;
                      }
                    }
                  }
                  
                  var backendAddressPoolValue = propertiesValue4['backendAddressPool'];
                  if (backendAddressPoolValue !== null && backendAddressPoolValue !== undefined) {
                    var backendAddressPoolInstance2 = {};
                    propertiesInstance4.backendAddressPool = backendAddressPoolInstance2;
                    
                    var idValue10 = backendAddressPoolValue['id'];
                    if (idValue10 !== null && idValue10 !== undefined) {
                      var idInstance10 = idValue10;
                      backendAddressPoolInstance2.id = idInstance10;
                    }
                  }
                  
                  var probeValue = propertiesValue4['probe'];
                  if (probeValue !== null && probeValue !== undefined) {
                    var probeInstance = {};
                    propertiesInstance4.probe = probeInstance;
                    
                    var idValue11 = probeValue['id'];
                    if (idValue11 !== null && idValue11 !== undefined) {
                      var idInstance11 = idValue11;
                      probeInstance.id = idInstance11;
                    }
                  }
                  
                  var protocolValue = propertiesValue4['protocol'];
                  if (protocolValue !== null && protocolValue !== undefined) {
                    var protocolInstance = protocolValue;
                    propertiesInstance4.protocol = protocolInstance;
                  }
                  
                  var loadDistributionValue = propertiesValue4['loadDistribution'];
                  if (loadDistributionValue !== null && loadDistributionValue !== undefined) {
                    var loadDistributionInstance = loadDistributionValue;
                    propertiesInstance4.loadDistribution = loadDistributionInstance;
                  }
                  
                  var frontendPortValue = propertiesValue4['frontendPort'];
                  if (frontendPortValue !== null && frontendPortValue !== undefined) {
                    var frontendPortInstance = frontendPortValue;
                    propertiesInstance4.frontendPort = frontendPortInstance;
                  }
                  
                  var backendPortValue = propertiesValue4['backendPort'];
                  if (backendPortValue !== null && backendPortValue !== undefined) {
                    var backendPortInstance = backendPortValue;
                    propertiesInstance4.backendPort = backendPortInstance;
                  }
                  
                  var idleTimeoutInMinutesValue = propertiesValue4['idleTimeoutInMinutes'];
                  if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
                    var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
                    propertiesInstance4.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                  }
                  
                  var enableFloatingIPValue = propertiesValue4['enableFloatingIP'];
                  if (enableFloatingIPValue !== null && enableFloatingIPValue !== undefined) {
                    var enableFloatingIPInstance = enableFloatingIPValue;
                    propertiesInstance4.enableFloatingIP = enableFloatingIPInstance;
                  }
                  
                  var provisioningStateValue3 = propertiesValue4['provisioningState'];
                  if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                    var provisioningStateInstance3 = provisioningStateValue3;
                    propertiesInstance4.provisioningState = provisioningStateInstance3;
                  }
                }
                
                var nameValue3 = loadBalancingRulesValue3['name'];
                if (nameValue3 !== null && nameValue3 !== undefined) {
                  var nameInstance3 = nameValue3;
                  loadBalancingRuleInstance.name = nameInstance3;
                }
                
                var etagValue3 = loadBalancingRulesValue3['etag'];
                if (etagValue3 !== null && etagValue3 !== undefined) {
                  var etagInstance3 = etagValue3;
                  loadBalancingRuleInstance.etag = etagInstance3;
                }
                
                var idValue12 = loadBalancingRulesValue3['id'];
                if (idValue12 !== null && idValue12 !== undefined) {
                  var idInstance12 = idValue12;
                  loadBalancingRuleInstance.id = idInstance12;
                }
              }
            }
            
            var probesArray = propertiesValue['probes'];
            if (probesArray !== null && probesArray !== undefined) {
              for (var loweredIndex9 = 0; loweredIndex9 < probesArray.length; loweredIndex9 = loweredIndex9 + 1) {
                var probesValue = probesArray[loweredIndex9];
                var probeInstance2 = {};
                propertiesInstance.probes.push(probeInstance2);
                
                var propertiesValue5 = probesValue['properties'];
                if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                  var propertiesInstance5 = { loadBalancingRules: [] };
                  probeInstance2.properties = propertiesInstance5;
                  
                  var loadBalancingRulesArray4 = propertiesValue5['loadBalancingRules'];
                  if (loadBalancingRulesArray4 !== null && loadBalancingRulesArray4 !== undefined) {
                    for (var loweredIndex10 = 0; loweredIndex10 < loadBalancingRulesArray4.length; loweredIndex10 = loweredIndex10 + 1) {
                      var loadBalancingRulesValue4 = loadBalancingRulesArray4[loweredIndex10];
                      var resourceIdInstance6 = {};
                      propertiesInstance5.loadBalancingRules.push(resourceIdInstance6);
                      
                      var idValue13 = loadBalancingRulesValue4['id'];
                      if (idValue13 !== null && idValue13 !== undefined) {
                        var idInstance13 = idValue13;
                        resourceIdInstance6.id = idInstance13;
                      }
                    }
                  }
                  
                  var protocolValue2 = propertiesValue5['protocol'];
                  if (protocolValue2 !== null && protocolValue2 !== undefined) {
                    var protocolInstance2 = protocolValue2;
                    propertiesInstance5.protocol = protocolInstance2;
                  }
                  
                  var portValue = propertiesValue5['port'];
                  if (portValue !== null && portValue !== undefined) {
                    var portInstance = portValue;
                    propertiesInstance5.port = portInstance;
                  }
                  
                  var intervalInSecondsValue = propertiesValue5['intervalInSeconds'];
                  if (intervalInSecondsValue !== null && intervalInSecondsValue !== undefined) {
                    var intervalInSecondsInstance = intervalInSecondsValue;
                    propertiesInstance5.intervalInSeconds = intervalInSecondsInstance;
                  }
                  
                  var numberOfProbesValue = propertiesValue5['numberOfProbes'];
                  if (numberOfProbesValue !== null && numberOfProbesValue !== undefined) {
                    var numberOfProbesInstance = numberOfProbesValue;
                    propertiesInstance5.numberOfProbes = numberOfProbesInstance;
                  }
                  
                  var requestPathValue = propertiesValue5['requestPath'];
                  if (requestPathValue !== null && requestPathValue !== undefined) {
                    var requestPathInstance = requestPathValue;
                    propertiesInstance5.requestPath = requestPathInstance;
                  }
                  
                  var provisioningStateValue4 = propertiesValue5['provisioningState'];
                  if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                    var provisioningStateInstance4 = provisioningStateValue4;
                    propertiesInstance5.provisioningState = provisioningStateInstance4;
                  }
                }
                
                var nameValue4 = probesValue['name'];
                if (nameValue4 !== null && nameValue4 !== undefined) {
                  var nameInstance4 = nameValue4;
                  probeInstance2.name = nameInstance4;
                }
                
                var etagValue4 = probesValue['etag'];
                if (etagValue4 !== null && etagValue4 !== undefined) {
                  var etagInstance4 = etagValue4;
                  probeInstance2.etag = etagInstance4;
                }
                
                var idValue14 = probesValue['id'];
                if (idValue14 !== null && idValue14 !== undefined) {
                  var idInstance14 = idValue14;
                  probeInstance2.id = idInstance14;
                }
              }
            }
            
            var inboundNatRulesArray2 = propertiesValue['inboundNatRules'];
            if (inboundNatRulesArray2 !== null && inboundNatRulesArray2 !== undefined) {
              for (var loweredIndex11 = 0; loweredIndex11 < inboundNatRulesArray2.length; loweredIndex11 = loweredIndex11 + 1) {
                var inboundNatRulesValue2 = inboundNatRulesArray2[loweredIndex11];
                var inboundNatRuleInstance = {};
                propertiesInstance.inboundNatRules.push(inboundNatRuleInstance);
                
                var propertiesValue6 = inboundNatRulesValue2['properties'];
                if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                  var propertiesInstance6 = { frontendIPConfigurations: [] };
                  inboundNatRuleInstance.properties = propertiesInstance6;
                  
                  var frontendIPConfigurationsArray3 = propertiesValue6['frontendIPConfigurations'];
                  if (frontendIPConfigurationsArray3 !== null && frontendIPConfigurationsArray3 !== undefined) {
                    for (var loweredIndex12 = 0; loweredIndex12 < frontendIPConfigurationsArray3.length; loweredIndex12 = loweredIndex12 + 1) {
                      var frontendIPConfigurationsValue3 = frontendIPConfigurationsArray3[loweredIndex12];
                      var resourceIdInstance7 = {};
                      propertiesInstance6.frontendIPConfigurations.push(resourceIdInstance7);
                      
                      var idValue15 = frontendIPConfigurationsValue3['id'];
                      if (idValue15 !== null && idValue15 !== undefined) {
                        var idInstance15 = idValue15;
                        resourceIdInstance7.id = idInstance15;
                      }
                    }
                  }
                  
                  var backendIPConfigurationValue = propertiesValue6['backendIPConfiguration'];
                  if (backendIPConfigurationValue !== null && backendIPConfigurationValue !== undefined) {
                    var backendIPConfigurationInstance = {};
                    propertiesInstance6.backendIPConfiguration = backendIPConfigurationInstance;
                    
                    var idValue16 = backendIPConfigurationValue['id'];
                    if (idValue16 !== null && idValue16 !== undefined) {
                      var idInstance16 = idValue16;
                      backendIPConfigurationInstance.id = idInstance16;
                    }
                  }
                  
                  var protocolValue3 = propertiesValue6['protocol'];
                  if (protocolValue3 !== null && protocolValue3 !== undefined) {
                    var protocolInstance3 = protocolValue3;
                    propertiesInstance6.protocol = protocolInstance3;
                  }
                  
                  var frontendPortValue2 = propertiesValue6['frontendPort'];
                  if (frontendPortValue2 !== null && frontendPortValue2 !== undefined) {
                    var frontendPortInstance2 = frontendPortValue2;
                    propertiesInstance6.frontendPort = frontendPortInstance2;
                  }
                  
                  var backendPortValue2 = propertiesValue6['backendPort'];
                  if (backendPortValue2 !== null && backendPortValue2 !== undefined) {
                    var backendPortInstance2 = backendPortValue2;
                    propertiesInstance6.backendPort = backendPortInstance2;
                  }
                  
                  var idleTimeoutInMinutesValue2 = propertiesValue6['idleTimeoutInMinutes'];
                  if (idleTimeoutInMinutesValue2 !== null && idleTimeoutInMinutesValue2 !== undefined) {
                    var idleTimeoutInMinutesInstance2 = idleTimeoutInMinutesValue2;
                    propertiesInstance6.idleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                  }
                  
                  var enableFloatingIPValue2 = propertiesValue6['enableFloatingIP'];
                  if (enableFloatingIPValue2 !== null && enableFloatingIPValue2 !== undefined) {
                    var enableFloatingIPInstance2 = enableFloatingIPValue2;
                    propertiesInstance6.enableFloatingIP = enableFloatingIPInstance2;
                  }
                  
                  var provisioningStateValue5 = propertiesValue6['provisioningState'];
                  if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                    var provisioningStateInstance5 = provisioningStateValue5;
                    propertiesInstance6.provisioningState = provisioningStateInstance5;
                  }
                }
                
                var nameValue5 = inboundNatRulesValue2['name'];
                if (nameValue5 !== null && nameValue5 !== undefined) {
                  var nameInstance5 = nameValue5;
                  inboundNatRuleInstance.name = nameInstance5;
                }
                
                var etagValue5 = inboundNatRulesValue2['etag'];
                if (etagValue5 !== null && etagValue5 !== undefined) {
                  var etagInstance5 = etagValue5;
                  inboundNatRuleInstance.etag = etagInstance5;
                }
                
                var idValue17 = inboundNatRulesValue2['id'];
                if (idValue17 !== null && idValue17 !== undefined) {
                  var idInstance17 = idValue17;
                  inboundNatRuleInstance.id = idInstance17;
                }
              }
            }
            
            var provisioningStateValue6 = propertiesValue['provisioningState'];
            if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
              var provisioningStateInstance6 = provisioningStateValue6;
              propertiesInstance.provisioningState = provisioningStateInstance6;
            }
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            loadBalancerInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              loadBalancerInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var nameValue6 = responseDoc['name'];
          if (nameValue6 !== null && nameValue6 !== undefined) {
            var nameInstance6 = nameValue6;
            loadBalancerInstance.name = nameInstance6;
          }
          
          var etagValue6 = responseDoc['etag'];
          if (etagValue6 !== null && etagValue6 !== undefined) {
            var etagInstance6 = etagValue6;
            loadBalancerInstance.etag = etagInstance6;
          }
          
          var idValue18 = responseDoc['id'];
          if (idValue18 !== null && idValue18 !== undefined) {
            var idInstance18 = idValue18;
            loadBalancerInstance.id = idInstance18;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List loadBalancer opertion retrieves all the loadbalancers in a
   * resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  LoadBalancerOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/loadBalancers';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { loadBalancers: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var loadBalancerInstance = { tags: {} };
              result.loadBalancers.push(loadBalancerInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { backendAddressPools: [], frontendIpConfigurations: [], inboundNatRules: [], loadBalancingRules: [], probes: [] };
                loadBalancerInstance.properties = propertiesInstance;
                
                var frontendIPConfigurationsArray = propertiesValue['frontendIPConfigurations'];
                if (frontendIPConfigurationsArray !== null && frontendIPConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < frontendIPConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var frontendIPConfigurationsValue = frontendIPConfigurationsArray[loweredIndex2];
                    var frontendIpConfigurationInstance = {};
                    propertiesInstance.frontendIpConfigurations.push(frontendIpConfigurationInstance);
                    
                    var propertiesValue2 = frontendIPConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var propertiesInstance2 = { inboundNatRules: [], loadBalancingRules: [] };
                      frontendIpConfigurationInstance.properties = propertiesInstance2;
                      
                      var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        propertiesInstance2.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        propertiesInstance2.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        propertiesInstance2.subnet = subnetInstance;
                        
                        var idValue = subnetValue['id'];
                        if (idValue !== null && idValue !== undefined) {
                          var idInstance = idValue;
                          subnetInstance.id = idInstance;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        propertiesInstance2.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue2 = publicIPAddressValue['id'];
                        if (idValue2 !== null && idValue2 !== undefined) {
                          var idInstance2 = idValue2;
                          publicIPAddressInstance.id = idInstance2;
                        }
                      }
                      
                      var inboundNatRulesArray = propertiesValue2['inboundNatRules'];
                      if (inboundNatRulesArray !== null && inboundNatRulesArray !== undefined) {
                        for (var loweredIndex3 = 0; loweredIndex3 < inboundNatRulesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                          var inboundNatRulesValue = inboundNatRulesArray[loweredIndex3];
                          var resourceIdInstance = {};
                          propertiesInstance2.inboundNatRules.push(resourceIdInstance);
                          
                          var idValue3 = inboundNatRulesValue['id'];
                          if (idValue3 !== null && idValue3 !== undefined) {
                            var idInstance3 = idValue3;
                            resourceIdInstance.id = idInstance3;
                          }
                        }
                      }
                      
                      var loadBalancingRulesArray = propertiesValue2['loadBalancingRules'];
                      if (loadBalancingRulesArray !== null && loadBalancingRulesArray !== undefined) {
                        for (var loweredIndex4 = 0; loweredIndex4 < loadBalancingRulesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                          var loadBalancingRulesValue = loadBalancingRulesArray[loweredIndex4];
                          var resourceIdInstance2 = {};
                          propertiesInstance2.loadBalancingRules.push(resourceIdInstance2);
                          
                          var idValue4 = loadBalancingRulesValue['id'];
                          if (idValue4 !== null && idValue4 !== undefined) {
                            var idInstance4 = idValue4;
                            resourceIdInstance2.id = idInstance4;
                          }
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        propertiesInstance2.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = frontendIPConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      frontendIpConfigurationInstance.name = nameInstance;
                    }
                    
                    var etagValue = frontendIPConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      frontendIpConfigurationInstance.etag = etagInstance;
                    }
                    
                    var idValue5 = frontendIPConfigurationsValue['id'];
                    if (idValue5 !== null && idValue5 !== undefined) {
                      var idInstance5 = idValue5;
                      frontendIpConfigurationInstance.id = idInstance5;
                    }
                  }
                }
                
                var backendAddressPoolsArray = propertiesValue['backendAddressPools'];
                if (backendAddressPoolsArray !== null && backendAddressPoolsArray !== undefined) {
                  for (var loweredIndex5 = 0; loweredIndex5 < backendAddressPoolsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                    var backendAddressPoolsValue = backendAddressPoolsArray[loweredIndex5];
                    var backendAddressPoolInstance = {};
                    propertiesInstance.backendAddressPools.push(backendAddressPoolInstance);
                    
                    var propertiesValue3 = backendAddressPoolsValue['properties'];
                    if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
                      var propertiesInstance3 = { backendIpConfigurations: [], loadBalancingRules: [] };
                      backendAddressPoolInstance.properties = propertiesInstance3;
                      
                      var backendIPConfigurationsArray = propertiesValue3['backendIPConfigurations'];
                      if (backendIPConfigurationsArray !== null && backendIPConfigurationsArray !== undefined) {
                        for (var loweredIndex6 = 0; loweredIndex6 < backendIPConfigurationsArray.length; loweredIndex6 = loweredIndex6 + 1) {
                          var backendIPConfigurationsValue = backendIPConfigurationsArray[loweredIndex6];
                          var resourceIdInstance3 = {};
                          propertiesInstance3.backendIpConfigurations.push(resourceIdInstance3);
                          
                          var idValue6 = backendIPConfigurationsValue['id'];
                          if (idValue6 !== null && idValue6 !== undefined) {
                            var idInstance6 = idValue6;
                            resourceIdInstance3.id = idInstance6;
                          }
                        }
                      }
                      
                      var loadBalancingRulesArray2 = propertiesValue3['loadBalancingRules'];
                      if (loadBalancingRulesArray2 !== null && loadBalancingRulesArray2 !== undefined) {
                        for (var loweredIndex7 = 0; loweredIndex7 < loadBalancingRulesArray2.length; loweredIndex7 = loweredIndex7 + 1) {
                          var loadBalancingRulesValue2 = loadBalancingRulesArray2[loweredIndex7];
                          var resourceIdInstance4 = {};
                          propertiesInstance3.loadBalancingRules.push(resourceIdInstance4);
                          
                          var idValue7 = loadBalancingRulesValue2['id'];
                          if (idValue7 !== null && idValue7 !== undefined) {
                            var idInstance7 = idValue7;
                            resourceIdInstance4.id = idInstance7;
                          }
                        }
                      }
                      
                      var provisioningStateValue2 = propertiesValue3['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        propertiesInstance3.provisioningState = provisioningStateInstance2;
                      }
                    }
                    
                    var nameValue2 = backendAddressPoolsValue['name'];
                    if (nameValue2 !== null && nameValue2 !== undefined) {
                      var nameInstance2 = nameValue2;
                      backendAddressPoolInstance.name = nameInstance2;
                    }
                    
                    var etagValue2 = backendAddressPoolsValue['etag'];
                    if (etagValue2 !== null && etagValue2 !== undefined) {
                      var etagInstance2 = etagValue2;
                      backendAddressPoolInstance.etag = etagInstance2;
                    }
                    
                    var idValue8 = backendAddressPoolsValue['id'];
                    if (idValue8 !== null && idValue8 !== undefined) {
                      var idInstance8 = idValue8;
                      backendAddressPoolInstance.id = idInstance8;
                    }
                  }
                }
                
                var loadBalancingRulesArray3 = propertiesValue['loadBalancingRules'];
                if (loadBalancingRulesArray3 !== null && loadBalancingRulesArray3 !== undefined) {
                  for (var loweredIndex8 = 0; loweredIndex8 < loadBalancingRulesArray3.length; loweredIndex8 = loweredIndex8 + 1) {
                    var loadBalancingRulesValue3 = loadBalancingRulesArray3[loweredIndex8];
                    var loadBalancingRuleInstance = {};
                    propertiesInstance.loadBalancingRules.push(loadBalancingRuleInstance);
                    
                    var propertiesValue4 = loadBalancingRulesValue3['properties'];
                    if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                      var propertiesInstance4 = { frontendIPConfigurations: [] };
                      loadBalancingRuleInstance.properties = propertiesInstance4;
                      
                      var frontendIPConfigurationsArray2 = propertiesValue4['frontendIPConfigurations'];
                      if (frontendIPConfigurationsArray2 !== null && frontendIPConfigurationsArray2 !== undefined) {
                        for (var loweredIndex9 = 0; loweredIndex9 < frontendIPConfigurationsArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                          var frontendIPConfigurationsValue2 = frontendIPConfigurationsArray2[loweredIndex9];
                          var resourceIdInstance5 = {};
                          propertiesInstance4.frontendIPConfigurations.push(resourceIdInstance5);
                          
                          var idValue9 = frontendIPConfigurationsValue2['id'];
                          if (idValue9 !== null && idValue9 !== undefined) {
                            var idInstance9 = idValue9;
                            resourceIdInstance5.id = idInstance9;
                          }
                        }
                      }
                      
                      var backendAddressPoolValue = propertiesValue4['backendAddressPool'];
                      if (backendAddressPoolValue !== null && backendAddressPoolValue !== undefined) {
                        var backendAddressPoolInstance2 = {};
                        propertiesInstance4.backendAddressPool = backendAddressPoolInstance2;
                        
                        var idValue10 = backendAddressPoolValue['id'];
                        if (idValue10 !== null && idValue10 !== undefined) {
                          var idInstance10 = idValue10;
                          backendAddressPoolInstance2.id = idInstance10;
                        }
                      }
                      
                      var probeValue = propertiesValue4['probe'];
                      if (probeValue !== null && probeValue !== undefined) {
                        var probeInstance = {};
                        propertiesInstance4.probe = probeInstance;
                        
                        var idValue11 = probeValue['id'];
                        if (idValue11 !== null && idValue11 !== undefined) {
                          var idInstance11 = idValue11;
                          probeInstance.id = idInstance11;
                        }
                      }
                      
                      var protocolValue = propertiesValue4['protocol'];
                      if (protocolValue !== null && protocolValue !== undefined) {
                        var protocolInstance = protocolValue;
                        propertiesInstance4.protocol = protocolInstance;
                      }
                      
                      var loadDistributionValue = propertiesValue4['loadDistribution'];
                      if (loadDistributionValue !== null && loadDistributionValue !== undefined) {
                        var loadDistributionInstance = loadDistributionValue;
                        propertiesInstance4.loadDistribution = loadDistributionInstance;
                      }
                      
                      var frontendPortValue = propertiesValue4['frontendPort'];
                      if (frontendPortValue !== null && frontendPortValue !== undefined) {
                        var frontendPortInstance = frontendPortValue;
                        propertiesInstance4.frontendPort = frontendPortInstance;
                      }
                      
                      var backendPortValue = propertiesValue4['backendPort'];
                      if (backendPortValue !== null && backendPortValue !== undefined) {
                        var backendPortInstance = backendPortValue;
                        propertiesInstance4.backendPort = backendPortInstance;
                      }
                      
                      var idleTimeoutInMinutesValue = propertiesValue4['idleTimeoutInMinutes'];
                      if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
                        var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
                        propertiesInstance4.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                      }
                      
                      var enableFloatingIPValue = propertiesValue4['enableFloatingIP'];
                      if (enableFloatingIPValue !== null && enableFloatingIPValue !== undefined) {
                        var enableFloatingIPInstance = enableFloatingIPValue;
                        propertiesInstance4.enableFloatingIP = enableFloatingIPInstance;
                      }
                      
                      var provisioningStateValue3 = propertiesValue4['provisioningState'];
                      if (provisioningStateValue3 !== null && provisioningStateValue3 !== undefined) {
                        var provisioningStateInstance3 = provisioningStateValue3;
                        propertiesInstance4.provisioningState = provisioningStateInstance3;
                      }
                    }
                    
                    var nameValue3 = loadBalancingRulesValue3['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      loadBalancingRuleInstance.name = nameInstance3;
                    }
                    
                    var etagValue3 = loadBalancingRulesValue3['etag'];
                    if (etagValue3 !== null && etagValue3 !== undefined) {
                      var etagInstance3 = etagValue3;
                      loadBalancingRuleInstance.etag = etagInstance3;
                    }
                    
                    var idValue12 = loadBalancingRulesValue3['id'];
                    if (idValue12 !== null && idValue12 !== undefined) {
                      var idInstance12 = idValue12;
                      loadBalancingRuleInstance.id = idInstance12;
                    }
                  }
                }
                
                var probesArray = propertiesValue['probes'];
                if (probesArray !== null && probesArray !== undefined) {
                  for (var loweredIndex10 = 0; loweredIndex10 < probesArray.length; loweredIndex10 = loweredIndex10 + 1) {
                    var probesValue = probesArray[loweredIndex10];
                    var probeInstance2 = {};
                    propertiesInstance.probes.push(probeInstance2);
                    
                    var propertiesValue5 = probesValue['properties'];
                    if (propertiesValue5 !== null && propertiesValue5 !== undefined) {
                      var propertiesInstance5 = { loadBalancingRules: [] };
                      probeInstance2.properties = propertiesInstance5;
                      
                      var loadBalancingRulesArray4 = propertiesValue5['loadBalancingRules'];
                      if (loadBalancingRulesArray4 !== null && loadBalancingRulesArray4 !== undefined) {
                        for (var loweredIndex11 = 0; loweredIndex11 < loadBalancingRulesArray4.length; loweredIndex11 = loweredIndex11 + 1) {
                          var loadBalancingRulesValue4 = loadBalancingRulesArray4[loweredIndex11];
                          var resourceIdInstance6 = {};
                          propertiesInstance5.loadBalancingRules.push(resourceIdInstance6);
                          
                          var idValue13 = loadBalancingRulesValue4['id'];
                          if (idValue13 !== null && idValue13 !== undefined) {
                            var idInstance13 = idValue13;
                            resourceIdInstance6.id = idInstance13;
                          }
                        }
                      }
                      
                      var protocolValue2 = propertiesValue5['protocol'];
                      if (protocolValue2 !== null && protocolValue2 !== undefined) {
                        var protocolInstance2 = protocolValue2;
                        propertiesInstance5.protocol = protocolInstance2;
                      }
                      
                      var portValue = propertiesValue5['port'];
                      if (portValue !== null && portValue !== undefined) {
                        var portInstance = portValue;
                        propertiesInstance5.port = portInstance;
                      }
                      
                      var intervalInSecondsValue = propertiesValue5['intervalInSeconds'];
                      if (intervalInSecondsValue !== null && intervalInSecondsValue !== undefined) {
                        var intervalInSecondsInstance = intervalInSecondsValue;
                        propertiesInstance5.intervalInSeconds = intervalInSecondsInstance;
                      }
                      
                      var numberOfProbesValue = propertiesValue5['numberOfProbes'];
                      if (numberOfProbesValue !== null && numberOfProbesValue !== undefined) {
                        var numberOfProbesInstance = numberOfProbesValue;
                        propertiesInstance5.numberOfProbes = numberOfProbesInstance;
                      }
                      
                      var requestPathValue = propertiesValue5['requestPath'];
                      if (requestPathValue !== null && requestPathValue !== undefined) {
                        var requestPathInstance = requestPathValue;
                        propertiesInstance5.requestPath = requestPathInstance;
                      }
                      
                      var provisioningStateValue4 = propertiesValue5['provisioningState'];
                      if (provisioningStateValue4 !== null && provisioningStateValue4 !== undefined) {
                        var provisioningStateInstance4 = provisioningStateValue4;
                        propertiesInstance5.provisioningState = provisioningStateInstance4;
                      }
                    }
                    
                    var nameValue4 = probesValue['name'];
                    if (nameValue4 !== null && nameValue4 !== undefined) {
                      var nameInstance4 = nameValue4;
                      probeInstance2.name = nameInstance4;
                    }
                    
                    var etagValue4 = probesValue['etag'];
                    if (etagValue4 !== null && etagValue4 !== undefined) {
                      var etagInstance4 = etagValue4;
                      probeInstance2.etag = etagInstance4;
                    }
                    
                    var idValue14 = probesValue['id'];
                    if (idValue14 !== null && idValue14 !== undefined) {
                      var idInstance14 = idValue14;
                      probeInstance2.id = idInstance14;
                    }
                  }
                }
                
                var inboundNatRulesArray2 = propertiesValue['inboundNatRules'];
                if (inboundNatRulesArray2 !== null && inboundNatRulesArray2 !== undefined) {
                  for (var loweredIndex12 = 0; loweredIndex12 < inboundNatRulesArray2.length; loweredIndex12 = loweredIndex12 + 1) {
                    var inboundNatRulesValue2 = inboundNatRulesArray2[loweredIndex12];
                    var inboundNatRuleInstance = {};
                    propertiesInstance.inboundNatRules.push(inboundNatRuleInstance);
                    
                    var propertiesValue6 = inboundNatRulesValue2['properties'];
                    if (propertiesValue6 !== null && propertiesValue6 !== undefined) {
                      var propertiesInstance6 = { frontendIPConfigurations: [] };
                      inboundNatRuleInstance.properties = propertiesInstance6;
                      
                      var frontendIPConfigurationsArray3 = propertiesValue6['frontendIPConfigurations'];
                      if (frontendIPConfigurationsArray3 !== null && frontendIPConfigurationsArray3 !== undefined) {
                        for (var loweredIndex13 = 0; loweredIndex13 < frontendIPConfigurationsArray3.length; loweredIndex13 = loweredIndex13 + 1) {
                          var frontendIPConfigurationsValue3 = frontendIPConfigurationsArray3[loweredIndex13];
                          var resourceIdInstance7 = {};
                          propertiesInstance6.frontendIPConfigurations.push(resourceIdInstance7);
                          
                          var idValue15 = frontendIPConfigurationsValue3['id'];
                          if (idValue15 !== null && idValue15 !== undefined) {
                            var idInstance15 = idValue15;
                            resourceIdInstance7.id = idInstance15;
                          }
                        }
                      }
                      
                      var backendIPConfigurationValue = propertiesValue6['backendIPConfiguration'];
                      if (backendIPConfigurationValue !== null && backendIPConfigurationValue !== undefined) {
                        var backendIPConfigurationInstance = {};
                        propertiesInstance6.backendIPConfiguration = backendIPConfigurationInstance;
                        
                        var idValue16 = backendIPConfigurationValue['id'];
                        if (idValue16 !== null && idValue16 !== undefined) {
                          var idInstance16 = idValue16;
                          backendIPConfigurationInstance.id = idInstance16;
                        }
                      }
                      
                      var protocolValue3 = propertiesValue6['protocol'];
                      if (protocolValue3 !== null && protocolValue3 !== undefined) {
                        var protocolInstance3 = protocolValue3;
                        propertiesInstance6.protocol = protocolInstance3;
                      }
                      
                      var frontendPortValue2 = propertiesValue6['frontendPort'];
                      if (frontendPortValue2 !== null && frontendPortValue2 !== undefined) {
                        var frontendPortInstance2 = frontendPortValue2;
                        propertiesInstance6.frontendPort = frontendPortInstance2;
                      }
                      
                      var backendPortValue2 = propertiesValue6['backendPort'];
                      if (backendPortValue2 !== null && backendPortValue2 !== undefined) {
                        var backendPortInstance2 = backendPortValue2;
                        propertiesInstance6.backendPort = backendPortInstance2;
                      }
                      
                      var idleTimeoutInMinutesValue2 = propertiesValue6['idleTimeoutInMinutes'];
                      if (idleTimeoutInMinutesValue2 !== null && idleTimeoutInMinutesValue2 !== undefined) {
                        var idleTimeoutInMinutesInstance2 = idleTimeoutInMinutesValue2;
                        propertiesInstance6.idleTimeoutInMinutes = idleTimeoutInMinutesInstance2;
                      }
                      
                      var enableFloatingIPValue2 = propertiesValue6['enableFloatingIP'];
                      if (enableFloatingIPValue2 !== null && enableFloatingIPValue2 !== undefined) {
                        var enableFloatingIPInstance2 = enableFloatingIPValue2;
                        propertiesInstance6.enableFloatingIP = enableFloatingIPInstance2;
                      }
                      
                      var provisioningStateValue5 = propertiesValue6['provisioningState'];
                      if (provisioningStateValue5 !== null && provisioningStateValue5 !== undefined) {
                        var provisioningStateInstance5 = provisioningStateValue5;
                        propertiesInstance6.provisioningState = provisioningStateInstance5;
                      }
                    }
                    
                    var nameValue5 = inboundNatRulesValue2['name'];
                    if (nameValue5 !== null && nameValue5 !== undefined) {
                      var nameInstance5 = nameValue5;
                      inboundNatRuleInstance.name = nameInstance5;
                    }
                    
                    var etagValue5 = inboundNatRulesValue2['etag'];
                    if (etagValue5 !== null && etagValue5 !== undefined) {
                      var etagInstance5 = etagValue5;
                      inboundNatRuleInstance.etag = etagInstance5;
                    }
                    
                    var idValue17 = inboundNatRulesValue2['id'];
                    if (idValue17 !== null && idValue17 !== undefined) {
                      var idInstance17 = idValue17;
                      inboundNatRuleInstance.id = idInstance17;
                    }
                  }
                }
                
                var provisioningStateValue6 = propertiesValue['provisioningState'];
                if (provisioningStateValue6 !== null && provisioningStateValue6 !== undefined) {
                  var provisioningStateInstance6 = provisioningStateValue6;
                  propertiesInstance.provisioningState = provisioningStateInstance6;
                }
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                loadBalancerInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  loadBalancerInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var nameValue6 = valueValue['name'];
              if (nameValue6 !== null && nameValue6 !== undefined) {
                var nameInstance6 = nameValue6;
                loadBalancerInstance.name = nameInstance6;
              }
              
              var etagValue6 = valueValue['etag'];
              if (etagValue6 !== null && etagValue6 !== undefined) {
                var etagInstance6 = etagValue6;
                loadBalancerInstance.etag = etagInstance6;
              }
              
              var idValue18 = valueValue['id'];
              if (idValue18 !== null && idValue18 !== undefined) {
                var idInstance18 = idValue18;
                loadBalancerInstance.id = idInstance18;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return LoadBalancerOperations;
})();

var NetworkInterfaceOperations = ( /** @lends NetworkInterfaceOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * subnets for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [networkInterfaces] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#networkInterfaces}.
   * Initializes a new instance of the NetworkInterfaceOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function NetworkInterfaceOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put NetworkInterface operation creates/updates a networkInterface
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {NetworkInterfaceCreateOrUpdateParameters} parameters Parameters
   * supplied to the create/update NetworkInterface operation
   * 
   * @param {NetworkInterfaceProperties} [parameters.properties] Properties of
   * the NetworkInterface
   * 
   * @param {ResourceId} [parameters.properties.virtualMachine] Id of the
   * VirtualMachine
   * 
   * @param {string} [parameters.properties.virtualMachine.id] Id of the
   * resource
   * 
   * @param {string} [parameters.properties.provisioningState] Provisioning
   * state of the NetworkInterface resource Updating/Deleting/Failed/Succeeded
   * 
   * @param {IEnumerable} [parameters.properties.ipConfigurations] List of
   * IPConfigurations of the NetworkInterface
   * 
   * @param {DnsSettings} [parameters.properties.dnsSettings]
   * 
   * @param {IEnumerable} [parameters.properties.dnsSettings.dnsServers] List
   * of DNS servers IP addresses
   * 
   * @param {string} [parameters.properties.macAddress] Read-onlyThe MAC
   * Address of the network interface
   * 
   * @param {string} [parameters.location] The location of the resource
   * 
   * @param {object} [parameters.tags]
   * 
   * @param {string} [parameters.name] Read-OnlyA Name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [parameters.etag] A unique read-only string that changes
   * whenever the resource is updated
   * 
   * @param {string} [parameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, networkInterfaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkInterfaceName === null || networkInterfaceName === undefined) {
      return callback(new Error('networkInterfaceName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/networkInterfaces/';
    url2 = url2 + encodeURIComponent(networkInterfaceName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var networkInterfaceCreateOrUpdateParametersValue = {};
    requestDoc = networkInterfaceCreateOrUpdateParametersValue;
    
    if (parameters.properties !== null && parameters.properties !== undefined) {
      var propertiesValue = {};
      networkInterfaceCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.properties.virtualMachine !== null && parameters.properties.virtualMachine !== undefined) {
        var virtualMachineValue = {};
        propertiesValue['virtualMachine'] = virtualMachineValue;
        
        if (parameters.properties.virtualMachine.id !== null && parameters.properties.virtualMachine.id !== undefined) {
          virtualMachineValue['id'] = parameters.properties.virtualMachine.id;
        }
      }
      
      if (parameters.properties.provisioningState !== null && parameters.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = parameters.properties.provisioningState;
      }
      
      if (parameters.properties.ipConfigurations !== null && parameters.properties.ipConfigurations !== undefined) {
        var ipConfigurationsArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.properties.ipConfigurations.length; loweredIndex1 = loweredIndex1 + 1) {
          var ipConfigurationsItem = parameters.properties.ipConfigurations[loweredIndex1];
          var networkInterfaceIpConfigurationValue = {};
          ipConfigurationsArray.push(networkInterfaceIpConfigurationValue);
          
          if (ipConfigurationsItem.properties !== null && ipConfigurationsItem.properties !== undefined) {
            var propertiesValue2 = {};
            networkInterfaceIpConfigurationValue['properties'] = propertiesValue2;
            
            if (ipConfigurationsItem.properties.privateIpAddress !== null && ipConfigurationsItem.properties.privateIpAddress !== undefined) {
              propertiesValue2['privateIPAddress'] = ipConfigurationsItem.properties.privateIpAddress;
            }
            
            if (ipConfigurationsItem.properties.privateIpAllocationMethod !== null && ipConfigurationsItem.properties.privateIpAllocationMethod !== undefined) {
              propertiesValue2['privateIPAllocationMethod'] = ipConfigurationsItem.properties.privateIpAllocationMethod;
            }
            
            if (ipConfigurationsItem.properties.subnet !== null && ipConfigurationsItem.properties.subnet !== undefined) {
              var subnetValue = {};
              propertiesValue2['subnet'] = subnetValue;
              
              if (ipConfigurationsItem.properties.subnet.id !== null && ipConfigurationsItem.properties.subnet.id !== undefined) {
                subnetValue['id'] = ipConfigurationsItem.properties.subnet.id;
              }
            }
            
            if (ipConfigurationsItem.properties.publicIpAddress !== null && ipConfigurationsItem.properties.publicIpAddress !== undefined) {
              var publicIPAddressValue = {};
              propertiesValue2['publicIPAddress'] = publicIPAddressValue;
              
              if (ipConfigurationsItem.properties.publicIpAddress.id !== null && ipConfigurationsItem.properties.publicIpAddress.id !== undefined) {
                publicIPAddressValue['id'] = ipConfigurationsItem.properties.publicIpAddress.id;
              }
            }
            
            if (ipConfigurationsItem.properties.accessControlList !== null && ipConfigurationsItem.properties.accessControlList !== undefined) {
              var accessControlListValue = {};
              propertiesValue2['accessControlList'] = accessControlListValue;
              
              if (ipConfigurationsItem.properties.accessControlList.id !== null && ipConfigurationsItem.properties.accessControlList.id !== undefined) {
                accessControlListValue['id'] = ipConfigurationsItem.properties.accessControlList.id;
              }
            }
            
            if (ipConfigurationsItem.properties.loadBalancerBackendAddressPool !== null && ipConfigurationsItem.properties.loadBalancerBackendAddressPool !== undefined) {
              var loadBalancerBackendAddressPoolValue = {};
              propertiesValue2['loadBalancerBackendAddressPool'] = loadBalancerBackendAddressPoolValue;
              
              if (ipConfigurationsItem.properties.loadBalancerBackendAddressPool.id !== null && ipConfigurationsItem.properties.loadBalancerBackendAddressPool.id !== undefined) {
                loadBalancerBackendAddressPoolValue['id'] = ipConfigurationsItem.properties.loadBalancerBackendAddressPool.id;
              }
            }
            
            if (ipConfigurationsItem.properties.loadBalancerInboundNatRules !== null && ipConfigurationsItem.properties.loadBalancerInboundNatRules !== undefined) {
              var loadBalancerInboundNatRulesArray = [];
              for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsItem.properties.loadBalancerInboundNatRules.length; loweredIndex2 = loweredIndex2 + 1) {
                var loadBalancerInboundNatRulesItem = ipConfigurationsItem.properties.loadBalancerInboundNatRules[loweredIndex2];
                var resourceIdValue = {};
                loadBalancerInboundNatRulesArray.push(resourceIdValue);
                
                if (loadBalancerInboundNatRulesItem.id !== null && loadBalancerInboundNatRulesItem.id !== undefined) {
                  resourceIdValue['id'] = loadBalancerInboundNatRulesItem.id;
                }
              }
              propertiesValue2['loadBalancerInboundNatRules'] = loadBalancerInboundNatRulesArray;
            }
            
            if (ipConfigurationsItem.properties.provisioningState !== null && ipConfigurationsItem.properties.provisioningState !== undefined) {
              propertiesValue2['provisioningState'] = ipConfigurationsItem.properties.provisioningState;
            }
          }
          
          if (ipConfigurationsItem.name !== null && ipConfigurationsItem.name !== undefined) {
            networkInterfaceIpConfigurationValue['name'] = ipConfigurationsItem.name;
          }
          
          if (ipConfigurationsItem.etag !== null && ipConfigurationsItem.etag !== undefined) {
            networkInterfaceIpConfigurationValue['etag'] = ipConfigurationsItem.etag;
          }
          
          if (ipConfigurationsItem.id !== null && ipConfigurationsItem.id !== undefined) {
            networkInterfaceIpConfigurationValue['id'] = ipConfigurationsItem.id;
          }
        }
        propertiesValue['ipConfigurations'] = ipConfigurationsArray;
      }
      
      if (parameters.properties.dnsSettings !== null && parameters.properties.dnsSettings !== undefined) {
        var dnsSettingsValue = {};
        propertiesValue['dnsSettings'] = dnsSettingsValue;
        
        if (parameters.properties.dnsSettings.dnsServers !== null && parameters.properties.dnsSettings.dnsServers !== undefined) {
          var dnsServersArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < parameters.properties.dnsSettings.dnsServers.length; loweredIndex3 = loweredIndex3 + 1) {
            var dnsServersItem = parameters.properties.dnsSettings.dnsServers[loweredIndex3];
            dnsServersArray.push(dnsServersItem);
          }
          dnsSettingsValue['dnsServers'] = dnsServersArray;
        }
      }
      
      if (parameters.properties.macAddress !== null && parameters.properties.macAddress !== undefined) {
        propertiesValue['macAddress'] = parameters.properties.macAddress;
      }
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      networkInterfaceCreateOrUpdateParametersValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      networkInterfaceCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      networkInterfaceCreateOrUpdateParametersValue['name'] = parameters.name;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      networkInterfaceCreateOrUpdateParametersValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      networkInterfaceCreateOrUpdateParametersValue['id'] = parameters.id;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var networkInterfaceInstance = { tags: {} };
          result.networkInterface = networkInterfaceInstance;
          
          var propertiesValue3 = responseDoc['properties'];
          if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
            var propertiesInstance = { ipConfigurations: [] };
            networkInterfaceInstance.properties = propertiesInstance;
            
            var virtualMachineValue2 = propertiesValue3['virtualMachine'];
            if (virtualMachineValue2 !== null && virtualMachineValue2 !== undefined) {
              var virtualMachineInstance = {};
              propertiesInstance.virtualMachine = virtualMachineInstance;
              
              var idValue = virtualMachineValue2['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                virtualMachineInstance.id = idInstance;
              }
            }
            
            var provisioningStateValue = propertiesValue3['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var ipConfigurationsArray2 = propertiesValue3['ipConfigurations'];
            if (ipConfigurationsArray2 !== null && ipConfigurationsArray2 !== undefined) {
              for (var loweredIndex4 = 0; loweredIndex4 < ipConfigurationsArray2.length; loweredIndex4 = loweredIndex4 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray2[loweredIndex4];
                var networkInterfaceIpConfigurationInstance = {};
                propertiesInstance.ipConfigurations.push(networkInterfaceIpConfigurationInstance);
                
                var propertiesValue4 = ipConfigurationsValue['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var propertiesInstance2 = { loadBalancerInboundNatRules: [] };
                  networkInterfaceIpConfigurationInstance.properties = propertiesInstance2;
                  
                  var privateIPAddressValue = propertiesValue4['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    propertiesInstance2.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue4['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    propertiesInstance2.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue2 = propertiesValue4['subnet'];
                  if (subnetValue2 !== null && subnetValue2 !== undefined) {
                    var subnetInstance = {};
                    propertiesInstance2.subnet = subnetInstance;
                    
                    var idValue2 = subnetValue2['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      subnetInstance.id = idInstance2;
                    }
                  }
                  
                  var publicIPAddressValue2 = propertiesValue4['publicIPAddress'];
                  if (publicIPAddressValue2 !== null && publicIPAddressValue2 !== undefined) {
                    var publicIPAddressInstance = {};
                    propertiesInstance2.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue3 = publicIPAddressValue2['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      publicIPAddressInstance.id = idInstance3;
                    }
                  }
                  
                  var accessControlListValue2 = propertiesValue4['accessControlList'];
                  if (accessControlListValue2 !== null && accessControlListValue2 !== undefined) {
                    var accessControlListInstance = {};
                    propertiesInstance2.accessControlList = accessControlListInstance;
                    
                    var idValue4 = accessControlListValue2['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      accessControlListInstance.id = idInstance4;
                    }
                  }
                  
                  var loadBalancerBackendAddressPoolValue2 = propertiesValue4['loadBalancerBackendAddressPool'];
                  if (loadBalancerBackendAddressPoolValue2 !== null && loadBalancerBackendAddressPoolValue2 !== undefined) {
                    var loadBalancerBackendAddressPoolInstance = {};
                    propertiesInstance2.loadBalancerBackendAddressPool = loadBalancerBackendAddressPoolInstance;
                    
                    var idValue5 = loadBalancerBackendAddressPoolValue2['id'];
                    if (idValue5 !== null && idValue5 !== undefined) {
                      var idInstance5 = idValue5;
                      loadBalancerBackendAddressPoolInstance.id = idInstance5;
                    }
                  }
                  
                  var loadBalancerInboundNatRulesArray2 = propertiesValue4['loadBalancerInboundNatRules'];
                  if (loadBalancerInboundNatRulesArray2 !== null && loadBalancerInboundNatRulesArray2 !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < loadBalancerInboundNatRulesArray2.length; loweredIndex5 = loweredIndex5 + 1) {
                      var loadBalancerInboundNatRulesValue = loadBalancerInboundNatRulesArray2[loweredIndex5];
                      var resourceIdInstance = {};
                      propertiesInstance2.loadBalancerInboundNatRules.push(resourceIdInstance);
                      
                      var idValue6 = loadBalancerInboundNatRulesValue['id'];
                      if (idValue6 !== null && idValue6 !== undefined) {
                        var idInstance6 = idValue6;
                        resourceIdInstance.id = idInstance6;
                      }
                    }
                  }
                  
                  var provisioningStateValue2 = propertiesValue4['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    propertiesInstance2.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue = ipConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  networkInterfaceIpConfigurationInstance.name = nameInstance;
                }
                
                var etagValue = ipConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  networkInterfaceIpConfigurationInstance.etag = etagInstance;
                }
                
                var idValue7 = ipConfigurationsValue['id'];
                if (idValue7 !== null && idValue7 !== undefined) {
                  var idInstance7 = idValue7;
                  networkInterfaceIpConfigurationInstance.id = idInstance7;
                }
              }
            }
            
            var dnsSettingsValue2 = propertiesValue3['dnsSettings'];
            if (dnsSettingsValue2 !== null && dnsSettingsValue2 !== undefined) {
              var dnsSettingsInstance = { dnsServers: [] };
              propertiesInstance.dnsSettings = dnsSettingsInstance;
              
              var dnsServersArray2 = dnsSettingsValue2['dnsServers'];
              if (dnsServersArray2 !== null && dnsServersArray2 !== undefined) {
                for (var loweredIndex6 = 0; loweredIndex6 < dnsServersArray2.length; loweredIndex6 = loweredIndex6 + 1) {
                  var dnsServersValue = dnsServersArray2[loweredIndex6];
                  dnsSettingsInstance.dnsServers.push(dnsServersValue);
                }
              }
            }
            
            var macAddressValue = propertiesValue3['macAddress'];
            if (macAddressValue !== null && macAddressValue !== undefined) {
              var macAddressInstance = macAddressValue;
              propertiesInstance.macAddress = macAddressInstance;
            }
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            networkInterfaceInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              networkInterfaceInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            networkInterfaceInstance.name = nameInstance2;
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            networkInterfaceInstance.etag = etagInstance2;
          }
          
          var idValue8 = responseDoc['id'];
          if (idValue8 !== null && idValue8 !== undefined) {
            var idInstance8 = idValue8;
            networkInterfaceInstance.id = idInstance8;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex7 = 0; loweredIndex7 < detailsArray.length; loweredIndex7 = loweredIndex7 + 1) {
                var detailsValue = detailsArray[loweredIndex7];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete netwokInterface operation deletes the specified netwokInterface.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.beginDeleting = function(resourceGroupName, networkInterfaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkInterfaceName === null || networkInterfaceName === undefined) {
      return callback(new Error('networkInterfaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/networkInterfaces/';
    url2 = url2 + encodeURIComponent(networkInterfaceName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put NetworkInterface operation creates/updates a networkInterface
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {NetworkInterfaceCreateOrUpdateParameters} parameters Parameters
   * supplied to the create/update NetworkInterface operation
   * 
   * @param {NetworkInterfaceProperties} [parameters.properties] Properties of
   * the NetworkInterface
   * 
   * @param {ResourceId} [parameters.properties.virtualMachine] Id of the
   * VirtualMachine
   * 
   * @param {string} [parameters.properties.virtualMachine.id] Id of the
   * resource
   * 
   * @param {string} [parameters.properties.provisioningState] Provisioning
   * state of the NetworkInterface resource Updating/Deleting/Failed/Succeeded
   * 
   * @param {IEnumerable} [parameters.properties.ipConfigurations] List of
   * IPConfigurations of the NetworkInterface
   * 
   * @param {DnsSettings} [parameters.properties.dnsSettings]
   * 
   * @param {IEnumerable} [parameters.properties.dnsSettings.dnsServers] List
   * of DNS servers IP addresses
   * 
   * @param {string} [parameters.properties.macAddress] Read-onlyThe MAC
   * Address of the network interface
   * 
   * @param {string} [parameters.location] The location of the resource
   * 
   * @param {object} [parameters.tags]
   * 
   * @param {string} [parameters.name] Read-OnlyA Name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [parameters.etag] A unique read-only string that changes
   * whenever the resource is updated
   * 
   * @param {string} [parameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.createOrUpdate = function(resourceGroupName, networkInterfaceName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.networkInterfaces.beginCreateOrUpdating(resourceGroupName, networkInterfaceName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.deleteMethod = function(resourceGroupName, networkInterfaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.networkInterfaces.beginDeleting(resourceGroupName, networkInterfaceName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get ntework interface operation retreives information about the
   * specified network interface.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} networkInterfaceName The name of the network interface.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.get = function(resourceGroupName, networkInterfaceName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (networkInterfaceName === null || networkInterfaceName === undefined) {
      return callback(new Error('networkInterfaceName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/networkInterfaces/';
    url2 = url2 + encodeURIComponent(networkInterfaceName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var networkInterfaceInstance = { tags: {} };
          result.networkInterface = networkInterfaceInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { ipConfigurations: [] };
            networkInterfaceInstance.properties = propertiesInstance;
            
            var virtualMachineValue = propertiesValue['virtualMachine'];
            if (virtualMachineValue !== null && virtualMachineValue !== undefined) {
              var virtualMachineInstance = {};
              propertiesInstance.virtualMachine = virtualMachineInstance;
              
              var idValue = virtualMachineValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                virtualMachineInstance.id = idInstance;
              }
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var ipConfigurationsArray = propertiesValue['ipConfigurations'];
            if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < ipConfigurationsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray[loweredIndex1];
                var networkInterfaceIpConfigurationInstance = {};
                propertiesInstance.ipConfigurations.push(networkInterfaceIpConfigurationInstance);
                
                var propertiesValue2 = ipConfigurationsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var propertiesInstance2 = { loadBalancerInboundNatRules: [] };
                  networkInterfaceIpConfigurationInstance.properties = propertiesInstance2;
                  
                  var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                  if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                    var privateIPAddressInstance = privateIPAddressValue;
                    propertiesInstance2.privateIpAddress = privateIPAddressInstance;
                  }
                  
                  var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                  if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                    var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                    propertiesInstance2.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                  }
                  
                  var subnetValue = propertiesValue2['subnet'];
                  if (subnetValue !== null && subnetValue !== undefined) {
                    var subnetInstance = {};
                    propertiesInstance2.subnet = subnetInstance;
                    
                    var idValue2 = subnetValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      subnetInstance.id = idInstance2;
                    }
                  }
                  
                  var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                  if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                    var publicIPAddressInstance = {};
                    propertiesInstance2.publicIpAddress = publicIPAddressInstance;
                    
                    var idValue3 = publicIPAddressValue['id'];
                    if (idValue3 !== null && idValue3 !== undefined) {
                      var idInstance3 = idValue3;
                      publicIPAddressInstance.id = idInstance3;
                    }
                  }
                  
                  var accessControlListValue = propertiesValue2['accessControlList'];
                  if (accessControlListValue !== null && accessControlListValue !== undefined) {
                    var accessControlListInstance = {};
                    propertiesInstance2.accessControlList = accessControlListInstance;
                    
                    var idValue4 = accessControlListValue['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      accessControlListInstance.id = idInstance4;
                    }
                  }
                  
                  var loadBalancerBackendAddressPoolValue = propertiesValue2['loadBalancerBackendAddressPool'];
                  if (loadBalancerBackendAddressPoolValue !== null && loadBalancerBackendAddressPoolValue !== undefined) {
                    var loadBalancerBackendAddressPoolInstance = {};
                    propertiesInstance2.loadBalancerBackendAddressPool = loadBalancerBackendAddressPoolInstance;
                    
                    var idValue5 = loadBalancerBackendAddressPoolValue['id'];
                    if (idValue5 !== null && idValue5 !== undefined) {
                      var idInstance5 = idValue5;
                      loadBalancerBackendAddressPoolInstance.id = idInstance5;
                    }
                  }
                  
                  var loadBalancerInboundNatRulesArray = propertiesValue2['loadBalancerInboundNatRules'];
                  if (loadBalancerInboundNatRulesArray !== null && loadBalancerInboundNatRulesArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < loadBalancerInboundNatRulesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var loadBalancerInboundNatRulesValue = loadBalancerInboundNatRulesArray[loweredIndex2];
                      var resourceIdInstance = {};
                      propertiesInstance2.loadBalancerInboundNatRules.push(resourceIdInstance);
                      
                      var idValue6 = loadBalancerInboundNatRulesValue['id'];
                      if (idValue6 !== null && idValue6 !== undefined) {
                        var idInstance6 = idValue6;
                        resourceIdInstance.id = idInstance6;
                      }
                    }
                  }
                  
                  var provisioningStateValue2 = propertiesValue2['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    propertiesInstance2.provisioningState = provisioningStateInstance2;
                  }
                }
                
                var nameValue = ipConfigurationsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  networkInterfaceIpConfigurationInstance.name = nameInstance;
                }
                
                var etagValue = ipConfigurationsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  networkInterfaceIpConfigurationInstance.etag = etagInstance;
                }
                
                var idValue7 = ipConfigurationsValue['id'];
                if (idValue7 !== null && idValue7 !== undefined) {
                  var idInstance7 = idValue7;
                  networkInterfaceIpConfigurationInstance.id = idInstance7;
                }
              }
            }
            
            var dnsSettingsValue = propertiesValue['dnsSettings'];
            if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
              var dnsSettingsInstance = { dnsServers: [] };
              propertiesInstance.dnsSettings = dnsSettingsInstance;
              
              var dnsServersArray = dnsSettingsValue['dnsServers'];
              if (dnsServersArray !== null && dnsServersArray !== undefined) {
                for (var loweredIndex3 = 0; loweredIndex3 < dnsServersArray.length; loweredIndex3 = loweredIndex3 + 1) {
                  var dnsServersValue = dnsServersArray[loweredIndex3];
                  dnsSettingsInstance.dnsServers.push(dnsServersValue);
                }
              }
            }
            
            var macAddressValue = propertiesValue['macAddress'];
            if (macAddressValue !== null && macAddressValue !== undefined) {
              var macAddressInstance = macAddressValue;
              propertiesInstance.macAddress = macAddressInstance;
            }
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            networkInterfaceInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              networkInterfaceInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            networkInterfaceInstance.name = nameInstance2;
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            networkInterfaceInstance.etag = etagInstance2;
          }
          
          var idValue8 = responseDoc['id'];
          if (idValue8 !== null && idValue8 !== undefined) {
            var idInstance8 = idValue8;
            networkInterfaceInstance.id = idInstance8;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List networkInterfaces opertion retrieves all the networkInterfaces in
   * a resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  NetworkInterfaceOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/networkInterfaces';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { networkInterfaces: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var networkInterfaceInstance = { tags: {} };
              result.networkInterfaces.push(networkInterfaceInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { ipConfigurations: [] };
                networkInterfaceInstance.properties = propertiesInstance;
                
                var virtualMachineValue = propertiesValue['virtualMachine'];
                if (virtualMachineValue !== null && virtualMachineValue !== undefined) {
                  var virtualMachineInstance = {};
                  propertiesInstance.virtualMachine = virtualMachineInstance;
                  
                  var idValue = virtualMachineValue['id'];
                  if (idValue !== null && idValue !== undefined) {
                    var idInstance = idValue;
                    virtualMachineInstance.id = idInstance;
                  }
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var ipConfigurationsArray = propertiesValue['ipConfigurations'];
                if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var ipConfigurationsValue = ipConfigurationsArray[loweredIndex2];
                    var networkInterfaceIpConfigurationInstance = {};
                    propertiesInstance.ipConfigurations.push(networkInterfaceIpConfigurationInstance);
                    
                    var propertiesValue2 = ipConfigurationsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var propertiesInstance2 = { loadBalancerInboundNatRules: [] };
                      networkInterfaceIpConfigurationInstance.properties = propertiesInstance2;
                      
                      var privateIPAddressValue = propertiesValue2['privateIPAddress'];
                      if (privateIPAddressValue !== null && privateIPAddressValue !== undefined) {
                        var privateIPAddressInstance = privateIPAddressValue;
                        propertiesInstance2.privateIpAddress = privateIPAddressInstance;
                      }
                      
                      var privateIPAllocationMethodValue = propertiesValue2['privateIPAllocationMethod'];
                      if (privateIPAllocationMethodValue !== null && privateIPAllocationMethodValue !== undefined) {
                        var privateIPAllocationMethodInstance = privateIPAllocationMethodValue;
                        propertiesInstance2.privateIpAllocationMethod = privateIPAllocationMethodInstance;
                      }
                      
                      var subnetValue = propertiesValue2['subnet'];
                      if (subnetValue !== null && subnetValue !== undefined) {
                        var subnetInstance = {};
                        propertiesInstance2.subnet = subnetInstance;
                        
                        var idValue2 = subnetValue['id'];
                        if (idValue2 !== null && idValue2 !== undefined) {
                          var idInstance2 = idValue2;
                          subnetInstance.id = idInstance2;
                        }
                      }
                      
                      var publicIPAddressValue = propertiesValue2['publicIPAddress'];
                      if (publicIPAddressValue !== null && publicIPAddressValue !== undefined) {
                        var publicIPAddressInstance = {};
                        propertiesInstance2.publicIpAddress = publicIPAddressInstance;
                        
                        var idValue3 = publicIPAddressValue['id'];
                        if (idValue3 !== null && idValue3 !== undefined) {
                          var idInstance3 = idValue3;
                          publicIPAddressInstance.id = idInstance3;
                        }
                      }
                      
                      var accessControlListValue = propertiesValue2['accessControlList'];
                      if (accessControlListValue !== null && accessControlListValue !== undefined) {
                        var accessControlListInstance = {};
                        propertiesInstance2.accessControlList = accessControlListInstance;
                        
                        var idValue4 = accessControlListValue['id'];
                        if (idValue4 !== null && idValue4 !== undefined) {
                          var idInstance4 = idValue4;
                          accessControlListInstance.id = idInstance4;
                        }
                      }
                      
                      var loadBalancerBackendAddressPoolValue = propertiesValue2['loadBalancerBackendAddressPool'];
                      if (loadBalancerBackendAddressPoolValue !== null && loadBalancerBackendAddressPoolValue !== undefined) {
                        var loadBalancerBackendAddressPoolInstance = {};
                        propertiesInstance2.loadBalancerBackendAddressPool = loadBalancerBackendAddressPoolInstance;
                        
                        var idValue5 = loadBalancerBackendAddressPoolValue['id'];
                        if (idValue5 !== null && idValue5 !== undefined) {
                          var idInstance5 = idValue5;
                          loadBalancerBackendAddressPoolInstance.id = idInstance5;
                        }
                      }
                      
                      var loadBalancerInboundNatRulesArray = propertiesValue2['loadBalancerInboundNatRules'];
                      if (loadBalancerInboundNatRulesArray !== null && loadBalancerInboundNatRulesArray !== undefined) {
                        for (var loweredIndex3 = 0; loweredIndex3 < loadBalancerInboundNatRulesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                          var loadBalancerInboundNatRulesValue = loadBalancerInboundNatRulesArray[loweredIndex3];
                          var resourceIdInstance = {};
                          propertiesInstance2.loadBalancerInboundNatRules.push(resourceIdInstance);
                          
                          var idValue6 = loadBalancerInboundNatRulesValue['id'];
                          if (idValue6 !== null && idValue6 !== undefined) {
                            var idInstance6 = idValue6;
                            resourceIdInstance.id = idInstance6;
                          }
                        }
                      }
                      
                      var provisioningStateValue2 = propertiesValue2['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        propertiesInstance2.provisioningState = provisioningStateInstance2;
                      }
                    }
                    
                    var nameValue = ipConfigurationsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      networkInterfaceIpConfigurationInstance.name = nameInstance;
                    }
                    
                    var etagValue = ipConfigurationsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      networkInterfaceIpConfigurationInstance.etag = etagInstance;
                    }
                    
                    var idValue7 = ipConfigurationsValue['id'];
                    if (idValue7 !== null && idValue7 !== undefined) {
                      var idInstance7 = idValue7;
                      networkInterfaceIpConfigurationInstance.id = idInstance7;
                    }
                  }
                }
                
                var dnsSettingsValue = propertiesValue['dnsSettings'];
                if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
                  var dnsSettingsInstance = { dnsServers: [] };
                  propertiesInstance.dnsSettings = dnsSettingsInstance;
                  
                  var dnsServersArray = dnsSettingsValue['dnsServers'];
                  if (dnsServersArray !== null && dnsServersArray !== undefined) {
                    for (var loweredIndex4 = 0; loweredIndex4 < dnsServersArray.length; loweredIndex4 = loweredIndex4 + 1) {
                      var dnsServersValue = dnsServersArray[loweredIndex4];
                      dnsSettingsInstance.dnsServers.push(dnsServersValue);
                    }
                  }
                }
                
                var macAddressValue = propertiesValue['macAddress'];
                if (macAddressValue !== null && macAddressValue !== undefined) {
                  var macAddressInstance = macAddressValue;
                  propertiesInstance.macAddress = macAddressInstance;
                }
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                networkInterfaceInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  networkInterfaceInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                networkInterfaceInstance.name = nameInstance2;
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                networkInterfaceInstance.etag = etagInstance2;
              }
              
              var idValue8 = valueValue['id'];
              if (idValue8 !== null && idValue8 !== undefined) {
                var idInstance8 = idValue8;
                networkInterfaceInstance.id = idInstance8;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return NetworkInterfaceOperations;
})();

var PublicIpAddressOperations = ( /** @lends PublicIpAddressOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * PublicIPAddress for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [publicIpAddresses] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#publicIpAddresses}.
   * Initializes a new instance of the PublicIpAddressOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function PublicIpAddressOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put PublicIPAddress operation creates/updates a stable/dynamic
   * PublicIP address
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} publicIpAddressName The name of the publicIpAddress.
   * 
   * @param {PublicIpAddressCreateOrUpdateParameters} parameters Parameters
   * supplied to the create/update PublicIPAddress operation
   * 
   * @param {PublicIpAddressProperties} [parameters.properties] Properties of
   * the PublicIpAddress resource
   * 
   * @param {string} [parameters.properties.publicIpAllocationMethod] PublicIP
   * allocation method (Static/Dynamic)
   * 
   * @param {ResourceId} [parameters.properties.ipConfiguration] a read-only
   * reference to the network interface IP configurations using this public IP
   * address
   * 
   * @param {string} [parameters.properties.ipConfiguration.id] Id of the
   * resource
   * 
   * @param {PublicIpAddressDnsSettings} [parameters.properties.dnsSettings]
   * Contains FQDN of the DNS record associated with the public IP address
   * 
   * @param {string} [parameters.properties.dnsSettings.domainNameLabel]
   * 
   * @param {string} [parameters.properties.dnsSettings.fqdn]
   * 
   * @param {string} [parameters.properties.ipAddress] The assigned public IP
   * address
   * 
   * @param {number} [parameters.properties.idleTimeoutInMinutes] The
   * Idletimout of the public IP address
   * 
   * @param {string} [parameters.properties.provisioningState] Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.location] The location of the resource
   * 
   * @param {object} [parameters.tags]
   * 
   * @param {string} [parameters.name] Read-OnlyA Name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [parameters.etag] A unique read-only string that changes
   * whenever the resource is updated
   * 
   * @param {string} [parameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, publicIpAddressName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (publicIpAddressName === null || publicIpAddressName === undefined) {
      return callback(new Error('publicIpAddressName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties !== null && parameters.properties !== undefined) {
      if (parameters.properties.publicIpAllocationMethod === null || parameters.properties.publicIpAllocationMethod === undefined) {
        return callback(new Error('parameters.properties.publicIpAllocationMethod cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/publicIPAddresses/';
    url2 = url2 + encodeURIComponent(publicIpAddressName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var publicIpAddressCreateOrUpdateParametersValue = {};
    requestDoc = publicIpAddressCreateOrUpdateParametersValue;
    
    if (parameters.properties !== null && parameters.properties !== undefined) {
      var propertiesValue = {};
      publicIpAddressCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      propertiesValue['publicIPAllocationMethod'] = parameters.properties.publicIpAllocationMethod;
      
      if (parameters.properties.ipConfiguration !== null && parameters.properties.ipConfiguration !== undefined) {
        var ipConfigurationValue = {};
        propertiesValue['ipConfiguration'] = ipConfigurationValue;
        
        if (parameters.properties.ipConfiguration.id !== null && parameters.properties.ipConfiguration.id !== undefined) {
          ipConfigurationValue['id'] = parameters.properties.ipConfiguration.id;
        }
      }
      
      if (parameters.properties.dnsSettings !== null && parameters.properties.dnsSettings !== undefined) {
        var dnsSettingsValue = {};
        propertiesValue['dnsSettings'] = dnsSettingsValue;
        
        if (parameters.properties.dnsSettings.domainNameLabel !== null && parameters.properties.dnsSettings.domainNameLabel !== undefined) {
          dnsSettingsValue['domainNameLabel'] = parameters.properties.dnsSettings.domainNameLabel;
        }
        
        if (parameters.properties.dnsSettings.fqdn !== null && parameters.properties.dnsSettings.fqdn !== undefined) {
          dnsSettingsValue['fqdn'] = parameters.properties.dnsSettings.fqdn;
        }
      }
      
      if (parameters.properties.ipAddress !== null && parameters.properties.ipAddress !== undefined) {
        propertiesValue['ipAddress'] = parameters.properties.ipAddress;
      }
      
      if (parameters.properties.idleTimeoutInMinutes !== null && parameters.properties.idleTimeoutInMinutes !== undefined) {
        propertiesValue['idleTimeoutInMinutes'] = parameters.properties.idleTimeoutInMinutes;
      }
      
      if (parameters.properties.provisioningState !== null && parameters.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = parameters.properties.provisioningState;
      }
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      publicIpAddressCreateOrUpdateParametersValue['location'] = parameters.location;
    }

    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      publicIpAddressCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      publicIpAddressCreateOrUpdateParametersValue['name'] = parameters.name;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      publicIpAddressCreateOrUpdateParametersValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      publicIpAddressCreateOrUpdateParametersValue['id'] = parameters.id;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var publicIpAddressInstance = { tags: {} };
          result.publicIpAddress = publicIpAddressInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            publicIpAddressInstance.properties = propertiesInstance;
            
            var publicIPAllocationMethodValue = propertiesValue2['publicIPAllocationMethod'];
            if (publicIPAllocationMethodValue !== null && publicIPAllocationMethodValue !== undefined) {
              var publicIPAllocationMethodInstance = publicIPAllocationMethodValue;
              propertiesInstance.publicIpAllocationMethod = publicIPAllocationMethodInstance;
            }
            
            var ipConfigurationValue2 = propertiesValue2['ipConfiguration'];
            if (ipConfigurationValue2 !== null && ipConfigurationValue2 !== undefined) {
              var ipConfigurationInstance = {};
              propertiesInstance.ipConfiguration = ipConfigurationInstance;
              
              var idValue = ipConfigurationValue2['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                ipConfigurationInstance.id = idInstance;
              }
            }
            
            var dnsSettingsValue2 = propertiesValue2['dnsSettings'];
            if (dnsSettingsValue2 !== null && dnsSettingsValue2 !== undefined) {
              var dnsSettingsInstance = {};
              propertiesInstance.dnsSettings = dnsSettingsInstance;
              
              var domainNameLabelValue = dnsSettingsValue2['domainNameLabel'];
              if (domainNameLabelValue !== null && domainNameLabelValue !== undefined) {
                var domainNameLabelInstance = domainNameLabelValue;
                dnsSettingsInstance.domainNameLabel = domainNameLabelInstance;
              }
              
              var fqdnValue = dnsSettingsValue2['fqdn'];
              if (fqdnValue !== null && fqdnValue !== undefined) {
                var fqdnInstance = fqdnValue;
                dnsSettingsInstance.fqdn = fqdnInstance;
              }
            }
            
            var ipAddressValue = propertiesValue2['ipAddress'];
            if (ipAddressValue !== null && ipAddressValue !== undefined) {
              var ipAddressInstance = ipAddressValue;
              propertiesInstance.ipAddress = ipAddressInstance;
            }
            
            var idleTimeoutInMinutesValue = propertiesValue2['idleTimeoutInMinutes'];
            if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
              var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
              propertiesInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            publicIpAddressInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              publicIpAddressInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            publicIpAddressInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            publicIpAddressInstance.etag = etagInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            publicIpAddressInstance.id = idInstance2;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete publicIpAddress operation deletes the specified publicIpAddress.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} publicIpAddressName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.beginDeleting = function(resourceGroupName, publicIpAddressName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (publicIpAddressName === null || publicIpAddressName === undefined) {
      return callback(new Error('publicIpAddressName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/publicIPAddresses/';
    url2 = url2 + encodeURIComponent(publicIpAddressName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put PublicIPAddress operation creates/updates a stable/dynamic
   * PublicIP address
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} publicIpAddressName The name of the publicIpAddress.
   * 
   * @param {PublicIpAddressCreateOrUpdateParameters} parameters Parameters
   * supplied to the create PublicIPAddress operation
   * 
   * @param {PublicIpAddressProperties} [parameters.properties] Properties of
   * the PublicIpAddress resource
   * 
   * @param {string} [parameters.properties.publicIpAllocationMethod] PublicIP
   * allocation method (Static/Dynamic)
   * 
   * @param {ResourceId} [parameters.properties.ipConfiguration] a read-only
   * reference to the network interface IP configurations using this public IP
   * address
   * 
   * @param {string} [parameters.properties.ipConfiguration.id] Id of the
   * resource
   * 
   * @param {PublicIpAddressDnsSettings} [parameters.properties.dnsSettings]
   * Contains FQDN of the DNS record associated with the public IP address
   * 
   * @param {string} [parameters.properties.dnsSettings.domainNameLabel]
   * 
   * @param {string} [parameters.properties.dnsSettings.fqdn]
   * 
   * @param {string} [parameters.properties.ipAddress] The assigned public IP
   * address
   * 
   * @param {number} [parameters.properties.idleTimeoutInMinutes] The
   * Idletimout of the public IP address
   * 
   * @param {string} [parameters.properties.provisioningState] Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.location] The location of the resource
   * 
   * @param {object} [parameters.tags]
   * 
   * @param {string} [parameters.name] Read-OnlyA Name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [parameters.etag] A unique read-only string that changes
   * whenever the resource is updated
   * 
   * @param {string} [parameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.createOrUpdate = function(resourceGroupName, publicIpAddressName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.publicIpAddresses.beginCreateOrUpdating(resourceGroupName, publicIpAddressName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get Role operation retrieves information about the specified virtual
   * machine.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} publicIpAddressName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.deleteMethod = function(resourceGroupName, publicIpAddressName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.publicIpAddresses.beginDeleting(resourceGroupName, publicIpAddressName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get publicIpAddress operation retreives information about the
   * specified pubicIpAddress
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} publicIpAddressName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.get = function(resourceGroupName, publicIpAddressName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (publicIpAddressName === null || publicIpAddressName === undefined) {
      return callback(new Error('publicIpAddressName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/publicIPAddresses/';
    url2 = url2 + encodeURIComponent(publicIpAddressName);
    url2 = url2 + '/';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var publicIpAddressInstance = { tags: {} };
          result.publicIpAddress = publicIpAddressInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            publicIpAddressInstance.properties = propertiesInstance;
            
            var publicIPAllocationMethodValue = propertiesValue['publicIPAllocationMethod'];
            if (publicIPAllocationMethodValue !== null && publicIPAllocationMethodValue !== undefined) {
              var publicIPAllocationMethodInstance = publicIPAllocationMethodValue;
              propertiesInstance.publicIpAllocationMethod = publicIPAllocationMethodInstance;
            }
            
            var ipConfigurationValue = propertiesValue['ipConfiguration'];
            if (ipConfigurationValue !== null && ipConfigurationValue !== undefined) {
              var ipConfigurationInstance = {};
              propertiesInstance.ipConfiguration = ipConfigurationInstance;
              
              var idValue = ipConfigurationValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                ipConfigurationInstance.id = idInstance;
              }
            }
            
            var dnsSettingsValue = propertiesValue['dnsSettings'];
            if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
              var dnsSettingsInstance = {};
              propertiesInstance.dnsSettings = dnsSettingsInstance;
              
              var domainNameLabelValue = dnsSettingsValue['domainNameLabel'];
              if (domainNameLabelValue !== null && domainNameLabelValue !== undefined) {
                var domainNameLabelInstance = domainNameLabelValue;
                dnsSettingsInstance.domainNameLabel = domainNameLabelInstance;
              }
              
              var fqdnValue = dnsSettingsValue['fqdn'];
              if (fqdnValue !== null && fqdnValue !== undefined) {
                var fqdnInstance = fqdnValue;
                dnsSettingsInstance.fqdn = fqdnInstance;
              }
            }
            
            var ipAddressValue = propertiesValue['ipAddress'];
            if (ipAddressValue !== null && ipAddressValue !== undefined) {
              var ipAddressInstance = ipAddressValue;
              propertiesInstance.ipAddress = ipAddressInstance;
            }
            
            var idleTimeoutInMinutesValue = propertiesValue['idleTimeoutInMinutes'];
            if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
              var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
              propertiesInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            publicIpAddressInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              publicIpAddressInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            publicIpAddressInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            publicIpAddressInstance.etag = etagInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            publicIpAddressInstance.id = idInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List publicIpAddress opertion retrieves all the publicIpAddresses in a
   * resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  PublicIpAddressOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/publicIPAddresses';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { publicIpAddresses: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var publicIpAddressInstance = { tags: {} };
              result.publicIpAddresses.push(publicIpAddressInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                publicIpAddressInstance.properties = propertiesInstance;
                
                var publicIPAllocationMethodValue = propertiesValue['publicIPAllocationMethod'];
                if (publicIPAllocationMethodValue !== null && publicIPAllocationMethodValue !== undefined) {
                  var publicIPAllocationMethodInstance = publicIPAllocationMethodValue;
                  propertiesInstance.publicIpAllocationMethod = publicIPAllocationMethodInstance;
                }
                
                var ipConfigurationValue = propertiesValue['ipConfiguration'];
                if (ipConfigurationValue !== null && ipConfigurationValue !== undefined) {
                  var ipConfigurationInstance = {};
                  propertiesInstance.ipConfiguration = ipConfigurationInstance;
                  
                  var idValue = ipConfigurationValue['id'];
                  if (idValue !== null && idValue !== undefined) {
                    var idInstance = idValue;
                    ipConfigurationInstance.id = idInstance;
                  }
                }
                
                var dnsSettingsValue = propertiesValue['dnsSettings'];
                if (dnsSettingsValue !== null && dnsSettingsValue !== undefined) {
                  var dnsSettingsInstance = {};
                  propertiesInstance.dnsSettings = dnsSettingsInstance;
                  
                  var domainNameLabelValue = dnsSettingsValue['domainNameLabel'];
                  if (domainNameLabelValue !== null && domainNameLabelValue !== undefined) {
                    var domainNameLabelInstance = domainNameLabelValue;
                    dnsSettingsInstance.domainNameLabel = domainNameLabelInstance;
                  }
                  
                  var fqdnValue = dnsSettingsValue['fqdn'];
                  if (fqdnValue !== null && fqdnValue !== undefined) {
                    var fqdnInstance = fqdnValue;
                    dnsSettingsInstance.fqdn = fqdnInstance;
                  }
                }
                
                var ipAddressValue = propertiesValue['ipAddress'];
                if (ipAddressValue !== null && ipAddressValue !== undefined) {
                  var ipAddressInstance = ipAddressValue;
                  propertiesInstance.ipAddress = ipAddressInstance;
                }
                
                var idleTimeoutInMinutesValue = propertiesValue['idleTimeoutInMinutes'];
                if (idleTimeoutInMinutesValue !== null && idleTimeoutInMinutesValue !== undefined) {
                  var idleTimeoutInMinutesInstance = idleTimeoutInMinutesValue;
                  propertiesInstance.idleTimeoutInMinutes = idleTimeoutInMinutesInstance;
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                publicIpAddressInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  publicIpAddressInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                publicIpAddressInstance.name = nameInstance;
              }
              
              var etagValue = valueValue['etag'];
              if (etagValue !== null && etagValue !== undefined) {
                var etagInstance = etagValue;
                publicIpAddressInstance.etag = etagInstance;
              }
              
              var idValue2 = valueValue['id'];
              if (idValue2 !== null && idValue2 !== undefined) {
                var idInstance2 = idValue2;
                publicIpAddressInstance.id = idInstance2;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return PublicIpAddressOperations;
})();

var SubnetOperations = ( /** @lends SubnetOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * subnets for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [subnets] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#subnets}.
   * Initializes a new instance of the SubnetOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function SubnetOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put Subnet operation creates/updates a subnet in thespecified virtual
   * network
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {string} subnetName The name of the subnet.
   * 
   * @param {SubnetCreateOrUpdateParameters} parameters Parameters supplied to
   * the create/update Subnet operation
   * 
   * @param {SubnetProperties} parameters.properties Subnet properties
   * 
   * @param {string} parameters.properties.addressPrefix Address prefix for the
   * subnet.
   * 
   * @param {DhcpOptions} [parameters.properties.dhcpOptions] Standard DHCP
   * option for this subnet. Overrides VNET DHCP options.
   * 
   * @param {IEnumerable} [parameters.properties.dhcpOptions.dnsServers] List
   * of DNS servers IP addresses
   * 
   * @param {IEnumerable} [parameters.properties.ipConfigurations] Read-only
   * array of references to the network interface IP configurations using
   * subnet
   * 
   * @param {string} [parameters.properties.provisioningState] Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.name] Read-OnlyA Name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [parameters.etag] A unique read-only string that changes
   * whenever the resource is updated
   * 
   * @param {string} [parameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, virtualNetworkName, subnetName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (subnetName === null || subnetName === undefined) {
      return callback(new Error('subnetName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties === null || parameters.properties === undefined) {
      return callback(new Error('parameters.properties cannot be null.'));
    }
    if (parameters.properties.addressPrefix === null || parameters.properties.addressPrefix === undefined) {
      return callback(new Error('parameters.properties.addressPrefix cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    url2 = url2 + '/subnets/';
    url2 = url2 + encodeURIComponent(subnetName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var subnetCreateOrUpdateParametersValue = {};
    requestDoc = subnetCreateOrUpdateParametersValue;
    
    var propertiesValue = {};
    subnetCreateOrUpdateParametersValue['properties'] = propertiesValue;
    
    propertiesValue['addressPrefix'] = parameters.properties.addressPrefix;
    
    if (parameters.properties.dhcpOptions !== null && parameters.properties.dhcpOptions !== undefined) {
      var dhcpOptionsValue = {};
      propertiesValue['dhcpOptions'] = dhcpOptionsValue;
      
      if (parameters.properties.dhcpOptions.dnsServers !== null && parameters.properties.dhcpOptions.dnsServers !== undefined) {
        var dnsServersArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.properties.dhcpOptions.dnsServers.length; loweredIndex1 = loweredIndex1 + 1) {
          var dnsServersItem = parameters.properties.dhcpOptions.dnsServers[loweredIndex1];
          dnsServersArray.push(dnsServersItem);
        }
        dhcpOptionsValue['dnsServers'] = dnsServersArray;
      }
    }
    
    if (parameters.properties.ipConfigurations !== null && parameters.properties.ipConfigurations !== undefined) {
      var ipConfigurationsArray = [];
      for (var loweredIndex2 = 0; loweredIndex2 < parameters.properties.ipConfigurations.length; loweredIndex2 = loweredIndex2 + 1) {
        var ipConfigurationsItem = parameters.properties.ipConfigurations[loweredIndex2];
        var resourceIdValue = {};
        ipConfigurationsArray.push(resourceIdValue);
        
        if (ipConfigurationsItem.id !== null && ipConfigurationsItem.id !== undefined) {
          resourceIdValue['id'] = ipConfigurationsItem.id;
        }
      }
      propertiesValue['ipConfigurations'] = ipConfigurationsArray;
    }
    
    if (parameters.properties.provisioningState !== null && parameters.properties.provisioningState !== undefined) {
      propertiesValue['provisioningState'] = parameters.properties.provisioningState;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      subnetCreateOrUpdateParametersValue['name'] = parameters.name;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      subnetCreateOrUpdateParametersValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      subnetCreateOrUpdateParametersValue['id'] = parameters.id;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var subnetInstance = {};
          result.subnet = subnetInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = { ipConfigurations: [] };
            subnetInstance.properties = propertiesInstance;
            
            var addressPrefixValue = propertiesValue2['addressPrefix'];
            if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
              var addressPrefixInstance = addressPrefixValue;
              propertiesInstance.addressPrefix = addressPrefixInstance;
            }
            
            var dhcpOptionsValue2 = propertiesValue2['dhcpOptions'];
            if (dhcpOptionsValue2 !== null && dhcpOptionsValue2 !== undefined) {
              var dhcpOptionsInstance = { dnsServers: [] };
              propertiesInstance.dhcpOptions = dhcpOptionsInstance;
              
              var dnsServersArray2 = dhcpOptionsValue2['dnsServers'];
              if (dnsServersArray2 !== null && dnsServersArray2 !== undefined) {
                for (var loweredIndex3 = 0; loweredIndex3 < dnsServersArray2.length; loweredIndex3 = loweredIndex3 + 1) {
                  var dnsServersValue = dnsServersArray2[loweredIndex3];
                  dhcpOptionsInstance.dnsServers.push(dnsServersValue);
                }
              }
            }
            
            var ipConfigurationsArray2 = propertiesValue2['ipConfigurations'];
            if (ipConfigurationsArray2 !== null && ipConfigurationsArray2 !== undefined) {
              for (var loweredIndex4 = 0; loweredIndex4 < ipConfigurationsArray2.length; loweredIndex4 = loweredIndex4 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray2[loweredIndex4];
                var resourceIdInstance = {};
                propertiesInstance.ipConfigurations.push(resourceIdInstance);
                
                var idValue = ipConfigurationsValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  resourceIdInstance.id = idInstance;
                }
              }
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            subnetInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            subnetInstance.etag = etagInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            subnetInstance.id = idInstance2;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex5 = 0; loweredIndex5 < detailsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                var detailsValue = detailsArray[loweredIndex5];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The delete subnet operation deletes the specified subnet.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {string} subnetName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.beginDeleting = function(resourceGroupName, virtualNetworkName, subnetName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (subnetName === null || subnetName === undefined) {
      return callback(new Error('subnetName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    url2 = url2 + '/subnets/';
    url2 = url2 + encodeURIComponent(subnetName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put Subnet operation creates/updates a subnet in thespecified virtual
   * network
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {string} subnetName The name of the subnet.
   * 
   * @param {SubnetCreateOrUpdateParameters} parameters Parameters supplied to
   * the create/update Subnet operation
   * 
   * @param {SubnetProperties} parameters.properties Subnet properties
   * 
   * @param {string} parameters.properties.addressPrefix Address prefix for the
   * subnet.
   * 
   * @param {DhcpOptions} [parameters.properties.dhcpOptions] Standard DHCP
   * option for this subnet. Overrides VNET DHCP options.
   * 
   * @param {IEnumerable} [parameters.properties.dhcpOptions.dnsServers] List
   * of DNS servers IP addresses
   * 
   * @param {IEnumerable} [parameters.properties.ipConfigurations] Read-only
   * array of references to the network interface IP configurations using
   * subnet
   * 
   * @param {string} [parameters.properties.provisioningState] Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.name] Read-OnlyA Name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [parameters.etag] A unique read-only string that changes
   * whenever the resource is updated
   * 
   * @param {string} [parameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.createOrUpdate = function(resourceGroupName, virtualNetworkName, subnetName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.subnets.beginCreateOrUpdating(resourceGroupName, virtualNetworkName, subnetName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The delete subnet operation deletes the specified subnet.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/jj157193.aspx for
   * more information)
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {string} subnetName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.deleteMethod = function(resourceGroupName, virtualNetworkName, subnetName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.subnets.beginDeleting(resourceGroupName, virtualNetworkName, subnetName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get subnet operation retreives information about the specified subnet.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {string} subnetName The name of the subnet.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.get = function(resourceGroupName, virtualNetworkName, subnetName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (subnetName === null || subnetName === undefined) {
      return callback(new Error('subnetName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    url2 = url2 + '/subnets/';
    url2 = url2 + encodeURIComponent(subnetName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var subnetInstance = {};
          result.subnet = subnetInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { ipConfigurations: [] };
            subnetInstance.properties = propertiesInstance;
            
            var addressPrefixValue = propertiesValue['addressPrefix'];
            if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
              var addressPrefixInstance = addressPrefixValue;
              propertiesInstance.addressPrefix = addressPrefixInstance;
            }
            
            var dhcpOptionsValue = propertiesValue['dhcpOptions'];
            if (dhcpOptionsValue !== null && dhcpOptionsValue !== undefined) {
              var dhcpOptionsInstance = { dnsServers: [] };
              propertiesInstance.dhcpOptions = dhcpOptionsInstance;
              
              var dnsServersArray = dhcpOptionsValue['dnsServers'];
              if (dnsServersArray !== null && dnsServersArray !== undefined) {
                for (var loweredIndex1 = 0; loweredIndex1 < dnsServersArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var dnsServersValue = dnsServersArray[loweredIndex1];
                  dhcpOptionsInstance.dnsServers.push(dnsServersValue);
                }
              }
            }
            
            var ipConfigurationsArray = propertiesValue['ipConfigurations'];
            if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < ipConfigurationsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var ipConfigurationsValue = ipConfigurationsArray[loweredIndex2];
                var resourceIdInstance = {};
                propertiesInstance.ipConfigurations.push(resourceIdInstance);
                
                var idValue = ipConfigurationsValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  resourceIdInstance.id = idInstance;
                }
              }
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            subnetInstance.name = nameInstance;
          }
          
          var etagValue = responseDoc['etag'];
          if (etagValue !== null && etagValue !== undefined) {
            var etagInstance = etagValue;
            subnetInstance.etag = etagInstance;
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            subnetInstance.id = idInstance2;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The List subnets opertion retrieves all the subnets in a virtual network.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  SubnetOperations.prototype.list = function(resourceGroupName, virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    url2 = url2 + '/subnets';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { subnets: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var subnetInstance = {};
              result.subnets.push(subnetInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { ipConfigurations: [] };
                subnetInstance.properties = propertiesInstance;
                
                var addressPrefixValue = propertiesValue['addressPrefix'];
                if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                  var addressPrefixInstance = addressPrefixValue;
                  propertiesInstance.addressPrefix = addressPrefixInstance;
                }
                
                var dhcpOptionsValue = propertiesValue['dhcpOptions'];
                if (dhcpOptionsValue !== null && dhcpOptionsValue !== undefined) {
                  var dhcpOptionsInstance = { dnsServers: [] };
                  propertiesInstance.dhcpOptions = dhcpOptionsInstance;
                  
                  var dnsServersArray = dhcpOptionsValue['dnsServers'];
                  if (dnsServersArray !== null && dnsServersArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < dnsServersArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var dnsServersValue = dnsServersArray[loweredIndex2];
                      dhcpOptionsInstance.dnsServers.push(dnsServersValue);
                    }
                  }
                }
                
                var ipConfigurationsArray = propertiesValue['ipConfigurations'];
                if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < ipConfigurationsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var ipConfigurationsValue = ipConfigurationsArray[loweredIndex3];
                    var resourceIdInstance = {};
                    propertiesInstance.ipConfigurations.push(resourceIdInstance);
                    
                    var idValue = ipConfigurationsValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      resourceIdInstance.id = idInstance;
                    }
                  }
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                subnetInstance.name = nameInstance;
              }
              
              var etagValue = valueValue['etag'];
              if (etagValue !== null && etagValue !== undefined) {
                var etagInstance = etagValue;
                subnetInstance.etag = etagInstance;
              }
              
              var idValue2 = valueValue['id'];
              if (idValue2 !== null && idValue2 !== undefined) {
                var idInstance2 = idValue2;
                subnetInstance.id = idInstance2;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return SubnetOperations;
})();

var VirtualNetworkOperations = ( /** @lends VirtualNetworkOperations */ function() {
  /**
   * @class
   * The Network Resource Provider API includes operations for managing the
   * Virtual Networks for your subscription.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [NetworkResourceProviderClient] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient}.
   * See [virtualNetworks] {@link
   * NetworkResourceProviderClient~NetworkResourceProviderClient#virtualNetworks}.
   * Initializes a new instance of the VirtualNetworkOperations class.
   * @constructor
   * 
   * @param {NetworkResourceProviderClient} client Reference to the service
   * client.
   */
  function VirtualNetworkOperations(client) {
    this.client = client;
  }
  
  /**
   * The Put VirtualNetwork operation creates/updates a virtual network in the
   * specified resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {VirtualNetworkCreateOrUpdateParameters} parameters Parameters
   * supplied to the create/update Virtual Network operation
   * 
   * @param {VirtualNetworkProperties} [parameters.properties] Properties of a
   * VirtualNetwork
   * 
   * @param {AddressSpace} [parameters.properties.addressSpace] AddressSpace
   * contains an array of IP address ranges that can be used by subnets
   * 
   * @param {IEnumerable} [parameters.properties.addressSpace.addressPrefixes]
   * List of address blocks reserved for this virtual network in CIDR notation
   * 
   * @param {DhcpOptions} [parameters.properties.dhcpOptions] DHCPOptions
   * contains an array of DNS servers available to VMs deployed in the virtual
   * network
   * 
   * @param {IEnumerable} [parameters.properties.dhcpOptions.dnsServers] List
   * of DNS servers IP addresses
   * 
   * @param {IEnumerable} [parameters.properties.subnets] List of subnets in a
   * VirtualNetwork
   * 
   * @param {string} [parameters.properties.provisioningState] Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.location] The location of the resource
   * 
   * @param {object} [parameters.tags]
   * 
   * @param {string} [parameters.name] Read-OnlyA Name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [parameters.etag] A unique read-only string that changes
   * whenever the resource is updated
   * 
   * @param {string} [parameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, virtualNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.properties !== null && parameters.properties !== undefined) {
      if (parameters.properties.subnets !== null && parameters.properties.subnets !== undefined) {
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.properties.subnets.length; loweredIndex1 = loweredIndex1 + 1) {
          var subnetsParameterItem = parameters.properties.subnets[loweredIndex1];
          if (subnetsParameterItem.properties === null || subnetsParameterItem.properties === undefined) {
            return callback(new Error('parameters.properties.subnets.properties cannot be null.'));
          }
          if (subnetsParameterItem.properties.addressPrefix === null || subnetsParameterItem.properties.addressPrefix === undefined) {
            return callback(new Error('parameters.properties.subnets.properties.addressPrefix cannot be null.'));
          }
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var virtualNetworkCreateOrUpdateParametersValue = {};
    requestDoc = virtualNetworkCreateOrUpdateParametersValue;
    
    if (parameters.properties !== null && parameters.properties !== undefined) {
      var propertiesValue = {};
      virtualNetworkCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.properties.addressSpace !== null && parameters.properties.addressSpace !== undefined) {
        var addressSpaceValue = {};
        propertiesValue['addressSpace'] = addressSpaceValue;
        
        if (parameters.properties.addressSpace.addressPrefixes !== null && parameters.properties.addressSpace.addressPrefixes !== undefined) {
          var addressPrefixesArray = [];
          for (var loweredIndex2 = 0; loweredIndex2 < parameters.properties.addressSpace.addressPrefixes.length; loweredIndex2 = loweredIndex2 + 1) {
            var addressPrefixesItem = parameters.properties.addressSpace.addressPrefixes[loweredIndex2];
            addressPrefixesArray.push(addressPrefixesItem);
          }
          addressSpaceValue['addressPrefixes'] = addressPrefixesArray;
        }
      }
      
      if (parameters.properties.dhcpOptions !== null && parameters.properties.dhcpOptions !== undefined) {
        var dhcpOptionsValue = {};
        propertiesValue['dhcpOptions'] = dhcpOptionsValue;
        
        if (parameters.properties.dhcpOptions.dnsServers !== null && parameters.properties.dhcpOptions.dnsServers !== undefined) {
          var dnsServersArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < parameters.properties.dhcpOptions.dnsServers.length; loweredIndex3 = loweredIndex3 + 1) {
            var dnsServersItem = parameters.properties.dhcpOptions.dnsServers[loweredIndex3];
            dnsServersArray.push(dnsServersItem);
          }
          dhcpOptionsValue['dnsServers'] = dnsServersArray;
        }
      }
      
      if (parameters.properties.subnets !== null && parameters.properties.subnets !== undefined) {
        var subnetsArray = [];
        for (var loweredIndex4 = 0; loweredIndex4 < parameters.properties.subnets.length; loweredIndex4 = loweredIndex4 + 1) {
          var subnetsItem = parameters.properties.subnets[loweredIndex4];
          var subnetValue = {};
          subnetsArray.push(subnetValue);
          
          var propertiesValue2 = {};
          subnetValue['properties'] = propertiesValue2;
          
          propertiesValue2['addressPrefix'] = subnetsItem.properties.addressPrefix;
          
          if (subnetsItem.properties.dhcpOptions !== null && subnetsItem.properties.dhcpOptions !== undefined) {
            var dhcpOptionsValue2 = {};
            propertiesValue2['dhcpOptions'] = dhcpOptionsValue2;
            
            if (subnetsItem.properties.dhcpOptions.dnsServers !== null && subnetsItem.properties.dhcpOptions.dnsServers !== undefined) {
              var dnsServersArray2 = [];
              for (var loweredIndex5 = 0; loweredIndex5 < subnetsItem.properties.dhcpOptions.dnsServers.length; loweredIndex5 = loweredIndex5 + 1) {
                var dnsServersItem2 = subnetsItem.properties.dhcpOptions.dnsServers[loweredIndex5];
                dnsServersArray2.push(dnsServersItem2);
              }
              dhcpOptionsValue2['dnsServers'] = dnsServersArray2;
            }
          }
          
          if (subnetsItem.properties.ipConfigurations !== null && subnetsItem.properties.ipConfigurations !== undefined) {
            var ipConfigurationsArray = [];
            for (var loweredIndex6 = 0; loweredIndex6 < subnetsItem.properties.ipConfigurations.length; loweredIndex6 = loweredIndex6 + 1) {
              var ipConfigurationsItem = subnetsItem.properties.ipConfigurations[loweredIndex6];
              var resourceIdValue = {};
              ipConfigurationsArray.push(resourceIdValue);
              
              if (ipConfigurationsItem.id !== null && ipConfigurationsItem.id !== undefined) {
                resourceIdValue['id'] = ipConfigurationsItem.id;
              }
            }
            propertiesValue2['ipConfigurations'] = ipConfigurationsArray;
          }
          
          if (subnetsItem.properties.provisioningState !== null && subnetsItem.properties.provisioningState !== undefined) {
            propertiesValue2['provisioningState'] = subnetsItem.properties.provisioningState;
          }
          
          if (subnetsItem.name !== null && subnetsItem.name !== undefined) {
            subnetValue['name'] = subnetsItem.name;
          }
          
          if (subnetsItem.etag !== null && subnetsItem.etag !== undefined) {
            subnetValue['etag'] = subnetsItem.etag;
          }
          
          if (subnetsItem.id !== null && subnetsItem.id !== undefined) {
            subnetValue['id'] = subnetsItem.id;
          }
        }
        propertiesValue['subnets'] = subnetsArray;
      }
      
      if (parameters.properties.provisioningState !== null && parameters.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = parameters.properties.provisioningState;
      }
    }
    
    if (parameters.location !== null && parameters.location !== undefined) {
      virtualNetworkCreateOrUpdateParametersValue['location'] = parameters.location;
    }
    
    if (parameters.tags !== null && parameters.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.tags) {
        var tagsValue = parameters.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      virtualNetworkCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    if (parameters.name !== null && parameters.name !== undefined) {
      virtualNetworkCreateOrUpdateParametersValue['name'] = parameters.name;
    }
    
    if (parameters.etag !== null && parameters.etag !== undefined) {
      virtualNetworkCreateOrUpdateParametersValue['etag'] = parameters.etag;
    }
    
    if (parameters.id !== null && parameters.id !== undefined) {
      virtualNetworkCreateOrUpdateParametersValue['id'] = parameters.id;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualNetworkInstance = { tags: {} };
          result.virtualNetwork = virtualNetworkInstance;
          
          var propertiesValue3 = responseDoc['properties'];
          if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
            var propertiesInstance = { subnets: [] };
            virtualNetworkInstance.properties = propertiesInstance;
            
            var addressSpaceValue2 = propertiesValue3['addressSpace'];
            if (addressSpaceValue2 !== null && addressSpaceValue2 !== undefined) {
              var addressSpaceInstance = { addressPrefixes: [] };
              propertiesInstance.addressSpace = addressSpaceInstance;
              
              var addressPrefixesArray2 = addressSpaceValue2['addressPrefixes'];
              if (addressPrefixesArray2 !== null && addressPrefixesArray2 !== undefined) {
                for (var loweredIndex7 = 0; loweredIndex7 < addressPrefixesArray2.length; loweredIndex7 = loweredIndex7 + 1) {
                  var addressPrefixesValue = addressPrefixesArray2[loweredIndex7];
                  addressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                }
              }
            }
            
            var dhcpOptionsValue3 = propertiesValue3['dhcpOptions'];
            if (dhcpOptionsValue3 !== null && dhcpOptionsValue3 !== undefined) {
              var dhcpOptionsInstance = { dnsServers: [] };
              propertiesInstance.dhcpOptions = dhcpOptionsInstance;
              
              var dnsServersArray3 = dhcpOptionsValue3['dnsServers'];
              if (dnsServersArray3 !== null && dnsServersArray3 !== undefined) {
                for (var loweredIndex8 = 0; loweredIndex8 < dnsServersArray3.length; loweredIndex8 = loweredIndex8 + 1) {
                  var dnsServersValue = dnsServersArray3[loweredIndex8];
                  dhcpOptionsInstance.dnsServers.push(dnsServersValue);
                }
              }
            }
            
            var subnetsArray2 = propertiesValue3['subnets'];
            if (subnetsArray2 !== null && subnetsArray2 !== undefined) {
              for (var loweredIndex9 = 0; loweredIndex9 < subnetsArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                var subnetsValue = subnetsArray2[loweredIndex9];
                var subnetInstance = {};
                propertiesInstance.subnets.push(subnetInstance);
                
                var propertiesValue4 = subnetsValue['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var propertiesInstance2 = { ipConfigurations: [] };
                  subnetInstance.properties = propertiesInstance2;
                  
                  var addressPrefixValue = propertiesValue4['addressPrefix'];
                  if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                    var addressPrefixInstance = addressPrefixValue;
                    propertiesInstance2.addressPrefix = addressPrefixInstance;
                  }
                  
                  var dhcpOptionsValue4 = propertiesValue4['dhcpOptions'];
                  if (dhcpOptionsValue4 !== null && dhcpOptionsValue4 !== undefined) {
                    var dhcpOptionsInstance2 = { dnsServers: [] };
                    propertiesInstance2.dhcpOptions = dhcpOptionsInstance2;
                    
                    var dnsServersArray4 = dhcpOptionsValue4['dnsServers'];
                    if (dnsServersArray4 !== null && dnsServersArray4 !== undefined) {
                      for (var loweredIndex10 = 0; loweredIndex10 < dnsServersArray4.length; loweredIndex10 = loweredIndex10 + 1) {
                        var dnsServersValue2 = dnsServersArray4[loweredIndex10];
                        dhcpOptionsInstance2.dnsServers.push(dnsServersValue2);
                      }
                    }
                  }
                  
                  var ipConfigurationsArray2 = propertiesValue4['ipConfigurations'];
                  if (ipConfigurationsArray2 !== null && ipConfigurationsArray2 !== undefined) {
                    for (var loweredIndex11 = 0; loweredIndex11 < ipConfigurationsArray2.length; loweredIndex11 = loweredIndex11 + 1) {
                      var ipConfigurationsValue = ipConfigurationsArray2[loweredIndex11];
                      var resourceIdInstance = {};
                      propertiesInstance2.ipConfigurations.push(resourceIdInstance);
                      
                      var idValue = ipConfigurationsValue['id'];
                      if (idValue !== null && idValue !== undefined) {
                        var idInstance = idValue;
                        resourceIdInstance.id = idInstance;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue4['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    propertiesInstance2.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = subnetsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  subnetInstance.name = nameInstance;
                }
                
                var etagValue = subnetsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  subnetInstance.etag = etagInstance;
                }
                
                var idValue2 = subnetsValue['id'];
                if (idValue2 !== null && idValue2 !== undefined) {
                  var idInstance2 = idValue2;
                  subnetInstance.id = idInstance2;
                }
              }
            }
            
            var provisioningStateValue2 = propertiesValue3['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              propertiesInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            virtualNetworkInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              virtualNetworkInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            virtualNetworkInstance.name = nameInstance2;
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            virtualNetworkInstance.etag = etagInstance2;
          }
          
          var idValue3 = responseDoc['id'];
          if (idValue3 !== null && idValue3 !== undefined) {
            var idInstance3 = idValue3;
            virtualNetworkInstance.id = idInstance3;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var codeValue = errorValue['code'];
            if (codeValue !== null && codeValue !== undefined) {
              var codeInstance = codeValue;
              errorInstance.code = codeInstance;
            }
            
            var messageValue = errorValue['message'];
            if (messageValue !== null && messageValue !== undefined) {
              var messageInstance = messageValue;
              errorInstance.message = messageInstance;
            }
            
            var targetValue = errorValue['target'];
            if (targetValue !== null && targetValue !== undefined) {
              var targetInstance = targetValue;
              errorInstance.target = targetInstance;
            }
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex12 = 0; loweredIndex12 < detailsArray.length; loweredIndex12 = loweredIndex12 + 1) {
                var detailsValue = detailsArray[loweredIndex12];
                var errorDetailsInstance = {};
                errorInstance.details.push(errorDetailsInstance);
                
                var codeValue2 = detailsValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  errorDetailsInstance.code = codeInstance2;
                }
                
                var targetValue2 = detailsValue['target'];
                if (targetValue2 !== null && targetValue2 !== undefined) {
                  var targetInstance2 = targetValue2;
                  errorDetailsInstance.target = targetInstance2;
                }
                
                var messageValue2 = detailsValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  errorDetailsInstance.message = messageInstance2;
                }
              }
            }
            
            var innerErrorValue = errorValue['innerError'];
            if (innerErrorValue !== null && innerErrorValue !== undefined) {
              var innerErrorInstance = innerErrorValue;
              errorInstance.innerError = innerErrorInstance;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Delete VirtualNetwork operation deletes the specifed virtual network
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.beginDeleting = function(resourceGroupName, virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202 && statusCode !== 204) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.retryAfter = parseInt(response.headers['retry-after'], 10);
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The Put VirtualNetwork operation creates/updates a virtual networkin the
   * specified resource group.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {VirtualNetworkCreateOrUpdateParameters} parameters Parameters
   * supplied to the create/update Virtual Network operation
   * 
   * @param {VirtualNetworkProperties} [parameters.properties] Properties of a
   * VirtualNetwork
   * 
   * @param {AddressSpace} [parameters.properties.addressSpace] AddressSpace
   * contains an array of IP address ranges that can be used by subnets
   * 
   * @param {IEnumerable} [parameters.properties.addressSpace.addressPrefixes]
   * List of address blocks reserved for this virtual network in CIDR notation
   * 
   * @param {DhcpOptions} [parameters.properties.dhcpOptions] DHCPOptions
   * contains an array of DNS servers available to VMs deployed in the virtual
   * network
   * 
   * @param {IEnumerable} [parameters.properties.dhcpOptions.dnsServers] List
   * of DNS servers IP addresses
   * 
   * @param {IEnumerable} [parameters.properties.subnets] List of subnets in a
   * VirtualNetwork
   * 
   * @param {string} [parameters.properties.provisioningState] Provisioning
   * state of the PublicIP resource Updating/Deleting/Failed
   * 
   * @param {string} [parameters.location] The location of the resource
   * 
   * @param {object} [parameters.tags]
   * 
   * @param {string} [parameters.name] Read-OnlyA Name of the resource that is
   * unique within a resource group. This name can be used to access the
   * resource
   * 
   * @param {string} [parameters.etag] A unique read-only string that changes
   * whenever the resource is updated
   * 
   * @param {string} [parameters.id] Id of the resource
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.createOrUpdate = function(resourceGroupName, virtualNetworkName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworks.beginCreateOrUpdating(resourceGroupName, virtualNetworkName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Delete VirtualNetwork operation deletes the specifed virtual network
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.deleteMethod = function(resourceGroupName, virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualNetworks.beginDeleting(resourceGroupName, virtualNetworkName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = result.retryAfter;
      if (delayInSeconds === 0) {
        delayInSeconds = 30;
      }
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = result2.retryAfter;
                if (delayInSeconds === 0) {
                  delayInSeconds = 15;
                }
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * The Get VirtualNetwork operation retrieves information about the specified
   * virtual network.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} virtualNetworkName The name of the virtual network.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.get = function(resourceGroupName, virtualNetworkName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (virtualNetworkName === null || virtualNetworkName === undefined) {
      return callback(new Error('virtualNetworkName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/virtualnetworks/';
    url2 = url2 + encodeURIComponent(virtualNetworkName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualNetworkInstance = { tags: {} };
          result.virtualNetwork = virtualNetworkInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { subnets: [] };
            virtualNetworkInstance.properties = propertiesInstance;
            
            var addressSpaceValue = propertiesValue['addressSpace'];
            if (addressSpaceValue !== null && addressSpaceValue !== undefined) {
              var addressSpaceInstance = { addressPrefixes: [] };
              propertiesInstance.addressSpace = addressSpaceInstance;
              
              var addressPrefixesArray = addressSpaceValue['addressPrefixes'];
              if (addressPrefixesArray !== null && addressPrefixesArray !== undefined) {
                for (var loweredIndex1 = 0; loweredIndex1 < addressPrefixesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var addressPrefixesValue = addressPrefixesArray[loweredIndex1];
                  addressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                }
              }
            }
            
            var dhcpOptionsValue = propertiesValue['dhcpOptions'];
            if (dhcpOptionsValue !== null && dhcpOptionsValue !== undefined) {
              var dhcpOptionsInstance = { dnsServers: [] };
              propertiesInstance.dhcpOptions = dhcpOptionsInstance;
              
              var dnsServersArray = dhcpOptionsValue['dnsServers'];
              if (dnsServersArray !== null && dnsServersArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < dnsServersArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var dnsServersValue = dnsServersArray[loweredIndex2];
                  dhcpOptionsInstance.dnsServers.push(dnsServersValue);
                }
              }
            }
            
            var subnetsArray = propertiesValue['subnets'];
            if (subnetsArray !== null && subnetsArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < subnetsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var subnetsValue = subnetsArray[loweredIndex3];
                var subnetInstance = {};
                propertiesInstance.subnets.push(subnetInstance);
                
                var propertiesValue2 = subnetsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var propertiesInstance2 = { ipConfigurations: [] };
                  subnetInstance.properties = propertiesInstance2;
                  
                  var addressPrefixValue = propertiesValue2['addressPrefix'];
                  if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                    var addressPrefixInstance = addressPrefixValue;
                    propertiesInstance2.addressPrefix = addressPrefixInstance;
                  }
                  
                  var dhcpOptionsValue2 = propertiesValue2['dhcpOptions'];
                  if (dhcpOptionsValue2 !== null && dhcpOptionsValue2 !== undefined) {
                    var dhcpOptionsInstance2 = { dnsServers: [] };
                    propertiesInstance2.dhcpOptions = dhcpOptionsInstance2;
                    
                    var dnsServersArray2 = dhcpOptionsValue2['dnsServers'];
                    if (dnsServersArray2 !== null && dnsServersArray2 !== undefined) {
                      for (var loweredIndex4 = 0; loweredIndex4 < dnsServersArray2.length; loweredIndex4 = loweredIndex4 + 1) {
                        var dnsServersValue2 = dnsServersArray2[loweredIndex4];
                        dhcpOptionsInstance2.dnsServers.push(dnsServersValue2);
                      }
                    }
                  }
                  
                  var ipConfigurationsArray = propertiesValue2['ipConfigurations'];
                  if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                    for (var loweredIndex5 = 0; loweredIndex5 < ipConfigurationsArray.length; loweredIndex5 = loweredIndex5 + 1) {
                      var ipConfigurationsValue = ipConfigurationsArray[loweredIndex5];
                      var resourceIdInstance = {};
                      propertiesInstance2.ipConfigurations.push(resourceIdInstance);
                      
                      var idValue = ipConfigurationsValue['id'];
                      if (idValue !== null && idValue !== undefined) {
                        var idInstance = idValue;
                        resourceIdInstance.id = idInstance;
                      }
                    }
                  }
                  
                  var provisioningStateValue = propertiesValue2['provisioningState'];
                  if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                    var provisioningStateInstance = provisioningStateValue;
                    propertiesInstance2.provisioningState = provisioningStateInstance;
                  }
                }
                
                var nameValue = subnetsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  subnetInstance.name = nameInstance;
                }
                
                var etagValue = subnetsValue['etag'];
                if (etagValue !== null && etagValue !== undefined) {
                  var etagInstance = etagValue;
                  subnetInstance.etag = etagInstance;
                }
                
                var idValue2 = subnetsValue['id'];
                if (idValue2 !== null && idValue2 !== undefined) {
                  var idInstance2 = idValue2;
                  subnetInstance.id = idInstance2;
                }
              }
            }
            
            var provisioningStateValue2 = propertiesValue['provisioningState'];
            if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
              var provisioningStateInstance2 = provisioningStateValue2;
              propertiesInstance.provisioningState = provisioningStateInstance2;
            }
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            virtualNetworkInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              virtualNetworkInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            virtualNetworkInstance.name = nameInstance2;
          }
          
          var etagValue2 = responseDoc['etag'];
          if (etagValue2 !== null && etagValue2 !== undefined) {
            var etagInstance2 = etagValue2;
            virtualNetworkInstance.etag = etagInstance2;
          }
          
          var idValue3 = responseDoc['id'];
          if (idValue3 !== null && idValue3 !== undefined) {
            var idInstance3 = idValue3;
            virtualNetworkInstance.id = idInstance3;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * The list VirtualNetwork returns all Virtual Networks in a resource group
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualNetworkOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/microsoft.network/virtualnetworks';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { virtualNetworks: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var virtualNetworkInstance = { tags: {} };
              result.virtualNetworks.push(virtualNetworkInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { subnets: [] };
                virtualNetworkInstance.properties = propertiesInstance;
                
                var addressSpaceValue = propertiesValue['addressSpace'];
                if (addressSpaceValue !== null && addressSpaceValue !== undefined) {
                  var addressSpaceInstance = { addressPrefixes: [] };
                  propertiesInstance.addressSpace = addressSpaceInstance;
                  
                  var addressPrefixesArray = addressSpaceValue['addressPrefixes'];
                  if (addressPrefixesArray !== null && addressPrefixesArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < addressPrefixesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var addressPrefixesValue = addressPrefixesArray[loweredIndex2];
                      addressSpaceInstance.addressPrefixes.push(addressPrefixesValue);
                    }
                  }
                }
                
                var dhcpOptionsValue = propertiesValue['dhcpOptions'];
                if (dhcpOptionsValue !== null && dhcpOptionsValue !== undefined) {
                  var dhcpOptionsInstance = { dnsServers: [] };
                  propertiesInstance.dhcpOptions = dhcpOptionsInstance;
                  
                  var dnsServersArray = dhcpOptionsValue['dnsServers'];
                  if (dnsServersArray !== null && dnsServersArray !== undefined) {
                    for (var loweredIndex3 = 0; loweredIndex3 < dnsServersArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var dnsServersValue = dnsServersArray[loweredIndex3];
                      dhcpOptionsInstance.dnsServers.push(dnsServersValue);
                    }
                  }
                }
                
                var subnetsArray = propertiesValue['subnets'];
                if (subnetsArray !== null && subnetsArray !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < subnetsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var subnetsValue = subnetsArray[loweredIndex4];
                    var subnetInstance = {};
                    propertiesInstance.subnets.push(subnetInstance);
                    
                    var propertiesValue2 = subnetsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var propertiesInstance2 = { ipConfigurations: [] };
                      subnetInstance.properties = propertiesInstance2;
                      
                      var addressPrefixValue = propertiesValue2['addressPrefix'];
                      if (addressPrefixValue !== null && addressPrefixValue !== undefined) {
                        var addressPrefixInstance = addressPrefixValue;
                        propertiesInstance2.addressPrefix = addressPrefixInstance;
                      }
                      
                      var dhcpOptionsValue2 = propertiesValue2['dhcpOptions'];
                      if (dhcpOptionsValue2 !== null && dhcpOptionsValue2 !== undefined) {
                        var dhcpOptionsInstance2 = { dnsServers: [] };
                        propertiesInstance2.dhcpOptions = dhcpOptionsInstance2;
                        
                        var dnsServersArray2 = dhcpOptionsValue2['dnsServers'];
                        if (dnsServersArray2 !== null && dnsServersArray2 !== undefined) {
                          for (var loweredIndex5 = 0; loweredIndex5 < dnsServersArray2.length; loweredIndex5 = loweredIndex5 + 1) {
                            var dnsServersValue2 = dnsServersArray2[loweredIndex5];
                            dhcpOptionsInstance2.dnsServers.push(dnsServersValue2);
                          }
                        }
                      }
                      
                      var ipConfigurationsArray = propertiesValue2['ipConfigurations'];
                      if (ipConfigurationsArray !== null && ipConfigurationsArray !== undefined) {
                        for (var loweredIndex6 = 0; loweredIndex6 < ipConfigurationsArray.length; loweredIndex6 = loweredIndex6 + 1) {
                          var ipConfigurationsValue = ipConfigurationsArray[loweredIndex6];
                          var resourceIdInstance = {};
                          propertiesInstance2.ipConfigurations.push(resourceIdInstance);
                          
                          var idValue = ipConfigurationsValue['id'];
                          if (idValue !== null && idValue !== undefined) {
                            var idInstance = idValue;
                            resourceIdInstance.id = idInstance;
                          }
                        }
                      }
                      
                      var provisioningStateValue = propertiesValue2['provisioningState'];
                      if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                        var provisioningStateInstance = provisioningStateValue;
                        propertiesInstance2.provisioningState = provisioningStateInstance;
                      }
                    }
                    
                    var nameValue = subnetsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      subnetInstance.name = nameInstance;
                    }
                    
                    var etagValue = subnetsValue['etag'];
                    if (etagValue !== null && etagValue !== undefined) {
                      var etagInstance = etagValue;
                      subnetInstance.etag = etagInstance;
                    }
                    
                    var idValue2 = subnetsValue['id'];
                    if (idValue2 !== null && idValue2 !== undefined) {
                      var idInstance2 = idValue2;
                      subnetInstance.id = idInstance2;
                    }
                  }
                }
                
                var provisioningStateValue2 = propertiesValue['provisioningState'];
                if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                  var provisioningStateInstance2 = provisioningStateValue2;
                  propertiesInstance.provisioningState = provisioningStateInstance2;
                }
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                virtualNetworkInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  virtualNetworkInstance.tags[tagsKey] = tagsValue;
                }
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                virtualNetworkInstance.name = nameInstance2;
              }
              
              var etagValue2 = valueValue['etag'];
              if (etagValue2 !== null && etagValue2 !== undefined) {
                var etagInstance2 = etagValue2;
                virtualNetworkInstance.etag = etagInstance2;
              }
              
              var idValue3 = valueValue['id'];
              if (idValue3 !== null && idValue3 !== undefined) {
                var idInstance3 = idValue3;
                virtualNetworkInstance.id = idInstance3;
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return VirtualNetworkOperations;
})();
