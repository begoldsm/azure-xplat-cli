/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var StorageManagementClient = ( /** @lends StorageManagementClient */ function() {
  /**
   * @class
   * Initializes a new instance of the StorageManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function StorageManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    StorageManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com/';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-08-01-alpha';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [StorageAccountService](-StorageAccountService.html) object.
     * @type {object}
     */
    this.storageAccountService = new StorageAccountService(this);
    /**
     * Provides an instance of the
     * [SubscriptionService](-SubscriptionService.html) object.
     * @type {object}
     */
    this.subscriptionService = new SubscriptionService(this);
  }
  
  util.inherits(StorageManagementClient, Service);
  
  
  return StorageManagementClient;
})();
exports.StorageManagementClient = StorageManagementClient;

var StorageAccountService = ( /** @lends StorageAccountService */ function() {
  /**
   * @class
   * Your documentation here.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for more
   * information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [StorageManagementClient] {@link
   * StorageManagementClient~StorageManagementClient}.
   * See [storageAccountService] {@link
   * StorageManagementClient~StorageManagementClient#storageAccountService}.
   * Initializes a new instance of the StorageAccountService class.
   * @constructor
   * 
   * @param {StorageManagementClient} client Reference to the service client.
   */
  function StorageAccountService(client) {
    this.client = client;
  }
  
  /**
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} accountName
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountService.prototype.checkAccountNameAvailability = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/Microsoft.Storage/storageAccounts/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/checkNameAvailability';
    var queryParameters = [];
    queryParameters.push('api-version=2014-08-01-alpha');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var nameAvailableValue = responseDoc['nameAvailable'];
          if (nameAvailableValue !== null && nameAvailableValue !== undefined) {
            var nameAvailableInstance = nameAvailableValue;
            result.nameAvailable = nameAvailableInstance;
          }
          
          var reasonValue = responseDoc['reason'];
          if (reasonValue !== null && reasonValue !== undefined) {
            var reasonInstance = reasonValue;
            result.reason = reasonInstance;
          }
          
          var messageValue = responseDoc['message'];
          if (messageValue !== null && messageValue !== undefined) {
            var messageInstance = messageValue;
            result.message = messageInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} accountName
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountService.prototype.deleteStorageAccount = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/Microsoft.Storage/storageAccounts/';
    url2 = url2 + encodeURIComponent(accountName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-08-01-alpha');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} locationUri
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountService.prototype.getOperationResult = function(locationUri, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (locationUri === null || locationUri === undefined) {
      return callback(new Error('locationUri cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + encodeURIComponent(locationUri);
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var storageAccountInstance = { tags: {} };
          result.storageAccount = storageAccountInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { customDomains: [], primaryEndpoints: {}, secondaryEndpoints: {} };
            storageAccountInstance.properties = propertiesInstance;
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var accountTypeValue = propertiesValue['accountType'];
            if (accountTypeValue !== null && accountTypeValue !== undefined) {
              var accountTypeInstance = accountTypeValue;
              propertiesInstance.accountType = accountTypeInstance;
            }
            
            var primaryEndpointsSequenceElement = propertiesValue['primaryEndpoints'];
            if (primaryEndpointsSequenceElement !== null && primaryEndpointsSequenceElement !== undefined) {
              for (var property in primaryEndpointsSequenceElement) {
                var primaryEndpointsKey = property;
                var primaryEndpointsValue = primaryEndpointsSequenceElement[property];
                propertiesInstance.primaryEndpoints[primaryEndpointsKey] = primaryEndpointsValue;
              }
            }
            
            var primaryLocationValue = propertiesValue['primaryLocation'];
            if (primaryLocationValue !== null && primaryLocationValue !== undefined) {
              var primaryLocationInstance = primaryLocationValue;
              propertiesInstance.primaryLocation = primaryLocationInstance;
            }
            
            var statusOfPrimaryValue = propertiesValue['statusOfPrimary'];
            if (statusOfPrimaryValue !== null && statusOfPrimaryValue !== undefined) {
              var statusOfPrimaryInstance = statusOfPrimaryValue;
              propertiesInstance.statusOfPrimary = statusOfPrimaryInstance;
            }
            
            var lastGeoFailoverTimeValue = propertiesValue['lastGeoFailoverTime'];
            if (lastGeoFailoverTimeValue !== null && lastGeoFailoverTimeValue !== undefined) {
              var lastGeoFailoverTimeInstance = lastGeoFailoverTimeValue;
              propertiesInstance.lastGeoFailoverTime = lastGeoFailoverTimeInstance;
            }
            
            var secondaryLocationValue = propertiesValue['secondaryLocation'];
            if (secondaryLocationValue !== null && secondaryLocationValue !== undefined) {
              var secondaryLocationInstance = secondaryLocationValue;
              propertiesInstance.secondaryLocation = secondaryLocationInstance;
            }
            
            var statusOfSecondaryValue = propertiesValue['statusOfSecondary'];
            if (statusOfSecondaryValue !== null && statusOfSecondaryValue !== undefined) {
              var statusOfSecondaryInstance = statusOfSecondaryValue;
              propertiesInstance.statusOfSecondary = statusOfSecondaryInstance;
            }
            
            var creationTimeValue = propertiesValue['creationTime'];
            if (creationTimeValue !== null && creationTimeValue !== undefined) {
              var creationTimeInstance = creationTimeValue;
              propertiesInstance.creationTime = creationTimeInstance;
            }
            
            var customDomainsArray = propertiesValue['customDomains'];
            if (customDomainsArray !== null && customDomainsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < customDomainsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var customDomainsValue = customDomainsArray[loweredIndex1];
                var storageCustomDomainInstance = {};
                propertiesInstance.customDomains.push(storageCustomDomainInstance);
                
                var nameValue = customDomainsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  storageCustomDomainInstance.name = nameInstance;
                }
                
                var useSubDomainNameValue = customDomainsValue['useSubDomainName'];
                if (useSubDomainNameValue !== null && useSubDomainNameValue !== undefined) {
                  var useSubDomainNameInstance = useSubDomainNameValue;
                  storageCustomDomainInstance.useSubDomainName = useSubDomainNameInstance;
                }
              }
            }
            
            var secondaryEndpointsSequenceElement = propertiesValue['secondaryEndpoints'];
            if (secondaryEndpointsSequenceElement !== null && secondaryEndpointsSequenceElement !== undefined) {
              for (var property2 in secondaryEndpointsSequenceElement) {
                var secondaryEndpointsKey = property2;
                var secondaryEndpointsValue = secondaryEndpointsSequenceElement[property2];
                propertiesInstance.secondaryEndpoints[secondaryEndpointsKey] = secondaryEndpointsValue;
              }
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            storageAccountInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            storageAccountInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            storageAccountInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            storageAccountInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property3 in tagsSequenceElement) {
              var tagsKey = property3;
              var tagsValue = tagsSequenceElement[property3];
              storageAccountInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var locationUrlValue = responseDoc['LocationUrl'];
          if (locationUrlValue !== null && locationUrlValue !== undefined) {
            var locationUrlInstance = locationUrlValue;
            result.locationUrl = locationUrlInstance;
          }
          
          var resourceInstance = { tags: {} };
          result.resource = resourceInstance;
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            resourceInstance.id = idInstance2;
          }
          
          var nameValue3 = responseDoc['name'];
          if (nameValue3 !== null && nameValue3 !== undefined) {
            var nameInstance3 = nameValue3;
            resourceInstance.name = nameInstance3;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            resourceInstance.type = typeInstance2;
          }
          
          var locationValue2 = responseDoc['location'];
          if (locationValue2 !== null && locationValue2 !== undefined) {
            var locationInstance2 = locationValue2;
            resourceInstance.location = locationInstance2;
          }
          
          var tagsSequenceElement2 = responseDoc['tags'];
          if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
            for (var property4 in tagsSequenceElement2) {
              var tagsKey2 = property4;
              var tagsValue2 = tagsSequenceElement2[property4];
              resourceInstance.tags[tagsKey2] = tagsValue2;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.locationUrl = response.headers['location'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} accountName
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountService.prototype.getStorageAccount = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/Microsoft.Storage/storageAccounts/';
    url2 = url2 + encodeURIComponent(accountName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-08-01-alpha');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var storageAccountInstance = { tags: {} };
          result.storageAccount = storageAccountInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { customDomains: [], primaryEndpoints: {}, secondaryEndpoints: {} };
            storageAccountInstance.properties = propertiesInstance;
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var accountTypeValue = propertiesValue['accountType'];
            if (accountTypeValue !== null && accountTypeValue !== undefined) {
              var accountTypeInstance = accountTypeValue;
              propertiesInstance.accountType = accountTypeInstance;
            }
            
            var primaryEndpointsSequenceElement = propertiesValue['primaryEndpoints'];
            if (primaryEndpointsSequenceElement !== null && primaryEndpointsSequenceElement !== undefined) {
              for (var property in primaryEndpointsSequenceElement) {
                var primaryEndpointsKey = property;
                var primaryEndpointsValue = primaryEndpointsSequenceElement[property];
                propertiesInstance.primaryEndpoints[primaryEndpointsKey] = primaryEndpointsValue;
              }
            }
            
            var primaryLocationValue = propertiesValue['primaryLocation'];
            if (primaryLocationValue !== null && primaryLocationValue !== undefined) {
              var primaryLocationInstance = primaryLocationValue;
              propertiesInstance.primaryLocation = primaryLocationInstance;
            }
            
            var statusOfPrimaryValue = propertiesValue['statusOfPrimary'];
            if (statusOfPrimaryValue !== null && statusOfPrimaryValue !== undefined) {
              var statusOfPrimaryInstance = statusOfPrimaryValue;
              propertiesInstance.statusOfPrimary = statusOfPrimaryInstance;
            }
            
            var lastGeoFailoverTimeValue = propertiesValue['lastGeoFailoverTime'];
            if (lastGeoFailoverTimeValue !== null && lastGeoFailoverTimeValue !== undefined) {
              var lastGeoFailoverTimeInstance = lastGeoFailoverTimeValue;
              propertiesInstance.lastGeoFailoverTime = lastGeoFailoverTimeInstance;
            }
            
            var secondaryLocationValue = propertiesValue['secondaryLocation'];
            if (secondaryLocationValue !== null && secondaryLocationValue !== undefined) {
              var secondaryLocationInstance = secondaryLocationValue;
              propertiesInstance.secondaryLocation = secondaryLocationInstance;
            }
            
            var statusOfSecondaryValue = propertiesValue['statusOfSecondary'];
            if (statusOfSecondaryValue !== null && statusOfSecondaryValue !== undefined) {
              var statusOfSecondaryInstance = statusOfSecondaryValue;
              propertiesInstance.statusOfSecondary = statusOfSecondaryInstance;
            }
            
            var creationTimeValue = propertiesValue['creationTime'];
            if (creationTimeValue !== null && creationTimeValue !== undefined) {
              var creationTimeInstance = creationTimeValue;
              propertiesInstance.creationTime = creationTimeInstance;
            }
            
            var customDomainsArray = propertiesValue['customDomains'];
            if (customDomainsArray !== null && customDomainsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < customDomainsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var customDomainsValue = customDomainsArray[loweredIndex1];
                var storageCustomDomainInstance = {};
                propertiesInstance.customDomains.push(storageCustomDomainInstance);
                
                var nameValue = customDomainsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  storageCustomDomainInstance.name = nameInstance;
                }
                
                var useSubDomainNameValue = customDomainsValue['useSubDomainName'];
                if (useSubDomainNameValue !== null && useSubDomainNameValue !== undefined) {
                  var useSubDomainNameInstance = useSubDomainNameValue;
                  storageCustomDomainInstance.useSubDomainName = useSubDomainNameInstance;
                }
              }
            }
            
            var secondaryEndpointsSequenceElement = propertiesValue['secondaryEndpoints'];
            if (secondaryEndpointsSequenceElement !== null && secondaryEndpointsSequenceElement !== undefined) {
              for (var property2 in secondaryEndpointsSequenceElement) {
                var secondaryEndpointsKey = property2;
                var secondaryEndpointsValue = secondaryEndpointsSequenceElement[property2];
                propertiesInstance.secondaryEndpoints[secondaryEndpointsKey] = secondaryEndpointsValue;
              }
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            storageAccountInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            storageAccountInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            storageAccountInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            storageAccountInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property3 in tagsSequenceElement) {
              var tagsKey = property3;
              var tagsValue = tagsSequenceElement[property3];
              storageAccountInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var locationUrlValue = responseDoc['LocationUrl'];
          if (locationUrlValue !== null && locationUrlValue !== undefined) {
            var locationUrlInstance = locationUrlValue;
            result.locationUrl = locationUrlInstance;
          }
          
          var resourceInstance = { tags: {} };
          result.resource = resourceInstance;
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            resourceInstance.id = idInstance2;
          }
          
          var nameValue3 = responseDoc['name'];
          if (nameValue3 !== null && nameValue3 !== undefined) {
            var nameInstance3 = nameValue3;
            resourceInstance.name = nameInstance3;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            resourceInstance.type = typeInstance2;
          }
          
          var locationValue2 = responseDoc['location'];
          if (locationValue2 !== null && locationValue2 !== undefined) {
            var locationInstance2 = locationValue2;
            resourceInstance.location = locationInstance2;
          }
          
          var tagsSequenceElement2 = responseDoc['tags'];
          if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
            for (var property4 in tagsSequenceElement2) {
              var tagsKey2 = property4;
              var tagsValue2 = tagsSequenceElement2[property4];
              resourceInstance.tags[tagsKey2] = tagsValue2;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} accountName
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountService.prototype.getStorageAccountKeys = function(resourceGroupName, accountName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/Microsoft.Storage/storageAccounts/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/listKeys';
    var queryParameters = [];
    queryParameters.push('api-version=2014-08-01-alpha');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var key1Value = responseDoc['key1'];
          if (key1Value !== null && key1Value !== undefined) {
            var key1Instance = key1Value;
            result.key1 = key1Instance;
          }
          
          var key2Value = responseDoc['key2'];
          if (key2Value !== null && key2Value !== undefined) {
            var key2Instance = key2Value;
            result.key2 = key2Instance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountService.prototype.listStorageAccounts = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/Microsoft.Storage/storageAccounts';
    var queryParameters = [];
    queryParameters.push('api-version=2014-08-01-alpha');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var storageAccountInstance = { tags: {} };
              result.value.push(storageAccountInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { customDomains: [], primaryEndpoints: {}, secondaryEndpoints: {} };
                storageAccountInstance.properties = propertiesInstance;
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var accountTypeValue = propertiesValue['accountType'];
                if (accountTypeValue !== null && accountTypeValue !== undefined) {
                  var accountTypeInstance = accountTypeValue;
                  propertiesInstance.accountType = accountTypeInstance;
                }
                
                var primaryEndpointsSequenceElement = propertiesValue['primaryEndpoints'];
                if (primaryEndpointsSequenceElement !== null && primaryEndpointsSequenceElement !== undefined) {
                  for (var property in primaryEndpointsSequenceElement) {
                    var primaryEndpointsKey = property;
                    var primaryEndpointsValue = primaryEndpointsSequenceElement[property];
                    propertiesInstance.primaryEndpoints[primaryEndpointsKey] = primaryEndpointsValue;
                  }
                }
                
                var primaryLocationValue = propertiesValue['primaryLocation'];
                if (primaryLocationValue !== null && primaryLocationValue !== undefined) {
                  var primaryLocationInstance = primaryLocationValue;
                  propertiesInstance.primaryLocation = primaryLocationInstance;
                }
                
                var statusOfPrimaryValue = propertiesValue['statusOfPrimary'];
                if (statusOfPrimaryValue !== null && statusOfPrimaryValue !== undefined) {
                  var statusOfPrimaryInstance = statusOfPrimaryValue;
                  propertiesInstance.statusOfPrimary = statusOfPrimaryInstance;
                }
                
                var lastGeoFailoverTimeValue = propertiesValue['lastGeoFailoverTime'];
                if (lastGeoFailoverTimeValue !== null && lastGeoFailoverTimeValue !== undefined) {
                  var lastGeoFailoverTimeInstance = lastGeoFailoverTimeValue;
                  propertiesInstance.lastGeoFailoverTime = lastGeoFailoverTimeInstance;
                }
                
                var secondaryLocationValue = propertiesValue['secondaryLocation'];
                if (secondaryLocationValue !== null && secondaryLocationValue !== undefined) {
                  var secondaryLocationInstance = secondaryLocationValue;
                  propertiesInstance.secondaryLocation = secondaryLocationInstance;
                }
                
                var statusOfSecondaryValue = propertiesValue['statusOfSecondary'];
                if (statusOfSecondaryValue !== null && statusOfSecondaryValue !== undefined) {
                  var statusOfSecondaryInstance = statusOfSecondaryValue;
                  propertiesInstance.statusOfSecondary = statusOfSecondaryInstance;
                }
                
                var creationTimeValue = propertiesValue['creationTime'];
                if (creationTimeValue !== null && creationTimeValue !== undefined) {
                  var creationTimeInstance = creationTimeValue;
                  propertiesInstance.creationTime = creationTimeInstance;
                }
                
                var customDomainsArray = propertiesValue['customDomains'];
                if (customDomainsArray !== null && customDomainsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < customDomainsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var customDomainsValue = customDomainsArray[loweredIndex2];
                    var storageCustomDomainInstance = {};
                    propertiesInstance.customDomains.push(storageCustomDomainInstance);
                    
                    var nameValue = customDomainsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      storageCustomDomainInstance.name = nameInstance;
                    }
                    
                    var useSubDomainNameValue = customDomainsValue['useSubDomainName'];
                    if (useSubDomainNameValue !== null && useSubDomainNameValue !== undefined) {
                      var useSubDomainNameInstance = useSubDomainNameValue;
                      storageCustomDomainInstance.useSubDomainName = useSubDomainNameInstance;
                    }
                  }
                }
                
                var secondaryEndpointsSequenceElement = propertiesValue['secondaryEndpoints'];
                if (secondaryEndpointsSequenceElement !== null && secondaryEndpointsSequenceElement !== undefined) {
                  for (var property2 in secondaryEndpointsSequenceElement) {
                    var secondaryEndpointsKey = property2;
                    var secondaryEndpointsValue = secondaryEndpointsSequenceElement[property2];
                    propertiesInstance.secondaryEndpoints[secondaryEndpointsKey] = secondaryEndpointsValue;
                  }
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                storageAccountInstance.id = idInstance;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                storageAccountInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                storageAccountInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                storageAccountInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property3 in tagsSequenceElement) {
                  var tagsKey = property3;
                  var tagsValue = tagsSequenceElement[property3];
                  storageAccountInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountService.prototype.listSubscriptionStorageAccounts = function(callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/providers/Microsoft.Storage/storageAccounts';
    var queryParameters = [];
    queryParameters.push('api-version=2014-08-01-alpha');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { value: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var storageAccountInstance = { tags: {} };
              result.value.push(storageAccountInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { customDomains: [], primaryEndpoints: {}, secondaryEndpoints: {} };
                storageAccountInstance.properties = propertiesInstance;
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var accountTypeValue = propertiesValue['accountType'];
                if (accountTypeValue !== null && accountTypeValue !== undefined) {
                  var accountTypeInstance = accountTypeValue;
                  propertiesInstance.accountType = accountTypeInstance;
                }
                
                var primaryEndpointsSequenceElement = propertiesValue['primaryEndpoints'];
                if (primaryEndpointsSequenceElement !== null && primaryEndpointsSequenceElement !== undefined) {
                  for (var property in primaryEndpointsSequenceElement) {
                    var primaryEndpointsKey = property;
                    var primaryEndpointsValue = primaryEndpointsSequenceElement[property];
                    propertiesInstance.primaryEndpoints[primaryEndpointsKey] = primaryEndpointsValue;
                  }
                }
                
                var primaryLocationValue = propertiesValue['primaryLocation'];
                if (primaryLocationValue !== null && primaryLocationValue !== undefined) {
                  var primaryLocationInstance = primaryLocationValue;
                  propertiesInstance.primaryLocation = primaryLocationInstance;
                }
                
                var statusOfPrimaryValue = propertiesValue['statusOfPrimary'];
                if (statusOfPrimaryValue !== null && statusOfPrimaryValue !== undefined) {
                  var statusOfPrimaryInstance = statusOfPrimaryValue;
                  propertiesInstance.statusOfPrimary = statusOfPrimaryInstance;
                }
                
                var lastGeoFailoverTimeValue = propertiesValue['lastGeoFailoverTime'];
                if (lastGeoFailoverTimeValue !== null && lastGeoFailoverTimeValue !== undefined) {
                  var lastGeoFailoverTimeInstance = lastGeoFailoverTimeValue;
                  propertiesInstance.lastGeoFailoverTime = lastGeoFailoverTimeInstance;
                }
                
                var secondaryLocationValue = propertiesValue['secondaryLocation'];
                if (secondaryLocationValue !== null && secondaryLocationValue !== undefined) {
                  var secondaryLocationInstance = secondaryLocationValue;
                  propertiesInstance.secondaryLocation = secondaryLocationInstance;
                }
                
                var statusOfSecondaryValue = propertiesValue['statusOfSecondary'];
                if (statusOfSecondaryValue !== null && statusOfSecondaryValue !== undefined) {
                  var statusOfSecondaryInstance = statusOfSecondaryValue;
                  propertiesInstance.statusOfSecondary = statusOfSecondaryInstance;
                }
                
                var creationTimeValue = propertiesValue['creationTime'];
                if (creationTimeValue !== null && creationTimeValue !== undefined) {
                  var creationTimeInstance = creationTimeValue;
                  propertiesInstance.creationTime = creationTimeInstance;
                }
                
                var customDomainsArray = propertiesValue['customDomains'];
                if (customDomainsArray !== null && customDomainsArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < customDomainsArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var customDomainsValue = customDomainsArray[loweredIndex2];
                    var storageCustomDomainInstance = {};
                    propertiesInstance.customDomains.push(storageCustomDomainInstance);
                    
                    var nameValue = customDomainsValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      storageCustomDomainInstance.name = nameInstance;
                    }
                    
                    var useSubDomainNameValue = customDomainsValue['useSubDomainName'];
                    if (useSubDomainNameValue !== null && useSubDomainNameValue !== undefined) {
                      var useSubDomainNameInstance = useSubDomainNameValue;
                      storageCustomDomainInstance.useSubDomainName = useSubDomainNameInstance;
                    }
                  }
                }
                
                var secondaryEndpointsSequenceElement = propertiesValue['secondaryEndpoints'];
                if (secondaryEndpointsSequenceElement !== null && secondaryEndpointsSequenceElement !== undefined) {
                  for (var property2 in secondaryEndpointsSequenceElement) {
                    var secondaryEndpointsKey = property2;
                    var secondaryEndpointsValue = secondaryEndpointsSequenceElement[property2];
                    propertiesInstance.secondaryEndpoints[secondaryEndpointsKey] = secondaryEndpointsValue;
                  }
                }
              }
              
              var idValue = valueValue['id'];
              if (idValue !== null && idValue !== undefined) {
                var idInstance = idValue;
                storageAccountInstance.id = idInstance;
              }
              
              var nameValue2 = valueValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                storageAccountInstance.name = nameInstance2;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                storageAccountInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                storageAccountInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property3 in tagsSequenceElement) {
                  var tagsKey = property3;
                  var tagsValue = tagsSequenceElement[property3];
                  storageAccountInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
          
          var nextLinkValue = responseDoc['nextLink'];
          if (nextLinkValue !== null && nextLinkValue !== undefined) {
            var nextLinkInstance = nextLinkValue;
            result.nextLink = nextLinkInstance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} accountName
   * 
   * @param {StorageAccount} storageAccount
   * 
   * @param {StorageAccountProperties} [storageAccount.properties]
   * 
   * @param {string} [storageAccount.properties.provisioningState]
   * 
   * @param {string} [storageAccount.properties.accountType]
   * 
   * @param {object} [storageAccount.properties.primaryEndpoints]
   * 
   * @param {string} [storageAccount.properties.primaryLocation]
   * 
   * @param {string} [storageAccount.properties.statusOfPrimary]
   * 
   * @param {string} [storageAccount.properties.lastGeoFailoverTime]
   * 
   * @param {string} [storageAccount.properties.secondaryLocation]
   * 
   * @param {string} [storageAccount.properties.statusOfSecondary]
   * 
   * @param {string} [storageAccount.properties.creationTime]
   * 
   * @param {array} [storageAccount.properties.customDomains]
   * 
   * @param {object} [storageAccount.properties.secondaryEndpoints]
   * 
   * @param {string} [storageAccount.id]
   * 
   * @param {string} [storageAccount.name]
   * 
   * @param {string} [storageAccount.type]
   * 
   * @param {string} [storageAccount.location]
   * 
   * @param {object} [storageAccount.tags]
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountService.prototype.patchStorageAccount = function(resourceGroupName, accountName, storageAccount, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (storageAccount === null || storageAccount === undefined) {
      return callback(new Error('storageAccount cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/Microsoft.Storage/storageAccounts/';
    url2 = url2 + encodeURIComponent(accountName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-08-01-alpha');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PATCH';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var storageAccountValue = {};
    requestDoc = storageAccountValue;
    
    if (storageAccount.properties !== null && storageAccount.properties !== undefined) {
      var propertiesValue = {};
      storageAccountValue['properties'] = propertiesValue;
      
      if (storageAccount.properties.provisioningState !== null && storageAccount.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = storageAccount.properties.provisioningState;
      }
      
      if (storageAccount.properties.accountType !== null && storageAccount.properties.accountType !== undefined) {
        propertiesValue['accountType'] = storageAccount.properties.accountType;
      }
      
      if (storageAccount.properties.primaryEndpoints !== null && storageAccount.properties.primaryEndpoints !== undefined) {
        var primaryEndpointsDictionary = {};
        for (var primaryEndpointsKey in storageAccount.properties.primaryEndpoints) {
          var primaryEndpointsValue = storageAccount.properties.primaryEndpoints[primaryEndpointsKey];
          primaryEndpointsDictionary[primaryEndpointsKey] = primaryEndpointsValue;
        }
        propertiesValue['primaryEndpoints'] = primaryEndpointsDictionary;
      }
      
      if (storageAccount.properties.primaryLocation !== null && storageAccount.properties.primaryLocation !== undefined) {
        propertiesValue['primaryLocation'] = storageAccount.properties.primaryLocation;
      }
      
      if (storageAccount.properties.statusOfPrimary !== null && storageAccount.properties.statusOfPrimary !== undefined) {
        propertiesValue['statusOfPrimary'] = storageAccount.properties.statusOfPrimary;
      }
      
      if (storageAccount.properties.lastGeoFailoverTime !== null && storageAccount.properties.lastGeoFailoverTime !== undefined) {
        propertiesValue['lastGeoFailoverTime'] = storageAccount.properties.lastGeoFailoverTime;
      }
      
      if (storageAccount.properties.secondaryLocation !== null && storageAccount.properties.secondaryLocation !== undefined) {
        propertiesValue['secondaryLocation'] = storageAccount.properties.secondaryLocation;
      }
      
      if (storageAccount.properties.statusOfSecondary !== null && storageAccount.properties.statusOfSecondary !== undefined) {
        propertiesValue['statusOfSecondary'] = storageAccount.properties.statusOfSecondary;
      }
      
      if (storageAccount.properties.creationTime !== null && storageAccount.properties.creationTime !== undefined) {
        propertiesValue['creationTime'] = storageAccount.properties.creationTime;
      }
      
      if (storageAccount.properties.customDomains !== null && storageAccount.properties.customDomains !== undefined) {
        var customDomainsArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < storageAccount.properties.customDomains.length; loweredIndex1 = loweredIndex1 + 1) {
          var customDomainsItem = storageAccount.properties.customDomains[loweredIndex1];
          var storageCustomDomainValue = {};
          customDomainsArray.push(storageCustomDomainValue);
          
          if (customDomainsItem.name !== null && customDomainsItem.name !== undefined) {
            storageCustomDomainValue['name'] = customDomainsItem.name;
          }
          
          if (customDomainsItem.useSubDomainName !== null && customDomainsItem.useSubDomainName !== undefined) {
            storageCustomDomainValue['useSubDomainName'] = customDomainsItem.useSubDomainName;
          }
        }
        propertiesValue['customDomains'] = customDomainsArray;
      }
      
      if (storageAccount.properties.secondaryEndpoints !== null && storageAccount.properties.secondaryEndpoints !== undefined) {
        var secondaryEndpointsDictionary = {};
        for (var secondaryEndpointsKey in storageAccount.properties.secondaryEndpoints) {
          var secondaryEndpointsValue = storageAccount.properties.secondaryEndpoints[secondaryEndpointsKey];
          secondaryEndpointsDictionary[secondaryEndpointsKey] = secondaryEndpointsValue;
        }
        propertiesValue['secondaryEndpoints'] = secondaryEndpointsDictionary;
      }
    }
    
    if (storageAccount.id !== null && storageAccount.id !== undefined) {
      storageAccountValue['id'] = storageAccount.id;
    }
    
    if (storageAccount.name !== null && storageAccount.name !== undefined) {
      storageAccountValue['name'] = storageAccount.name;
    }
    
    if (storageAccount.type !== null && storageAccount.type !== undefined) {
      storageAccountValue['type'] = storageAccount.type;
    }
    
    if (storageAccount.location !== null && storageAccount.location !== undefined) {
      storageAccountValue['location'] = storageAccount.location;
    }
    
    if (storageAccount.tags !== null && storageAccount.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in storageAccount.tags) {
        var tagsValue = storageAccount.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      storageAccountValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var storageAccountInstance = { tags: {} };
          result.storageAccount = storageAccountInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = { customDomains: [], primaryEndpoints: {}, secondaryEndpoints: {} };
            storageAccountInstance.properties = propertiesInstance;
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var accountTypeValue = propertiesValue2['accountType'];
            if (accountTypeValue !== null && accountTypeValue !== undefined) {
              var accountTypeInstance = accountTypeValue;
              propertiesInstance.accountType = accountTypeInstance;
            }
            
            var primaryEndpointsSequenceElement = propertiesValue2['primaryEndpoints'];
            if (primaryEndpointsSequenceElement !== null && primaryEndpointsSequenceElement !== undefined) {
              for (var property in primaryEndpointsSequenceElement) {
                var primaryEndpointsKey2 = property;
                var primaryEndpointsValue2 = primaryEndpointsSequenceElement[property];
                propertiesInstance.primaryEndpoints[primaryEndpointsKey2] = primaryEndpointsValue2;
              }
            }
            
            var primaryLocationValue = propertiesValue2['primaryLocation'];
            if (primaryLocationValue !== null && primaryLocationValue !== undefined) {
              var primaryLocationInstance = primaryLocationValue;
              propertiesInstance.primaryLocation = primaryLocationInstance;
            }
            
            var statusOfPrimaryValue = propertiesValue2['statusOfPrimary'];
            if (statusOfPrimaryValue !== null && statusOfPrimaryValue !== undefined) {
              var statusOfPrimaryInstance = statusOfPrimaryValue;
              propertiesInstance.statusOfPrimary = statusOfPrimaryInstance;
            }
            
            var lastGeoFailoverTimeValue = propertiesValue2['lastGeoFailoverTime'];
            if (lastGeoFailoverTimeValue !== null && lastGeoFailoverTimeValue !== undefined) {
              var lastGeoFailoverTimeInstance = lastGeoFailoverTimeValue;
              propertiesInstance.lastGeoFailoverTime = lastGeoFailoverTimeInstance;
            }
            
            var secondaryLocationValue = propertiesValue2['secondaryLocation'];
            if (secondaryLocationValue !== null && secondaryLocationValue !== undefined) {
              var secondaryLocationInstance = secondaryLocationValue;
              propertiesInstance.secondaryLocation = secondaryLocationInstance;
            }
            
            var statusOfSecondaryValue = propertiesValue2['statusOfSecondary'];
            if (statusOfSecondaryValue !== null && statusOfSecondaryValue !== undefined) {
              var statusOfSecondaryInstance = statusOfSecondaryValue;
              propertiesInstance.statusOfSecondary = statusOfSecondaryInstance;
            }
            
            var creationTimeValue = propertiesValue2['creationTime'];
            if (creationTimeValue !== null && creationTimeValue !== undefined) {
              var creationTimeInstance = creationTimeValue;
              propertiesInstance.creationTime = creationTimeInstance;
            }
            
            var customDomainsArray2 = propertiesValue2['customDomains'];
            if (customDomainsArray2 !== null && customDomainsArray2 !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < customDomainsArray2.length; loweredIndex2 = loweredIndex2 + 1) {
                var customDomainsValue = customDomainsArray2[loweredIndex2];
                var storageCustomDomainInstance = {};
                propertiesInstance.customDomains.push(storageCustomDomainInstance);
                
                var nameValue = customDomainsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  storageCustomDomainInstance.name = nameInstance;
                }
                
                var useSubDomainNameValue = customDomainsValue['useSubDomainName'];
                if (useSubDomainNameValue !== null && useSubDomainNameValue !== undefined) {
                  var useSubDomainNameInstance = useSubDomainNameValue;
                  storageCustomDomainInstance.useSubDomainName = useSubDomainNameInstance;
                }
              }
            }
            
            var secondaryEndpointsSequenceElement = propertiesValue2['secondaryEndpoints'];
            if (secondaryEndpointsSequenceElement !== null && secondaryEndpointsSequenceElement !== undefined) {
              for (var property2 in secondaryEndpointsSequenceElement) {
                var secondaryEndpointsKey2 = property2;
                var secondaryEndpointsValue2 = secondaryEndpointsSequenceElement[property2];
                propertiesInstance.secondaryEndpoints[secondaryEndpointsKey2] = secondaryEndpointsValue2;
              }
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            storageAccountInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            storageAccountInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            storageAccountInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            storageAccountInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property3 in tagsSequenceElement) {
              var tagsKey2 = property3;
              var tagsValue2 = tagsSequenceElement[property3];
              storageAccountInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var locationUrlValue = responseDoc['LocationUrl'];
          if (locationUrlValue !== null && locationUrlValue !== undefined) {
            var locationUrlInstance = locationUrlValue;
            result.locationUrl = locationUrlInstance;
          }
          
          var resourceInstance = { tags: {} };
          result.resource = resourceInstance;
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            resourceInstance.id = idInstance2;
          }
          
          var nameValue3 = responseDoc['name'];
          if (nameValue3 !== null && nameValue3 !== undefined) {
            var nameInstance3 = nameValue3;
            resourceInstance.name = nameInstance3;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            resourceInstance.type = typeInstance2;
          }
          
          var locationValue2 = responseDoc['location'];
          if (locationValue2 !== null && locationValue2 !== undefined) {
            var locationInstance2 = locationValue2;
            resourceInstance.location = locationInstance2;
          }
          
          var tagsSequenceElement2 = responseDoc['tags'];
          if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
            for (var property4 in tagsSequenceElement2) {
              var tagsKey3 = property4;
              var tagsValue3 = tagsSequenceElement2[property4];
              resourceInstance.tags[tagsKey3] = tagsValue3;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} accountName
   * 
   * @param {StorageAccount} storageAccount
   * 
   * @param {StorageAccountProperties} [storageAccount.properties]
   * 
   * @param {string} [storageAccount.properties.provisioningState]
   * 
   * @param {string} [storageAccount.properties.accountType]
   * 
   * @param {object} [storageAccount.properties.primaryEndpoints]
   * 
   * @param {string} [storageAccount.properties.primaryLocation]
   * 
   * @param {string} [storageAccount.properties.statusOfPrimary]
   * 
   * @param {string} [storageAccount.properties.lastGeoFailoverTime]
   * 
   * @param {string} [storageAccount.properties.secondaryLocation]
   * 
   * @param {string} [storageAccount.properties.statusOfSecondary]
   * 
   * @param {string} [storageAccount.properties.creationTime]
   * 
   * @param {array} [storageAccount.properties.customDomains]
   * 
   * @param {object} [storageAccount.properties.secondaryEndpoints]
   * 
   * @param {string} [storageAccount.id]
   * 
   * @param {string} [storageAccount.name]
   * 
   * @param {string} [storageAccount.type]
   * 
   * @param {string} [storageAccount.location]
   * 
   * @param {object} [storageAccount.tags]
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountService.prototype.putStorageAccount = function(resourceGroupName, accountName, storageAccount, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (storageAccount === null || storageAccount === undefined) {
      return callback(new Error('storageAccount cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/Microsoft.Storage/storageAccounts/';
    url2 = url2 + encodeURIComponent(accountName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-08-01-alpha');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var storageAccountValue = {};
    requestDoc = storageAccountValue;
    
    if (storageAccount.properties !== null && storageAccount.properties !== undefined) {
      var propertiesValue = {};
      storageAccountValue['properties'] = propertiesValue;
      
      if (storageAccount.properties.provisioningState !== null && storageAccount.properties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = storageAccount.properties.provisioningState;
      }
      
      if (storageAccount.properties.accountType !== null && storageAccount.properties.accountType !== undefined) {
        propertiesValue['accountType'] = storageAccount.properties.accountType;
      }
      
      if (storageAccount.properties.primaryEndpoints !== null && storageAccount.properties.primaryEndpoints !== undefined) {
        var primaryEndpointsDictionary = {};
        for (var primaryEndpointsKey in storageAccount.properties.primaryEndpoints) {
          var primaryEndpointsValue = storageAccount.properties.primaryEndpoints[primaryEndpointsKey];
          primaryEndpointsDictionary[primaryEndpointsKey] = primaryEndpointsValue;
        }
        propertiesValue['primaryEndpoints'] = primaryEndpointsDictionary;
      }
      
      if (storageAccount.properties.primaryLocation !== null && storageAccount.properties.primaryLocation !== undefined) {
        propertiesValue['primaryLocation'] = storageAccount.properties.primaryLocation;
      }
      
      if (storageAccount.properties.statusOfPrimary !== null && storageAccount.properties.statusOfPrimary !== undefined) {
        propertiesValue['statusOfPrimary'] = storageAccount.properties.statusOfPrimary;
      }
      
      if (storageAccount.properties.lastGeoFailoverTime !== null && storageAccount.properties.lastGeoFailoverTime !== undefined) {
        propertiesValue['lastGeoFailoverTime'] = storageAccount.properties.lastGeoFailoverTime;
      }
      
      if (storageAccount.properties.secondaryLocation !== null && storageAccount.properties.secondaryLocation !== undefined) {
        propertiesValue['secondaryLocation'] = storageAccount.properties.secondaryLocation;
      }
      
      if (storageAccount.properties.statusOfSecondary !== null && storageAccount.properties.statusOfSecondary !== undefined) {
        propertiesValue['statusOfSecondary'] = storageAccount.properties.statusOfSecondary;
      }
      
      if (storageAccount.properties.creationTime !== null && storageAccount.properties.creationTime !== undefined) {
        propertiesValue['creationTime'] = storageAccount.properties.creationTime;
      }
      
      if (storageAccount.properties.customDomains !== null && storageAccount.properties.customDomains !== undefined) {
        var customDomainsArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < storageAccount.properties.customDomains.length; loweredIndex1 = loweredIndex1 + 1) {
          var customDomainsItem = storageAccount.properties.customDomains[loweredIndex1];
          var storageCustomDomainValue = {};
          customDomainsArray.push(storageCustomDomainValue);
          
          if (customDomainsItem.name !== null && customDomainsItem.name !== undefined) {
            storageCustomDomainValue['name'] = customDomainsItem.name;
          }
          
          if (customDomainsItem.useSubDomainName !== null && customDomainsItem.useSubDomainName !== undefined) {
            storageCustomDomainValue['useSubDomainName'] = customDomainsItem.useSubDomainName;
          }
        }
        propertiesValue['customDomains'] = customDomainsArray;
      }
      
      if (storageAccount.properties.secondaryEndpoints !== null && storageAccount.properties.secondaryEndpoints !== undefined) {
        var secondaryEndpointsDictionary = {};
        for (var secondaryEndpointsKey in storageAccount.properties.secondaryEndpoints) {
          var secondaryEndpointsValue = storageAccount.properties.secondaryEndpoints[secondaryEndpointsKey];
          secondaryEndpointsDictionary[secondaryEndpointsKey] = secondaryEndpointsValue;
        }
        propertiesValue['secondaryEndpoints'] = secondaryEndpointsDictionary;
      }
    }
    
    if (storageAccount.id !== null && storageAccount.id !== undefined) {
      storageAccountValue['id'] = storageAccount.id;
    }
    
    if (storageAccount.name !== null && storageAccount.name !== undefined) {
      storageAccountValue['name'] = storageAccount.name;
    }
    
    if (storageAccount.type !== null && storageAccount.type !== undefined) {
      storageAccountValue['type'] = storageAccount.type;
    }
    
    if (storageAccount.location !== null && storageAccount.location !== undefined) {
      storageAccountValue['location'] = storageAccount.location;
    }
    
    if (storageAccount.tags !== null && storageAccount.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in storageAccount.tags) {
        var tagsValue = storageAccount.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      storageAccountValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201 || statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var storageAccountInstance = { tags: {} };
          result.storageAccount = storageAccountInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = { customDomains: [], primaryEndpoints: {}, secondaryEndpoints: {} };
            storageAccountInstance.properties = propertiesInstance;
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var accountTypeValue = propertiesValue2['accountType'];
            if (accountTypeValue !== null && accountTypeValue !== undefined) {
              var accountTypeInstance = accountTypeValue;
              propertiesInstance.accountType = accountTypeInstance;
            }
            
            var primaryEndpointsSequenceElement = propertiesValue2['primaryEndpoints'];
            if (primaryEndpointsSequenceElement !== null && primaryEndpointsSequenceElement !== undefined) {
              for (var property in primaryEndpointsSequenceElement) {
                var primaryEndpointsKey2 = property;
                var primaryEndpointsValue2 = primaryEndpointsSequenceElement[property];
                propertiesInstance.primaryEndpoints[primaryEndpointsKey2] = primaryEndpointsValue2;
              }
            }
            
            var primaryLocationValue = propertiesValue2['primaryLocation'];
            if (primaryLocationValue !== null && primaryLocationValue !== undefined) {
              var primaryLocationInstance = primaryLocationValue;
              propertiesInstance.primaryLocation = primaryLocationInstance;
            }
            
            var statusOfPrimaryValue = propertiesValue2['statusOfPrimary'];
            if (statusOfPrimaryValue !== null && statusOfPrimaryValue !== undefined) {
              var statusOfPrimaryInstance = statusOfPrimaryValue;
              propertiesInstance.statusOfPrimary = statusOfPrimaryInstance;
            }
            
            var lastGeoFailoverTimeValue = propertiesValue2['lastGeoFailoverTime'];
            if (lastGeoFailoverTimeValue !== null && lastGeoFailoverTimeValue !== undefined) {
              var lastGeoFailoverTimeInstance = lastGeoFailoverTimeValue;
              propertiesInstance.lastGeoFailoverTime = lastGeoFailoverTimeInstance;
            }
            
            var secondaryLocationValue = propertiesValue2['secondaryLocation'];
            if (secondaryLocationValue !== null && secondaryLocationValue !== undefined) {
              var secondaryLocationInstance = secondaryLocationValue;
              propertiesInstance.secondaryLocation = secondaryLocationInstance;
            }
            
            var statusOfSecondaryValue = propertiesValue2['statusOfSecondary'];
            if (statusOfSecondaryValue !== null && statusOfSecondaryValue !== undefined) {
              var statusOfSecondaryInstance = statusOfSecondaryValue;
              propertiesInstance.statusOfSecondary = statusOfSecondaryInstance;
            }
            
            var creationTimeValue = propertiesValue2['creationTime'];
            if (creationTimeValue !== null && creationTimeValue !== undefined) {
              var creationTimeInstance = creationTimeValue;
              propertiesInstance.creationTime = creationTimeInstance;
            }
            
            var customDomainsArray2 = propertiesValue2['customDomains'];
            if (customDomainsArray2 !== null && customDomainsArray2 !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < customDomainsArray2.length; loweredIndex2 = loweredIndex2 + 1) {
                var customDomainsValue = customDomainsArray2[loweredIndex2];
                var storageCustomDomainInstance = {};
                propertiesInstance.customDomains.push(storageCustomDomainInstance);
                
                var nameValue = customDomainsValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  storageCustomDomainInstance.name = nameInstance;
                }
                
                var useSubDomainNameValue = customDomainsValue['useSubDomainName'];
                if (useSubDomainNameValue !== null && useSubDomainNameValue !== undefined) {
                  var useSubDomainNameInstance = useSubDomainNameValue;
                  storageCustomDomainInstance.useSubDomainName = useSubDomainNameInstance;
                }
              }
            }
            
            var secondaryEndpointsSequenceElement = propertiesValue2['secondaryEndpoints'];
            if (secondaryEndpointsSequenceElement !== null && secondaryEndpointsSequenceElement !== undefined) {
              for (var property2 in secondaryEndpointsSequenceElement) {
                var secondaryEndpointsKey2 = property2;
                var secondaryEndpointsValue2 = secondaryEndpointsSequenceElement[property2];
                propertiesInstance.secondaryEndpoints[secondaryEndpointsKey2] = secondaryEndpointsValue2;
              }
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            storageAccountInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            storageAccountInstance.name = nameInstance2;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            storageAccountInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            storageAccountInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property3 in tagsSequenceElement) {
              var tagsKey2 = property3;
              var tagsValue2 = tagsSequenceElement[property3];
              storageAccountInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var locationUrlValue = responseDoc['LocationUrl'];
          if (locationUrlValue !== null && locationUrlValue !== undefined) {
            var locationUrlInstance = locationUrlValue;
            result.locationUrl = locationUrlInstance;
          }
          
          var resourceInstance = { tags: {} };
          result.resource = resourceInstance;
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            resourceInstance.id = idInstance2;
          }
          
          var nameValue3 = responseDoc['name'];
          if (nameValue3 !== null && nameValue3 !== undefined) {
            var nameInstance3 = nameValue3;
            resourceInstance.name = nameInstance3;
          }
          
          var typeValue2 = responseDoc['type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            resourceInstance.type = typeInstance2;
          }
          
          var locationValue2 = responseDoc['location'];
          if (locationValue2 !== null && locationValue2 !== undefined) {
            var locationInstance2 = locationValue2;
            resourceInstance.location = locationInstance2;
          }
          
          var tagsSequenceElement2 = responseDoc['tags'];
          if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
            for (var property4 in tagsSequenceElement2) {
              var tagsKey3 = property4;
              var tagsValue3 = tagsSequenceElement2[property4];
              resourceInstance.tags[tagsKey3] = tagsValue3;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.locationUrl = response.headers['location'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName
   * 
   * @param {string} accountName
   * 
   * @param {RegenerateKey} regenerateKey
   * 
   * @param {string} [regenerateKey.keyName]
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  StorageAccountService.prototype.regenerateStorageAccountKey = function(resourceGroupName, accountName, regenerateKey, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (accountName === null || accountName === undefined) {
      return callback(new Error('accountName cannot be null.'));
    }
    if (regenerateKey === null || regenerateKey === undefined) {
      return callback(new Error('regenerateKey cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/Microsoft.Storage/storageAccounts/';
    url2 = url2 + encodeURIComponent(accountName);
    url2 = url2 + '/regenerateKey';
    var queryParameters = [];
    queryParameters.push('api-version=2014-08-01-alpha');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var regenerateKeyValue = {};
    requestDoc = regenerateKeyValue;
    
    if (regenerateKey.keyName !== null && regenerateKey.keyName !== undefined) {
      regenerateKeyValue['keyName'] = regenerateKey.keyName;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var key1Value = responseDoc['key1'];
          if (key1Value !== null && key1Value !== undefined) {
            var key1Instance = key1Value;
            result.key1 = key1Instance;
          }
          
          var key2Value = responseDoc['key2'];
          if (key2Value !== null && key2Value !== undefined) {
            var key2Instance = key2Value;
            result.key2 = key2Instance;
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return StorageAccountService;
})();

var SubscriptionService = ( /** @lends SubscriptionService */ function() {
  /**
   * @class
   * Your documentation here.  (see
   * http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for more
   * information)
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [StorageManagementClient] {@link
   * StorageManagementClient~StorageManagementClient}.
   * See [subscriptionService] {@link
   * StorageManagementClient~StorageManagementClient#subscriptionService}.
   * Initializes a new instance of the SubscriptionService class.
   * @constructor
   * 
   * @param {StorageManagementClient} client Reference to the service client.
   */
  function SubscriptionService(client) {
    this.client = client;
  }
  
  
  return SubscriptionService;
})();
