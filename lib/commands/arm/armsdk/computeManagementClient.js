/* jshint latedef:false */
/* jshint forin:false */
/* jshint noempty:false */

// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

'use strict';

var util = require('util');
var azureCommon = require('azure-common');
var Service = azureCommon.Service;
var WebResource = azureCommon.WebResource;

var ComputeManagementClient = ( /** @lends ComputeManagementClient */ function() {
  /**
   * @class
   * The Compute Management Client.
   * Initializes a new instance of the ComputeManagementClient class.
   * @constructor
   * 
   * @param {SubscriptionCloudCredentials} credentials Gets subscription
   * credentials which uniquely identify Microsoft Azure subscription. The
   * subscription ID forms part of the URI for every service call.
   * 
   * @param {string} [credentials.subscriptionId]
   * 
   * @param {string} [baseUri] Gets the URI used as the base for all cloud
   * service requests.
   * 
   * @param {Array} filters
   */
  function ComputeManagementClient(credentials, baseUri, filters) {
    if (credentials === null || credentials === undefined) {
      throw new Error('credentials cannot be null.');
    }
    
    ComputeManagementClient['super_'].call(this, credentials, filters);
    
    this.credentials = credentials;
    this.baseUri = baseUri;
    if (this.baseUri === null || this.baseUri === undefined) {
      this.baseUri = 'https://management.azure.com';
    }
    if (this.apiVersion === null || this.apiVersion === undefined) {
      this.apiVersion = '2014-12-01-preview';
    }
    if (this.longRunningOperationInitialTimeout === null || this.longRunningOperationInitialTimeout === undefined) {
      this.longRunningOperationInitialTimeout = -1;
    }
    if (this.longRunningOperationRetryTimeout === null || this.longRunningOperationRetryTimeout === undefined) {
      this.longRunningOperationRetryTimeout = -1;
    }
    /**
     * Provides an instance of the
     * [AvailabilitySetOperations](-AvailabilitySetOperations.html) object.
     * @type {object}
     */
    this.availabilitySets = new AvailabilitySetOperations(this);
    /**
     * Provides an instance of the
     * [VirtualMachineExtensionOperations](-VirtualMachineExtensionOperations.html)
     * object.
     * @type {object}
     */
    this.virtualMachineExtensions = new VirtualMachineExtensionOperations(this);
    /**
     * Provides an instance of the
     * [VirtualMachineOperations](-VirtualMachineOperations.html) object.
     * @type {object}
     */
    this.virtualMachines = new VirtualMachineOperations(this);
  }
  
  util.inherits(ComputeManagementClient, Service);
  
  /**
   * The Get Operation Status operation returns the status of the specified
   * operation. After calling an asynchronous operation, you can call Get
   * Operation Status to determine whether the operation has succeeded,
   * failed, or is still in progress.
   * 
   * @param {string} operationStatusLink Location value returned by the Begin
   * operation.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  ComputeManagementClient.prototype.getLongRunningOperationStatus = function(operationStatusLink, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (operationStatusLink === null || operationStatusLink === undefined) {
      return callback(new Error('operationStatusLink cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + operationStatusLink;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['x-ms-version'] = '2014-12-01-preview';
    
    // Send Request
    return this.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 202) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            result.id = idInstance;
          }
          
          var statusValue = responseDoc['status'];
          if (statusValue !== null && statusValue !== undefined) {
            var statusInstance = statusValue;
            result.status = statusInstance;
          }
          
          var startTimeValue = responseDoc['startTime'];
          if (startTimeValue !== null && startTimeValue !== undefined) {
            var startTimeInstance = startTimeValue;
            result.startTime = startTimeInstance;
          }
          
          var endTimeValue = responseDoc['endTime'];
          if (endTimeValue !== null && endTimeValue !== undefined) {
            var endTimeInstance = endTimeValue;
            result.endTime = endTimeInstance;
          }
          
          var errorValue = responseDoc['error'];
          if (errorValue !== null && errorValue !== undefined) {
            var errorInstance = { details: [] };
            result.error = errorInstance;
            
            var detailsArray = errorValue['details'];
            if (detailsArray !== null && detailsArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < detailsArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var detailsValue = detailsArray[loweredIndex1];
                var apiErrorBaseInstance = {};
                errorInstance.details.push(apiErrorBaseInstance);
                
                var codeValue = detailsValue['code'];
                if (codeValue !== null && codeValue !== undefined) {
                  var codeInstance = codeValue;
                  apiErrorBaseInstance.code = codeInstance;
                }
                
                var targetValue = detailsValue['target'];
                if (targetValue !== null && targetValue !== undefined) {
                  var targetInstance = targetValue;
                  apiErrorBaseInstance.target = targetInstance;
                }
                
                var messageValue = detailsValue['message'];
                if (messageValue !== null && messageValue !== undefined) {
                  var messageInstance = messageValue;
                  apiErrorBaseInstance.message = messageInstance;
                }
              }
            }
            
            var innererrorValue = errorValue['innererror'];
            if (innererrorValue !== null && innererrorValue !== undefined) {
              var innererrorInstance = {};
              errorInstance.innerError = innererrorInstance;
              
              var exceptiontypeValue = innererrorValue['exceptiontype'];
              if (exceptiontypeValue !== null && exceptiontypeValue !== undefined) {
                var exceptiontypeInstance = exceptiontypeValue;
                innererrorInstance.exceptionType = exceptiontypeInstance;
              }
              
              var errordetailValue = innererrorValue['errordetail'];
              if (errordetailValue !== null && errordetailValue !== undefined) {
                var errordetailInstance = errordetailValue;
                innererrorInstance.errorDetail = errordetailInstance;
              }
            }
            
            var codeValue2 = errorValue['code'];
            if (codeValue2 !== null && codeValue2 !== undefined) {
              var codeInstance2 = codeValue2;
              errorInstance.code = codeInstance2;
            }
            
            var targetValue2 = errorValue['target'];
            if (targetValue2 !== null && targetValue2 !== undefined) {
              var targetInstance2 = targetValue2;
              errorInstance.target = targetInstance2;
            }
            
            var messageValue2 = errorValue['message'];
            if (messageValue2 !== null && messageValue2 !== undefined) {
              var messageInstance2 = messageValue2;
              errorInstance.message = messageInstance2;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return ComputeManagementClient;
})();
exports.ComputeManagementClient = ComputeManagementClient;

var AvailabilitySetOperations = ( /** @lends AvailabilitySetOperations */ function() {
  /**
   * @class
   * Operations for managing the availability sets in compute management.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ComputeManagementClient] {@link
   * ComputeManagementClient~ComputeManagementClient}.
   * See [availabilitySets] {@link
   * ComputeManagementClient~ComputeManagementClient#availabilitySets}.
   * Initializes a new instance of the AvailabilitySetOperations class.
   * @constructor
   * 
   * @param {ComputeManagementClient} client Reference to the service client.
   */
  function AvailabilitySetOperations(client) {
    this.client = client;
  }
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {AvailabilitySetCreateOrUpdateParameters} parameters Parameters
   * supplied to the Create Availability Set operation.
   * 
   * @param {AvailabilitySet} parameters.availabilitySet Gets or sets
   * information about an Availability Set being created or updated.
   * 
   * @param {AvailabilitySetProperties} [parameters.availabilitySet.properties]
   * Availability Set properties.
   * 
   * @param {number}
   * [parameters.availabilitySet.properties.platformUpdateDomainCount] Update
   * Domain count.
   * 
   * @param {number}
   * [parameters.availabilitySet.properties.platformFaultDomainCount] Fault
   * Domain count.
   * 
   * @param {array}
   * [parameters.availabilitySet.properties.virtualMachinesReferences] A list
   * containing reference to all Virtual Machines  created under this
   * Availability Set.
   * 
   * @param {array} [parameters.availabilitySet.properties.statuses] The
   * resource status information.
   * 
   * @param {string} [parameters.availabilitySet.id] Resource reference Id.
   * 
   * @param {string} [parameters.availabilitySet.name] The name of the resource.
   * 
   * @param {string} [parameters.availabilitySet.type] Gets or sets the type of
   * the resource, such as 'Microsoft.Compute/virtualMachines'.
   * 
   * @param {string} [parameters.availabilitySet.location] Gets or sets the
   * location of the resource.
   * 
   * @param {object} [parameters.availabilitySet.tags] Gets or sets the tags
   * attached to the resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  AvailabilitySetOperations.prototype.createOrUpdate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.availabilitySet === null || parameters.availabilitySet === undefined) {
      return callback(new Error('parameters.availabilitySet cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/availabilitySets/';
    if (parameters.availabilitySet.name !== null && parameters.availabilitySet.name !== undefined) {
      url2 = url2 + encodeURIComponent(parameters.availabilitySet.name);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var availabilitySetCreateOrUpdateParametersValue = {};
    requestDoc = availabilitySetCreateOrUpdateParametersValue;
    
    if (parameters.availabilitySet.properties !== null && parameters.availabilitySet.properties !== undefined) {
      var propertiesValue = {};
      availabilitySetCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.availabilitySet.properties.platformUpdateDomainCount !== null && parameters.availabilitySet.properties.platformUpdateDomainCount !== undefined) {
        propertiesValue['platformUpdateDomainCount'] = parameters.availabilitySet.properties.platformUpdateDomainCount;
      }
      
      if (parameters.availabilitySet.properties.platformFaultDomainCount !== null && parameters.availabilitySet.properties.platformFaultDomainCount !== undefined) {
        propertiesValue['platformFaultDomainCount'] = parameters.availabilitySet.properties.platformFaultDomainCount;
      }
      
      if (parameters.availabilitySet.properties.virtualMachinesReferences !== null && parameters.availabilitySet.properties.virtualMachinesReferences !== undefined) {
        var virtualMachinesArray = [];
        for (var loweredIndex1 = 0; loweredIndex1 < parameters.availabilitySet.properties.virtualMachinesReferences.length; loweredIndex1 = loweredIndex1 + 1) {
          var virtualMachinesItem = parameters.availabilitySet.properties.virtualMachinesReferences[loweredIndex1];
          var virtualMachineReferenceValue = {};
          virtualMachinesArray.push(virtualMachineReferenceValue);
          
          if (virtualMachinesItem.referenceUri !== null && virtualMachinesItem.referenceUri !== undefined) {
            virtualMachineReferenceValue['id'] = virtualMachinesItem.referenceUri;
          }
        }
        propertiesValue['virtualMachines'] = virtualMachinesArray;
      }
      
      if (parameters.availabilitySet.properties.statuses !== null && parameters.availabilitySet.properties.statuses !== undefined) {
        var statusesArray = [];
        for (var loweredIndex2 = 0; loweredIndex2 < parameters.availabilitySet.properties.statuses.length; loweredIndex2 = loweredIndex2 + 1) {
          var statusesItem = parameters.availabilitySet.properties.statuses[loweredIndex2];
          
          if (statusesItem.code !== null && statusesItem.code !== undefined) {
            requestDoc['code'] = statusesItem.code;
          }
          
          if (statusesItem.level !== null && statusesItem.level !== undefined) {
            requestDoc['level'] = statusesItem.level;
          }
          
          if (statusesItem.displayStatus !== null && statusesItem.displayStatus !== undefined) {
            requestDoc['displayStatus'] = statusesItem.displayStatus;
          }
          
          if (statusesItem.message !== null && statusesItem.message !== undefined) {
            requestDoc['message'] = statusesItem.message;
          }
          
          if (statusesItem.time !== null && statusesItem.time !== undefined) {
            requestDoc['time'] = statusesItem.time;
          }
        }
        propertiesValue['statuses'] = statusesArray;
      }
    }
    
    if (parameters.availabilitySet.id !== null && parameters.availabilitySet.id !== undefined) {
      availabilitySetCreateOrUpdateParametersValue['id'] = parameters.availabilitySet.id;
    }
    
    if (parameters.availabilitySet.name !== null && parameters.availabilitySet.name !== undefined) {
      availabilitySetCreateOrUpdateParametersValue['name'] = parameters.availabilitySet.name;
    }
    
    if (parameters.availabilitySet.type !== null && parameters.availabilitySet.type !== undefined) {
      availabilitySetCreateOrUpdateParametersValue['type'] = parameters.availabilitySet.type;
    }
    
    if (parameters.availabilitySet.location !== null && parameters.availabilitySet.location !== undefined) {
      availabilitySetCreateOrUpdateParametersValue['location'] = parameters.availabilitySet.location;
    }
    
    if (parameters.availabilitySet.tags !== null && parameters.availabilitySet.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.availabilitySet.tags) {
        var tagsValue = parameters.availabilitySet.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      availabilitySetCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { tags: {} };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var availabilitySetInstance = { tags: {} };
          result.availabilitySet = availabilitySetInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = { statuses: [], virtualMachinesReferences: [] };
            availabilitySetInstance.properties = propertiesInstance;
            
            var platformUpdateDomainCountValue = propertiesValue2['platformUpdateDomainCount'];
            if (platformUpdateDomainCountValue !== null && platformUpdateDomainCountValue !== undefined) {
              var platformUpdateDomainCountInstance = platformUpdateDomainCountValue;
              propertiesInstance.platformUpdateDomainCount = platformUpdateDomainCountInstance;
            }
            
            var platformFaultDomainCountValue = propertiesValue2['platformFaultDomainCount'];
            if (platformFaultDomainCountValue !== null && platformFaultDomainCountValue !== undefined) {
              var platformFaultDomainCountInstance = platformFaultDomainCountValue;
              propertiesInstance.platformFaultDomainCount = platformFaultDomainCountInstance;
            }
            
            var virtualMachinesArray2 = propertiesValue2['virtualMachines'];
            if (virtualMachinesArray2 !== null && virtualMachinesArray2 !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < virtualMachinesArray2.length; loweredIndex3 = loweredIndex3 + 1) {
                var virtualMachinesValue = virtualMachinesArray2[loweredIndex3];
                var virtualMachineReferenceInstance = {};
                propertiesInstance.virtualMachinesReferences.push(virtualMachineReferenceInstance);
                
                var idValue = virtualMachinesValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  virtualMachineReferenceInstance.referenceUri = idInstance;
                }
              }
            }
            
            var statusesArray2 = propertiesValue2['statuses'];
            if (statusesArray2 !== null && statusesArray2 !== undefined) {
              for (var loweredIndex4 = 0; loweredIndex4 < statusesArray2.length; loweredIndex4 = loweredIndex4 + 1) {
                var statusesValue = statusesArray2[loweredIndex4];
                var instanceViewStatusInstance = {};
                propertiesInstance.statuses.push(instanceViewStatusInstance);
                
                var codeValue = statusesValue['code'];
                if (codeValue !== null && codeValue !== undefined) {
                  var codeInstance = codeValue;
                  instanceViewStatusInstance.code = codeInstance;
                }
                
                var levelValue = statusesValue['level'];
                if (levelValue !== null && levelValue !== undefined) {
                  var levelInstance = levelValue;
                  instanceViewStatusInstance.level = levelInstance;
                }
                
                var displayStatusValue = statusesValue['displayStatus'];
                if (displayStatusValue !== null && displayStatusValue !== undefined) {
                  var displayStatusInstance = displayStatusValue;
                  instanceViewStatusInstance.displayStatus = displayStatusInstance;
                }
                
                var messageValue = statusesValue['message'];
                if (messageValue !== null && messageValue !== undefined) {
                  var messageInstance = messageValue;
                  instanceViewStatusInstance.message = messageInstance;
                }
                
                var timeValue = statusesValue['time'];
                if (timeValue !== null && timeValue !== undefined) {
                  var timeInstance = timeValue;
                  instanceViewStatusInstance.time = timeInstance;
                }
              }
            }
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            availabilitySetInstance.id = idInstance2;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            availabilitySetInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            availabilitySetInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            availabilitySetInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              availabilitySetInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            result.name = nameInstance2;
          }
          
          var locationValue2 = responseDoc['location'];
          if (locationValue2 !== null && locationValue2 !== undefined) {
            var locationInstance2 = locationValue2;
            result.location = locationInstance2;
          }
          
          var typeValue2 = responseDoc['Type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            result.type = typeInstance2;
          }
          
          var tagsSequenceElement2 = responseDoc['tags'];
          if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
            for (var property2 in tagsSequenceElement2) {
              var tagsKey3 = property2;
              var tagsValue3 = tagsSequenceElement2[property2];
              result.tags[tagsKey3] = tagsValue3;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} availabilitySetName The name of the availability set.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  AvailabilitySetOperations.prototype.deleteMethod = function(resourceGroupName, availabilitySetName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (availabilitySetName === null || availabilitySetName === undefined) {
      return callback(new Error('availabilitySetName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/availabilitySets/';
    url2 = url2 + encodeURIComponent(availabilitySetName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} availabilitySetName The name of the availability set.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  AvailabilitySetOperations.prototype.get = function(resourceGroupName, availabilitySetName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (availabilitySetName === null || availabilitySetName === undefined) {
      return callback(new Error('availabilitySetName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/availabilitySets/';
    url2 = url2 + encodeURIComponent(availabilitySetName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { tags: {} };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var availabilitySetInstance = { tags: {} };
          result.availabilitySet = availabilitySetInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = { statuses: [], virtualMachinesReferences: [] };
            availabilitySetInstance.properties = propertiesInstance;
            
            var platformUpdateDomainCountValue = propertiesValue['platformUpdateDomainCount'];
            if (platformUpdateDomainCountValue !== null && platformUpdateDomainCountValue !== undefined) {
              var platformUpdateDomainCountInstance = platformUpdateDomainCountValue;
              propertiesInstance.platformUpdateDomainCount = platformUpdateDomainCountInstance;
            }
            
            var platformFaultDomainCountValue = propertiesValue['platformFaultDomainCount'];
            if (platformFaultDomainCountValue !== null && platformFaultDomainCountValue !== undefined) {
              var platformFaultDomainCountInstance = platformFaultDomainCountValue;
              propertiesInstance.platformFaultDomainCount = platformFaultDomainCountInstance;
            }
            
            var virtualMachinesArray = propertiesValue['virtualMachines'];
            if (virtualMachinesArray !== null && virtualMachinesArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < virtualMachinesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var virtualMachinesValue = virtualMachinesArray[loweredIndex1];
                var virtualMachineReferenceInstance = {};
                propertiesInstance.virtualMachinesReferences.push(virtualMachineReferenceInstance);
                
                var idValue = virtualMachinesValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  virtualMachineReferenceInstance.referenceUri = idInstance;
                }
              }
            }
            
            var statusesArray = propertiesValue['statuses'];
            if (statusesArray !== null && statusesArray !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < statusesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var statusesValue = statusesArray[loweredIndex2];
                var instanceViewStatusInstance = {};
                propertiesInstance.statuses.push(instanceViewStatusInstance);
                
                var codeValue = statusesValue['code'];
                if (codeValue !== null && codeValue !== undefined) {
                  var codeInstance = codeValue;
                  instanceViewStatusInstance.code = codeInstance;
                }
                
                var levelValue = statusesValue['level'];
                if (levelValue !== null && levelValue !== undefined) {
                  var levelInstance = levelValue;
                  instanceViewStatusInstance.level = levelInstance;
                }
                
                var displayStatusValue = statusesValue['displayStatus'];
                if (displayStatusValue !== null && displayStatusValue !== undefined) {
                  var displayStatusInstance = displayStatusValue;
                  instanceViewStatusInstance.displayStatus = displayStatusInstance;
                }
                
                var messageValue = statusesValue['message'];
                if (messageValue !== null && messageValue !== undefined) {
                  var messageInstance = messageValue;
                  instanceViewStatusInstance.message = messageInstance;
                }
                
                var timeValue = statusesValue['time'];
                if (timeValue !== null && timeValue !== undefined) {
                  var timeInstance = timeValue;
                  instanceViewStatusInstance.time = timeInstance;
                }
              }
            }
          }
          
          var idValue2 = responseDoc['id'];
          if (idValue2 !== null && idValue2 !== undefined) {
            var idInstance2 = idValue2;
            availabilitySetInstance.id = idInstance2;
          }
          
          var nameValue = responseDoc['name'];
          if (nameValue !== null && nameValue !== undefined) {
            var nameInstance = nameValue;
            availabilitySetInstance.name = nameInstance;
          }
          
          var typeValue = responseDoc['type'];
          if (typeValue !== null && typeValue !== undefined) {
            var typeInstance = typeValue;
            availabilitySetInstance.type = typeInstance;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            availabilitySetInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              availabilitySetInstance.tags[tagsKey] = tagsValue;
            }
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            result.name = nameInstance2;
          }
          
          var locationValue2 = responseDoc['location'];
          if (locationValue2 !== null && locationValue2 !== undefined) {
            var locationInstance2 = locationValue2;
            result.location = locationInstance2;
          }
          
          var typeValue2 = responseDoc['Type'];
          if (typeValue2 !== null && typeValue2 !== undefined) {
            var typeInstance2 = typeValue2;
            result.type = typeInstance2;
          }
          
          var tagsSequenceElement2 = responseDoc['tags'];
          if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
            for (var property2 in tagsSequenceElement2) {
              var tagsKey2 = property2;
              var tagsValue2 = tagsSequenceElement2[property2];
              result.tags[tagsKey2] = tagsValue2;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  AvailabilitySetOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/availabilitySets';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { availabilitySets: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var availabilitySetInstance = { tags: {} };
              result.availabilitySets.push(availabilitySetInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = { statuses: [], virtualMachinesReferences: [] };
                availabilitySetInstance.properties = propertiesInstance;
                
                var platformUpdateDomainCountValue = propertiesValue['platformUpdateDomainCount'];
                if (platformUpdateDomainCountValue !== null && platformUpdateDomainCountValue !== undefined) {
                  var platformUpdateDomainCountInstance = platformUpdateDomainCountValue;
                  propertiesInstance.platformUpdateDomainCount = platformUpdateDomainCountInstance;
                }
                
                var platformFaultDomainCountValue = propertiesValue['platformFaultDomainCount'];
                if (platformFaultDomainCountValue !== null && platformFaultDomainCountValue !== undefined) {
                  var platformFaultDomainCountInstance = platformFaultDomainCountValue;
                  propertiesInstance.platformFaultDomainCount = platformFaultDomainCountInstance;
                }
                
                var virtualMachinesArray = propertiesValue['virtualMachines'];
                if (virtualMachinesArray !== null && virtualMachinesArray !== undefined) {
                  for (var loweredIndex2 = 0; loweredIndex2 < virtualMachinesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                    var virtualMachinesValue = virtualMachinesArray[loweredIndex2];
                    var virtualMachineReferenceInstance = {};
                    propertiesInstance.virtualMachinesReferences.push(virtualMachineReferenceInstance);
                    
                    var idValue = virtualMachinesValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      virtualMachineReferenceInstance.referenceUri = idInstance;
                    }
                  }
                }
                
                var statusesArray = propertiesValue['statuses'];
                if (statusesArray !== null && statusesArray !== undefined) {
                  for (var loweredIndex3 = 0; loweredIndex3 < statusesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                    var statusesValue = statusesArray[loweredIndex3];
                    var instanceViewStatusInstance = {};
                    propertiesInstance.statuses.push(instanceViewStatusInstance);
                    
                    var codeValue = statusesValue['code'];
                    if (codeValue !== null && codeValue !== undefined) {
                      var codeInstance = codeValue;
                      instanceViewStatusInstance.code = codeInstance;
                    }
                    
                    var levelValue = statusesValue['level'];
                    if (levelValue !== null && levelValue !== undefined) {
                      var levelInstance = levelValue;
                      instanceViewStatusInstance.level = levelInstance;
                    }
                    
                    var displayStatusValue = statusesValue['displayStatus'];
                    if (displayStatusValue !== null && displayStatusValue !== undefined) {
                      var displayStatusInstance = displayStatusValue;
                      instanceViewStatusInstance.displayStatus = displayStatusInstance;
                    }
                    
                    var messageValue = statusesValue['message'];
                    if (messageValue !== null && messageValue !== undefined) {
                      var messageInstance = messageValue;
                      instanceViewStatusInstance.message = messageInstance;
                    }
                    
                    var timeValue = statusesValue['time'];
                    if (timeValue !== null && timeValue !== undefined) {
                      var timeInstance = timeValue;
                      instanceViewStatusInstance.time = timeInstance;
                    }
                  }
                }
              }
              
              var idValue2 = valueValue['id'];
              if (idValue2 !== null && idValue2 !== undefined) {
                var idInstance2 = idValue2;
                availabilitySetInstance.id = idInstance2;
              }
              
              var nameValue = valueValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                availabilitySetInstance.name = nameInstance;
              }
              
              var typeValue = valueValue['type'];
              if (typeValue !== null && typeValue !== undefined) {
                var typeInstance = typeValue;
                availabilitySetInstance.type = typeInstance;
              }
              
              var locationValue = valueValue['location'];
              if (locationValue !== null && locationValue !== undefined) {
                var locationInstance = locationValue;
                availabilitySetInstance.location = locationInstance;
              }
              
              var tagsSequenceElement = valueValue['tags'];
              if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                for (var property in tagsSequenceElement) {
                  var tagsKey = property;
                  var tagsValue = tagsSequenceElement[property];
                  availabilitySetInstance.tags[tagsKey] = tagsValue;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return AvailabilitySetOperations;
})();

var VirtualMachineExtensionOperations = ( /** @lends VirtualMachineExtensionOperations */ function() {
  /**
   * @class
   * Operations for managing the virtual machine extensions in compute
   * management.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ComputeManagementClient] {@link
   * ComputeManagementClient~ComputeManagementClient}.
   * See [virtualMachineExtensions] {@link
   * ComputeManagementClient~ComputeManagementClient#virtualMachineExtensions}.
   * Initializes a new instance of the VirtualMachineExtensionOperations class.
   * @constructor
   * 
   * @param {ComputeManagementClient} client Reference to the service client.
   */
  function VirtualMachineExtensionOperations(client) {
    this.client = client;
  }
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine where the extension
   * should be create or updated.
   * 
   * @param {VirtualMachineExtensionCreateOrUpdateParameters} parameters
   * Parameters supplied to the Create Virtual Machine Extension operation.
   * 
   * @param {VirtualMachineExtension} parameters.virtualMachineExtension Gets
   * or sets information about the virtual machine extension being created or
   * updated.
   * 
   * @param {VirtualMachineExtensionProperties}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties]
   * Virtual machine extension properties.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.publisher]
   * Name of the extension handler publisher.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.type]
   * Type of the extension handler.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.typeHandlerVersion]
   * Type version of the extension handler.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.settings]
   * Json formatted public settings for the extension.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.protectedSettings]
   * Json formatted protected settings for the extension.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.provisioningState]
   * The provisioning state, which only appears in the response.
   * 
   * @param {VirtualMachineExtensionInstanceView}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView]
   * The virtual machine extension instance view.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.name]
   * The virtual machine extension name.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.type]
   * Full type of the extension handler which includes both publisher and type.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.typeHandlerVersion]
   * Type version of the extension handler.
   * 
   * @param {array}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.subStatuses]
   * The resource status information.
   * 
   * @param {array}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.statuses]
   * The resource status information.
   * 
   * @param {string} [parameters.virtualMachineExtension.id] Resource reference
   * Id.
   * 
   * @param {string} [parameters.virtualMachineExtension.name] The name of the
   * resource.
   * 
   * @param {string} [parameters.virtualMachineExtension.type] Gets or sets the
   * type of the resource, such as 'Microsoft.Compute/virtualMachines'.
   * 
   * @param {string} [parameters.virtualMachineExtension.location] Gets or sets
   * the location of the resource.
   * 
   * @param {object} [parameters.virtualMachineExtension.tags] Gets or sets the
   * tags attached to the resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineExtensionOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, vmName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.virtualMachineExtension === null || parameters.virtualMachineExtension === undefined) {
      return callback(new Error('parameters.virtualMachineExtension cannot be null.'));
    }
    if (parameters.virtualMachineExtension.virtualMachineExtensionProperties !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties !== undefined) {
      if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.publisher === null || parameters.virtualMachineExtension.virtualMachineExtensionProperties.publisher === undefined) {
        return callback(new Error('parameters.virtualMachineExtension.virtualMachineExtensionProperties.publisher cannot be null.'));
      }
      if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.type === null || parameters.virtualMachineExtension.virtualMachineExtensionProperties.type === undefined) {
        return callback(new Error('parameters.virtualMachineExtension.virtualMachineExtensionProperties.type cannot be null.'));
      }
      if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.typeHandlerVersion === null || parameters.virtualMachineExtension.virtualMachineExtensionProperties.typeHandlerVersion === undefined) {
        return callback(new Error('parameters.virtualMachineExtension.virtualMachineExtensionProperties.typeHandlerVersion cannot be null.'));
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    url2 = url2 + '/extensions/';
    if (parameters.virtualMachineExtension.name !== null && parameters.virtualMachineExtension.name !== undefined) {
      url2 = url2 + encodeURIComponent(parameters.virtualMachineExtension.name);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var virtualMachineExtensionCreateOrUpdateParametersValue = {};
    requestDoc = virtualMachineExtensionCreateOrUpdateParametersValue;
    
    if (parameters.virtualMachineExtension.virtualMachineExtensionProperties !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties !== undefined) {
      var propertiesValue = {};
      virtualMachineExtensionCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      propertiesValue['publisher'] = parameters.virtualMachineExtension.virtualMachineExtensionProperties.publisher;
      
      propertiesValue['type'] = parameters.virtualMachineExtension.virtualMachineExtensionProperties.type;
      
      propertiesValue['typeHandlerVersion'] = parameters.virtualMachineExtension.virtualMachineExtensionProperties.typeHandlerVersion;
      
      if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.settings !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties.settings !== undefined) {
        propertiesValue['settings'] = parameters.virtualMachineExtension.virtualMachineExtensionProperties.settings;
      }
      
      if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.protectedSettings !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties.protectedSettings !== undefined) {
        propertiesValue['protectedSettings'] = parameters.virtualMachineExtension.virtualMachineExtensionProperties.protectedSettings;
      }
      
      if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.provisioningState !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = parameters.virtualMachineExtension.virtualMachineExtensionProperties.provisioningState;
      }
      
      if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView !== undefined) {
        var instanceViewValue = {};
        propertiesValue['instanceView'] = instanceViewValue;
        
        if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.name !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.name !== undefined) {
          instanceViewValue['name'] = parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.name;
        }
        
        if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.type !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.type !== undefined) {
          instanceViewValue['type'] = parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.type;
        }
        
        if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.typeHandlerVersion !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.typeHandlerVersion !== undefined) {
          instanceViewValue['typeHandlerVersion'] = parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.typeHandlerVersion;
        }
        
        if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.subStatuses !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.subStatuses !== undefined) {
          var substatusesArray = [];
          for (var loweredIndex1 = 0; loweredIndex1 < parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.subStatuses.length; loweredIndex1 = loweredIndex1 + 1) {
            var substatusesItem = parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.subStatuses[loweredIndex1];
            
            if (substatusesItem.code !== null && substatusesItem.code !== undefined) {
              requestDoc['code'] = substatusesItem.code;
            }
            
            if (substatusesItem.level !== null && substatusesItem.level !== undefined) {
              requestDoc['level'] = substatusesItem.level;
            }
            
            if (substatusesItem.displayStatus !== null && substatusesItem.displayStatus !== undefined) {
              requestDoc['displayStatus'] = substatusesItem.displayStatus;
            }
            
            if (substatusesItem.message !== null && substatusesItem.message !== undefined) {
              requestDoc['message'] = substatusesItem.message;
            }
            
            if (substatusesItem.time !== null && substatusesItem.time !== undefined) {
              requestDoc['time'] = substatusesItem.time;
            }
          }
          instanceViewValue['substatuses'] = substatusesArray;
        }
        
        if (parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.statuses !== null && parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.statuses !== undefined) {
          var statusesArray = [];
          for (var loweredIndex2 = 0; loweredIndex2 < parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.statuses.length; loweredIndex2 = loweredIndex2 + 1) {
            var statusesItem = parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.statuses[loweredIndex2];
            
            if (statusesItem.code !== null && statusesItem.code !== undefined) {
              requestDoc['code'] = statusesItem.code;
            }
            
            if (statusesItem.level !== null && statusesItem.level !== undefined) {
              requestDoc['level'] = statusesItem.level;
            }
            
            if (statusesItem.displayStatus !== null && statusesItem.displayStatus !== undefined) {
              requestDoc['displayStatus'] = statusesItem.displayStatus;
            }
            
            if (statusesItem.message !== null && statusesItem.message !== undefined) {
              requestDoc['message'] = statusesItem.message;
            }
            
            if (statusesItem.time !== null && statusesItem.time !== undefined) {
              requestDoc['time'] = statusesItem.time;
            }
          }
          instanceViewValue['statuses'] = statusesArray;
        }
      }
    }
    
    if (parameters.virtualMachineExtension.id !== null && parameters.virtualMachineExtension.id !== undefined) {
      virtualMachineExtensionCreateOrUpdateParametersValue['id'] = parameters.virtualMachineExtension.id;
    }
    
    if (parameters.virtualMachineExtension.name !== null && parameters.virtualMachineExtension.name !== undefined) {
      virtualMachineExtensionCreateOrUpdateParametersValue['name'] = parameters.virtualMachineExtension.name;
    }
    
    if (parameters.virtualMachineExtension.type !== null && parameters.virtualMachineExtension.type !== undefined) {
      virtualMachineExtensionCreateOrUpdateParametersValue['type'] = parameters.virtualMachineExtension.type;
    }
    
    if (parameters.virtualMachineExtension.location !== null && parameters.virtualMachineExtension.location !== undefined) {
      virtualMachineExtensionCreateOrUpdateParametersValue['location'] = parameters.virtualMachineExtension.location;
    }
    
    if (parameters.virtualMachineExtension.tags !== null && parameters.virtualMachineExtension.tags !== undefined) {
      var tagsDictionary = {};
      for (var tagsKey in parameters.virtualMachineExtension.tags) {
        var tagsValue = parameters.virtualMachineExtension.tags[tagsKey];
        tagsDictionary[tagsKey] = tagsValue;
      }
      virtualMachineExtensionCreateOrUpdateParametersValue['tags'] = tagsDictionary;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = { tags: {} };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualMachineExtensionInstance = { tags: {} };
          result.virtualMachineExtension = virtualMachineExtensionInstance;
          
          var propertiesValue2 = responseDoc['properties'];
          if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
            var propertiesInstance = {};
            virtualMachineExtensionInstance.virtualMachineExtensionProperties = propertiesInstance;
            
            var publisherValue = propertiesValue2['publisher'];
            if (publisherValue !== null && publisherValue !== undefined) {
              var publisherInstance = publisherValue;
              propertiesInstance.publisher = publisherInstance;
            }
            
            var typeValue = propertiesValue2['type'];
            if (typeValue !== null && typeValue !== undefined) {
              var typeInstance = typeValue;
              propertiesInstance.type = typeInstance;
            }
            
            var typeHandlerVersionValue = propertiesValue2['typeHandlerVersion'];
            if (typeHandlerVersionValue !== null && typeHandlerVersionValue !== undefined) {
              var typeHandlerVersionInstance = typeHandlerVersionValue;
              propertiesInstance.typeHandlerVersion = typeHandlerVersionInstance;
            }
            
            var settingsValue = propertiesValue2['settings'];
            if (settingsValue !== null && settingsValue !== undefined) {
              var settingsInstance = settingsValue;
              propertiesInstance.settings = settingsInstance;
            }
            
            var protectedSettingsValue = propertiesValue2['protectedSettings'];
            if (protectedSettingsValue !== null && protectedSettingsValue !== undefined) {
              var protectedSettingsInstance = protectedSettingsValue;
              propertiesInstance.protectedSettings = protectedSettingsInstance;
            }
            
            var provisioningStateValue = propertiesValue2['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var instanceViewValue2 = propertiesValue2['instanceView'];
            if (instanceViewValue2 !== null && instanceViewValue2 !== undefined) {
              var instanceViewInstance = { statuses: [], subStatuses: [] };
              propertiesInstance.instanceView = instanceViewInstance;
              
              var nameValue = instanceViewValue2['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                instanceViewInstance.name = nameInstance;
              }
              
              var typeValue2 = instanceViewValue2['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                instanceViewInstance.type = typeInstance2;
              }
              
              var typeHandlerVersionValue2 = instanceViewValue2['typeHandlerVersion'];
              if (typeHandlerVersionValue2 !== null && typeHandlerVersionValue2 !== undefined) {
                var typeHandlerVersionInstance2 = typeHandlerVersionValue2;
                instanceViewInstance.typeHandlerVersion = typeHandlerVersionInstance2;
              }
              
              var substatusesArray2 = instanceViewValue2['substatuses'];
              if (substatusesArray2 !== null && substatusesArray2 !== undefined) {
                for (var loweredIndex3 = 0; loweredIndex3 < substatusesArray2.length; loweredIndex3 = loweredIndex3 + 1) {
                  var substatusesValue = substatusesArray2[loweredIndex3];
                  var instanceViewStatusInstance = {};
                  instanceViewInstance.subStatuses.push(instanceViewStatusInstance);
                  
                  var codeValue = substatusesValue['code'];
                  if (codeValue !== null && codeValue !== undefined) {
                    var codeInstance = codeValue;
                    instanceViewStatusInstance.code = codeInstance;
                  }
                  
                  var levelValue = substatusesValue['level'];
                  if (levelValue !== null && levelValue !== undefined) {
                    var levelInstance = levelValue;
                    instanceViewStatusInstance.level = levelInstance;
                  }
                  
                  var displayStatusValue = substatusesValue['displayStatus'];
                  if (displayStatusValue !== null && displayStatusValue !== undefined) {
                    var displayStatusInstance = displayStatusValue;
                    instanceViewStatusInstance.displayStatus = displayStatusInstance;
                  }
                  
                  var messageValue = substatusesValue['message'];
                  if (messageValue !== null && messageValue !== undefined) {
                    var messageInstance = messageValue;
                    instanceViewStatusInstance.message = messageInstance;
                  }
                  
                  var timeValue = substatusesValue['time'];
                  if (timeValue !== null && timeValue !== undefined) {
                    var timeInstance = timeValue;
                    instanceViewStatusInstance.time = timeInstance;
                  }
                }
              }
              
              var statusesArray2 = instanceViewValue2['statuses'];
              if (statusesArray2 !== null && statusesArray2 !== undefined) {
                for (var loweredIndex4 = 0; loweredIndex4 < statusesArray2.length; loweredIndex4 = loweredIndex4 + 1) {
                  var statusesValue = statusesArray2[loweredIndex4];
                  var instanceViewStatusInstance2 = {};
                  instanceViewInstance.statuses.push(instanceViewStatusInstance2);
                  
                  var codeValue2 = statusesValue['code'];
                  if (codeValue2 !== null && codeValue2 !== undefined) {
                    var codeInstance2 = codeValue2;
                    instanceViewStatusInstance2.code = codeInstance2;
                  }
                  
                  var levelValue2 = statusesValue['level'];
                  if (levelValue2 !== null && levelValue2 !== undefined) {
                    var levelInstance2 = levelValue2;
                    instanceViewStatusInstance2.level = levelInstance2;
                  }
                  
                  var displayStatusValue2 = statusesValue['displayStatus'];
                  if (displayStatusValue2 !== null && displayStatusValue2 !== undefined) {
                    var displayStatusInstance2 = displayStatusValue2;
                    instanceViewStatusInstance2.displayStatus = displayStatusInstance2;
                  }
                  
                  var messageValue2 = statusesValue['message'];
                  if (messageValue2 !== null && messageValue2 !== undefined) {
                    var messageInstance2 = messageValue2;
                    instanceViewStatusInstance2.message = messageInstance2;
                  }
                  
                  var timeValue2 = statusesValue['time'];
                  if (timeValue2 !== null && timeValue2 !== undefined) {
                    var timeInstance2 = timeValue2;
                    instanceViewStatusInstance2.time = timeInstance2;
                  }
                }
              }
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            virtualMachineExtensionInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            virtualMachineExtensionInstance.name = nameInstance2;
          }
          
          var typeValue3 = responseDoc['type'];
          if (typeValue3 !== null && typeValue3 !== undefined) {
            var typeInstance3 = typeValue3;
            virtualMachineExtensionInstance.type = typeInstance3;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            virtualMachineExtensionInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey2 = property;
              var tagsValue2 = tagsSequenceElement[property];
              virtualMachineExtensionInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var nameValue3 = responseDoc['name'];
          if (nameValue3 !== null && nameValue3 !== undefined) {
            var nameInstance3 = nameValue3;
            result.name = nameInstance3;
          }
          
          var locationValue2 = responseDoc['location'];
          if (locationValue2 !== null && locationValue2 !== undefined) {
            var locationInstance2 = locationValue2;
            result.location = locationInstance2;
          }
          
          var typeValue4 = responseDoc['Type'];
          if (typeValue4 !== null && typeValue4 !== undefined) {
            var typeInstance4 = typeValue4;
            result.type = typeInstance4;
          }
          
          var tagsSequenceElement2 = responseDoc['tags'];
          if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
            for (var property2 in tagsSequenceElement2) {
              var tagsKey3 = property2;
              var tagsValue3 = tagsSequenceElement2[property2];
              result.tags[tagsKey3] = tagsValue3;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine where the extension
   * should be deleted.
   * 
   * @param {string} vmExtensionName The name of the virtual machine extension.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineExtensionOperations.prototype.beginDeleting = function(resourceGroupName, vmName, vmExtensionName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    if (vmExtensionName === null || vmExtensionName === undefined) {
      return callback(new Error('vmExtensionName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    url2 = url2 + '/extensions/';
    url2 = url2 + encodeURIComponent(vmExtensionName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine where the extension
   * should be create or updated.
   * 
   * @param {VirtualMachineExtensionCreateOrUpdateParameters} parameters
   * Parameters supplied to the Create Virtual Machine Extension operation.
   * 
   * @param {VirtualMachineExtension} parameters.virtualMachineExtension Gets
   * or sets information about the virtual machine extension being created or
   * updated.
   * 
   * @param {VirtualMachineExtensionProperties}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties]
   * Virtual machine extension properties.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.publisher]
   * Name of the extension handler publisher.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.type]
   * Type of the extension handler.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.typeHandlerVersion]
   * Type version of the extension handler.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.settings]
   * Json formatted public settings for the extension.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.protectedSettings]
   * Json formatted protected settings for the extension.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.provisioningState]
   * The provisioning state, which only appears in the response.
   * 
   * @param {VirtualMachineExtensionInstanceView}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView]
   * The virtual machine extension instance view.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.name]
   * The virtual machine extension name.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.type]
   * Full type of the extension handler which includes both publisher and type.
   * 
   * @param {string}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.typeHandlerVersion]
   * Type version of the extension handler.
   * 
   * @param {array}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.subStatuses]
   * The resource status information.
   * 
   * @param {array}
   * [parameters.virtualMachineExtension.virtualMachineExtensionProperties.instanceView.statuses]
   * The resource status information.
   * 
   * @param {string} [parameters.virtualMachineExtension.id] Resource reference
   * Id.
   * 
   * @param {string} [parameters.virtualMachineExtension.name] The name of the
   * resource.
   * 
   * @param {string} [parameters.virtualMachineExtension.type] Gets or sets the
   * type of the resource, such as 'Microsoft.Compute/virtualMachines'.
   * 
   * @param {string} [parameters.virtualMachineExtension.location] Gets or sets
   * the location of the resource.
   * 
   * @param {object} [parameters.virtualMachineExtension.tags] Gets or sets the
   * tags attached to the resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineExtensionOperations.prototype.createOrUpdate = function(resourceGroupName, vmName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachineExtensions.beginCreateOrUpdating(resourceGroupName, vmName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine where the extension
   * should be deleted.
   * 
   * @param {string} vmExtensionName The name of the virtual machine extension.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineExtensionOperations.prototype.deleteMethod = function(resourceGroupName, vmName, vmExtensionName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachineExtensions.beginDeleting(resourceGroupName, vmName, vmExtensionName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine containing the
   * extension.
   * 
   * @param {string} vmExtensionName The name of the virtual machine extension.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineExtensionOperations.prototype.get = function(resourceGroupName, vmName, vmExtensionName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    if (vmExtensionName === null || vmExtensionName === undefined) {
      return callback(new Error('vmExtensionName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    url2 = url2 + '/extensions/';
    url2 = url2 + encodeURIComponent(vmExtensionName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualMachineExtensionInstance = { tags: {} };
          result.virtualMachineExtension = virtualMachineExtensionInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            virtualMachineExtensionInstance.virtualMachineExtensionProperties = propertiesInstance;
            
            var publisherValue = propertiesValue['publisher'];
            if (publisherValue !== null && publisherValue !== undefined) {
              var publisherInstance = publisherValue;
              propertiesInstance.publisher = publisherInstance;
            }
            
            var typeValue = propertiesValue['type'];
            if (typeValue !== null && typeValue !== undefined) {
              var typeInstance = typeValue;
              propertiesInstance.type = typeInstance;
            }
            
            var typeHandlerVersionValue = propertiesValue['typeHandlerVersion'];
            if (typeHandlerVersionValue !== null && typeHandlerVersionValue !== undefined) {
              var typeHandlerVersionInstance = typeHandlerVersionValue;
              propertiesInstance.typeHandlerVersion = typeHandlerVersionInstance;
            }
            
            var settingsValue = propertiesValue['settings'];
            if (settingsValue !== null && settingsValue !== undefined) {
              var settingsInstance = settingsValue;
              propertiesInstance.settings = settingsInstance;
            }
            
            var protectedSettingsValue = propertiesValue['protectedSettings'];
            if (protectedSettingsValue !== null && protectedSettingsValue !== undefined) {
              var protectedSettingsInstance = protectedSettingsValue;
              propertiesInstance.protectedSettings = protectedSettingsInstance;
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var instanceViewValue = propertiesValue['instanceView'];
            if (instanceViewValue !== null && instanceViewValue !== undefined) {
              var instanceViewInstance = { statuses: [], subStatuses: [] };
              propertiesInstance.instanceView = instanceViewInstance;
              
              var nameValue = instanceViewValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                instanceViewInstance.name = nameInstance;
              }
              
              var typeValue2 = instanceViewValue['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                instanceViewInstance.type = typeInstance2;
              }
              
              var typeHandlerVersionValue2 = instanceViewValue['typeHandlerVersion'];
              if (typeHandlerVersionValue2 !== null && typeHandlerVersionValue2 !== undefined) {
                var typeHandlerVersionInstance2 = typeHandlerVersionValue2;
                instanceViewInstance.typeHandlerVersion = typeHandlerVersionInstance2;
              }
              
              var substatusesArray = instanceViewValue['substatuses'];
              if (substatusesArray !== null && substatusesArray !== undefined) {
                for (var loweredIndex1 = 0; loweredIndex1 < substatusesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var substatusesValue = substatusesArray[loweredIndex1];
                  var instanceViewStatusInstance = {};
                  instanceViewInstance.subStatuses.push(instanceViewStatusInstance);
                  
                  var codeValue = substatusesValue['code'];
                  if (codeValue !== null && codeValue !== undefined) {
                    var codeInstance = codeValue;
                    instanceViewStatusInstance.code = codeInstance;
                  }
                  
                  var levelValue = substatusesValue['level'];
                  if (levelValue !== null && levelValue !== undefined) {
                    var levelInstance = levelValue;
                    instanceViewStatusInstance.level = levelInstance;
                  }
                  
                  var displayStatusValue = substatusesValue['displayStatus'];
                  if (displayStatusValue !== null && displayStatusValue !== undefined) {
                    var displayStatusInstance = displayStatusValue;
                    instanceViewStatusInstance.displayStatus = displayStatusInstance;
                  }
                  
                  var messageValue = substatusesValue['message'];
                  if (messageValue !== null && messageValue !== undefined) {
                    var messageInstance = messageValue;
                    instanceViewStatusInstance.message = messageInstance;
                  }
                  
                  var timeValue = substatusesValue['time'];
                  if (timeValue !== null && timeValue !== undefined) {
                    var timeInstance = timeValue;
                    instanceViewStatusInstance.time = timeInstance;
                  }
                }
              }
              
              var statusesArray = instanceViewValue['statuses'];
              if (statusesArray !== null && statusesArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < statusesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var statusesValue = statusesArray[loweredIndex2];
                  var instanceViewStatusInstance2 = {};
                  instanceViewInstance.statuses.push(instanceViewStatusInstance2);
                  
                  var codeValue2 = statusesValue['code'];
                  if (codeValue2 !== null && codeValue2 !== undefined) {
                    var codeInstance2 = codeValue2;
                    instanceViewStatusInstance2.code = codeInstance2;
                  }
                  
                  var levelValue2 = statusesValue['level'];
                  if (levelValue2 !== null && levelValue2 !== undefined) {
                    var levelInstance2 = levelValue2;
                    instanceViewStatusInstance2.level = levelInstance2;
                  }
                  
                  var displayStatusValue2 = statusesValue['displayStatus'];
                  if (displayStatusValue2 !== null && displayStatusValue2 !== undefined) {
                    var displayStatusInstance2 = displayStatusValue2;
                    instanceViewStatusInstance2.displayStatus = displayStatusInstance2;
                  }
                  
                  var messageValue2 = statusesValue['message'];
                  if (messageValue2 !== null && messageValue2 !== undefined) {
                    var messageInstance2 = messageValue2;
                    instanceViewStatusInstance2.message = messageInstance2;
                  }
                  
                  var timeValue2 = statusesValue['time'];
                  if (timeValue2 !== null && timeValue2 !== undefined) {
                    var timeInstance2 = timeValue2;
                    instanceViewStatusInstance2.time = timeInstance2;
                  }
                }
              }
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            virtualMachineExtensionInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            virtualMachineExtensionInstance.name = nameInstance2;
          }
          
          var typeValue3 = responseDoc['type'];
          if (typeValue3 !== null && typeValue3 !== undefined) {
            var typeInstance3 = typeValue3;
            virtualMachineExtensionInstance.type = typeInstance3;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            virtualMachineExtensionInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              virtualMachineExtensionInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine containing the
   * extension.
   * 
   * @param {string} vmExtensionName The name of the virtual machine extension.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineExtensionOperations.prototype.getInstanceView = function(resourceGroupName, vmName, vmExtensionName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    if (vmExtensionName === null || vmExtensionName === undefined) {
      return callback(new Error('vmExtensionName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    url2 = url2 + '/extensions/';
    url2 = url2 + encodeURIComponent(vmExtensionName);
    url2 = url2 + '/InstanceView';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualMachineExtensionInstance = { tags: {} };
          result.virtualMachineExtension = virtualMachineExtensionInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            virtualMachineExtensionInstance.virtualMachineExtensionProperties = propertiesInstance;
            
            var publisherValue = propertiesValue['publisher'];
            if (publisherValue !== null && publisherValue !== undefined) {
              var publisherInstance = publisherValue;
              propertiesInstance.publisher = publisherInstance;
            }
            
            var typeValue = propertiesValue['type'];
            if (typeValue !== null && typeValue !== undefined) {
              var typeInstance = typeValue;
              propertiesInstance.type = typeInstance;
            }
            
            var typeHandlerVersionValue = propertiesValue['typeHandlerVersion'];
            if (typeHandlerVersionValue !== null && typeHandlerVersionValue !== undefined) {
              var typeHandlerVersionInstance = typeHandlerVersionValue;
              propertiesInstance.typeHandlerVersion = typeHandlerVersionInstance;
            }
            
            var settingsValue = propertiesValue['settings'];
            if (settingsValue !== null && settingsValue !== undefined) {
              var settingsInstance = settingsValue;
              propertiesInstance.settings = settingsInstance;
            }
            
            var protectedSettingsValue = propertiesValue['protectedSettings'];
            if (protectedSettingsValue !== null && protectedSettingsValue !== undefined) {
              var protectedSettingsInstance = protectedSettingsValue;
              propertiesInstance.protectedSettings = protectedSettingsInstance;
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var instanceViewValue = propertiesValue['instanceView'];
            if (instanceViewValue !== null && instanceViewValue !== undefined) {
              var instanceViewInstance = { statuses: [], subStatuses: [] };
              propertiesInstance.instanceView = instanceViewInstance;
              
              var nameValue = instanceViewValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                instanceViewInstance.name = nameInstance;
              }
              
              var typeValue2 = instanceViewValue['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                instanceViewInstance.type = typeInstance2;
              }
              
              var typeHandlerVersionValue2 = instanceViewValue['typeHandlerVersion'];
              if (typeHandlerVersionValue2 !== null && typeHandlerVersionValue2 !== undefined) {
                var typeHandlerVersionInstance2 = typeHandlerVersionValue2;
                instanceViewInstance.typeHandlerVersion = typeHandlerVersionInstance2;
              }
              
              var substatusesArray = instanceViewValue['substatuses'];
              if (substatusesArray !== null && substatusesArray !== undefined) {
                for (var loweredIndex1 = 0; loweredIndex1 < substatusesArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var substatusesValue = substatusesArray[loweredIndex1];
                  var instanceViewStatusInstance = {};
                  instanceViewInstance.subStatuses.push(instanceViewStatusInstance);
                  
                  var codeValue = substatusesValue['code'];
                  if (codeValue !== null && codeValue !== undefined) {
                    var codeInstance = codeValue;
                    instanceViewStatusInstance.code = codeInstance;
                  }
                  
                  var levelValue = substatusesValue['level'];
                  if (levelValue !== null && levelValue !== undefined) {
                    var levelInstance = levelValue;
                    instanceViewStatusInstance.level = levelInstance;
                  }
                  
                  var displayStatusValue = substatusesValue['displayStatus'];
                  if (displayStatusValue !== null && displayStatusValue !== undefined) {
                    var displayStatusInstance = displayStatusValue;
                    instanceViewStatusInstance.displayStatus = displayStatusInstance;
                  }
                  
                  var messageValue = substatusesValue['message'];
                  if (messageValue !== null && messageValue !== undefined) {
                    var messageInstance = messageValue;
                    instanceViewStatusInstance.message = messageInstance;
                  }
                  
                  var timeValue = substatusesValue['time'];
                  if (timeValue !== null && timeValue !== undefined) {
                    var timeInstance = timeValue;
                    instanceViewStatusInstance.time = timeInstance;
                  }
                }
              }
              
              var statusesArray = instanceViewValue['statuses'];
              if (statusesArray !== null && statusesArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < statusesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var statusesValue = statusesArray[loweredIndex2];
                  var instanceViewStatusInstance2 = {};
                  instanceViewInstance.statuses.push(instanceViewStatusInstance2);
                  
                  var codeValue2 = statusesValue['code'];
                  if (codeValue2 !== null && codeValue2 !== undefined) {
                    var codeInstance2 = codeValue2;
                    instanceViewStatusInstance2.code = codeInstance2;
                  }
                  
                  var levelValue2 = statusesValue['level'];
                  if (levelValue2 !== null && levelValue2 !== undefined) {
                    var levelInstance2 = levelValue2;
                    instanceViewStatusInstance2.level = levelInstance2;
                  }
                  
                  var displayStatusValue2 = statusesValue['displayStatus'];
                  if (displayStatusValue2 !== null && displayStatusValue2 !== undefined) {
                    var displayStatusInstance2 = displayStatusValue2;
                    instanceViewStatusInstance2.displayStatus = displayStatusInstance2;
                  }
                  
                  var messageValue2 = statusesValue['message'];
                  if (messageValue2 !== null && messageValue2 !== undefined) {
                    var messageInstance2 = messageValue2;
                    instanceViewStatusInstance2.message = messageInstance2;
                  }
                  
                  var timeValue2 = statusesValue['time'];
                  if (timeValue2 !== null && timeValue2 !== undefined) {
                    var timeInstance2 = timeValue2;
                    instanceViewStatusInstance2.time = timeInstance2;
                  }
                }
              }
            }
          }
          
          var idValue = responseDoc['id'];
          if (idValue !== null && idValue !== undefined) {
            var idInstance = idValue;
            virtualMachineExtensionInstance.id = idInstance;
          }
          
          var nameValue2 = responseDoc['name'];
          if (nameValue2 !== null && nameValue2 !== undefined) {
            var nameInstance2 = nameValue2;
            virtualMachineExtensionInstance.name = nameInstance2;
          }
          
          var typeValue3 = responseDoc['type'];
          if (typeValue3 !== null && typeValue3 !== undefined) {
            var typeInstance3 = typeValue3;
            virtualMachineExtensionInstance.type = typeInstance3;
          }
          
          var locationValue = responseDoc['location'];
          if (locationValue !== null && locationValue !== undefined) {
            var locationInstance = locationValue;
            virtualMachineExtensionInstance.location = locationInstance;
          }
          
          var tagsSequenceElement = responseDoc['tags'];
          if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
            for (var property in tagsSequenceElement) {
              var tagsKey = property;
              var tagsValue = tagsSequenceElement[property];
              virtualMachineExtensionInstance.tags[tagsKey] = tagsValue;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  return VirtualMachineExtensionOperations;
})();

var VirtualMachineOperations = ( /** @lends VirtualMachineOperations */ function() {
  /**
   * @class
   * Operations for managing the virtual machines in compute management.
   * __NOTE__: An instance of this class is automatically created for an
   * instance of the [ComputeManagementClient] {@link
   * ComputeManagementClient~ComputeManagementClient}.
   * See [virtualMachines] {@link
   * ComputeManagementClient~ComputeManagementClient#virtualMachines}.
   * Initializes a new instance of the VirtualMachineOperations class.
   * @constructor
   * 
   * @param {ComputeManagementClient} client Reference to the service client.
   */
  function VirtualMachineOperations(client) {
    this.client = client;
  }
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {VirtualMachineCreateOrUpdateParameters} parameters Parameters
   * supplied to the Create Virtual Machine operation.
   * 
   * @param {VirtualMachine} parameters.virtualMachine Gets or sets information
   * about a virtual machine being created of updated.
   * 
   * @param {VirtualMachineProperties}
   * [parameters.virtualMachine.virtualMachineProperties] Virtual machine
   * properties.
   * 
   * @param {HardwareProfile}
   * [parameters.virtualMachine.virtualMachineProperties.hardwareProfile] The
   * hardware profile.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.hardwareProfile.virtualMachineSize]
   * The virtual machine size.
   * 
   * @param {StorageProfile}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile] The
   * storage profile.
   * 
   * @param {SourceImageReference}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.sourceImage]
   * The source image reference.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.sourceImage.referenceUri]
   * The relative URL in the previous Service Management API's namespace of
   * the source image.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.destinationVhdsContainer]
   * The destination container for VHDs.
   * 
   * @param {OSDisk}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk]
   * The OS disk.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.operatingSystemType]
   * The Operating System type.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.name]
   * The disk name.
   * 
   * @param {VirtualHardDisk}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.virtualHardDisk]
   * The Virtual Hard Disk.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.virtualHardDisk.uri]
   * The vhd uri.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.caching]
   * The caching type.
   * 
   * @param {array}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks]
   * The data disks.
   * 
   * @param {OSProfile}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile] The OS
   * profile.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile.computerName]
   * The computer name.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile.adminUsername]
   * The admin user name.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile.adminPassword]
   * The admin user password.
   * 
   * @param {WindowsConfiguration}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile.windowsConfiguration]
   * Windows Configuration of the OS profile.
   * 
   * @param {boolean}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile.windowsConfiguration.provisionVMAgent]
   * Indicates whether VM Agent should be provisioned on the Virtual Machine.
   * 
   * @param {NetworkProfile}
   * [parameters.virtualMachine.virtualMachineProperties.networkProfile] The
   * network profile.
   * 
   * @param {array}
   * [parameters.virtualMachine.virtualMachineProperties.networkProfile.networkInterfaces]
   * The network interfaces.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.provisioningState]
   * The provisioning state, which only appears in the response.
   * 
   * @param {AvailabilitySetReference}
   * [parameters.virtualMachine.virtualMachineProperties.availabilitySetReference]
   * Reference Id of the availailbity set to which this virtual machine
   * belongs.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.availabilitySetReference.referenceUri]
   * The relative URL in the previous Service Management API's namespace of
   * the source image.
   * 
   * @param {VirtualMachineSubResources}
   * [parameters.virtualMachine.virtualMachineSubResources] Virtual machine
   * child resources.
   * 
   * @param {array}
   * [parameters.virtualMachine.virtualMachineSubResources.extensions] The
   * virtual machine child extension resources.
   * 
   * @param {string} [parameters.virtualMachine.id] Resource reference Id.
   * 
   * @param {string} [parameters.virtualMachine.name] The name of the resource.
   * 
   * @param {string} [parameters.virtualMachine.type] Gets or sets the type of
   * the resource, such as 'Microsoft.Compute/virtualMachines'.
   * 
   * @param {string} [parameters.virtualMachine.location] Gets or sets the
   * location of the resource.
   * 
   * @param {object} [parameters.virtualMachine.tags] Gets or sets the tags
   * attached to the resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.beginCreateOrUpdating = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (parameters === null || parameters === undefined) {
      return callback(new Error('parameters cannot be null.'));
    }
    if (parameters.virtualMachine === null || parameters.virtualMachine === undefined) {
      return callback(new Error('parameters.virtualMachine cannot be null.'));
    }
    if (parameters.virtualMachine.virtualMachineProperties !== null && parameters.virtualMachine.virtualMachineProperties !== undefined) {
      if (parameters.virtualMachine.virtualMachineProperties.storageProfile !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile !== undefined) {
        if (parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks !== undefined) {
          for (var loweredIndex1 = 0; loweredIndex1 < parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks.length; loweredIndex1 = loweredIndex1 + 1) {
            var dataDisksParameterItem = parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks[loweredIndex1];
            if (dataDisksParameterItem.name === null || dataDisksParameterItem.name === undefined) {
              return callback(new Error('parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks.name cannot be null.'));
            }
            if (dataDisksParameterItem.virtualHardDisk === null || dataDisksParameterItem.virtualHardDisk === undefined) {
              return callback(new Error('parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks.virtualHardDisk cannot be null.'));
            }
          }
        }
        if (parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk !== undefined) {
          if (parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.name === null || parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.name === undefined) {
            return callback(new Error('parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.name cannot be null.'));
          }
          if (parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.virtualHardDisk === null || parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.virtualHardDisk === undefined) {
            return callback(new Error('parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.virtualHardDisk cannot be null.'));
          }
        }
      }
    }
    if (parameters.virtualMachine.virtualMachineSubResources !== null && parameters.virtualMachine.virtualMachineSubResources !== undefined) {
      if (parameters.virtualMachine.virtualMachineSubResources.extensions !== null && parameters.virtualMachine.virtualMachineSubResources.extensions !== undefined) {
        for (var loweredIndex2 = 0; loweredIndex2 < parameters.virtualMachine.virtualMachineSubResources.extensions.length; loweredIndex2 = loweredIndex2 + 1) {
          var extensionsParameterItem = parameters.virtualMachine.virtualMachineSubResources.extensions[loweredIndex2];
          if (extensionsParameterItem.virtualMachineExtensionProperties !== null && extensionsParameterItem.virtualMachineExtensionProperties !== undefined) {
            if (extensionsParameterItem.virtualMachineExtensionProperties.publisher === null || extensionsParameterItem.virtualMachineExtensionProperties.publisher === undefined) {
              return callback(new Error('parameters.virtualMachine.virtualMachineSubResources.extensions.virtualMachineExtensionProperties.publisher cannot be null.'));
            }
            if (extensionsParameterItem.virtualMachineExtensionProperties.type === null || extensionsParameterItem.virtualMachineExtensionProperties.type === undefined) {
              return callback(new Error('parameters.virtualMachine.virtualMachineSubResources.extensions.virtualMachineExtensionProperties.type cannot be null.'));
            }
            if (extensionsParameterItem.virtualMachineExtensionProperties.typeHandlerVersion === null || extensionsParameterItem.virtualMachineExtensionProperties.typeHandlerVersion === undefined) {
              return callback(new Error('parameters.virtualMachine.virtualMachineSubResources.extensions.virtualMachineExtensionProperties.typeHandlerVersion cannot be null.'));
            }
          }
        }
      }
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    if (parameters.virtualMachine.name !== null && parameters.virtualMachine.name !== undefined) {
      url2 = url2 + encodeURIComponent(parameters.virtualMachine.name);
    }
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'PUT';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Serialize Request
    var requestContent = null;
    var requestDoc = null;
    
    var virtualMachineCreateOrUpdateParametersValue = {};
    requestDoc = virtualMachineCreateOrUpdateParametersValue;
    
    if (parameters.virtualMachine.virtualMachineProperties !== null && parameters.virtualMachine.virtualMachineProperties !== undefined) {
      var propertiesValue = {};
      virtualMachineCreateOrUpdateParametersValue['properties'] = propertiesValue;
      
      if (parameters.virtualMachine.virtualMachineProperties.hardwareProfile !== null && parameters.virtualMachine.virtualMachineProperties.hardwareProfile !== undefined) {
        var hardwareProfileValue = {};
        propertiesValue['hardwareProfile'] = hardwareProfileValue;
        
        if (parameters.virtualMachine.virtualMachineProperties.hardwareProfile.virtualMachineSize !== null && parameters.virtualMachine.virtualMachineProperties.hardwareProfile.virtualMachineSize !== undefined) {
          hardwareProfileValue['vmSize'] = parameters.virtualMachine.virtualMachineProperties.hardwareProfile.virtualMachineSize;
        }
      }
      
      if (parameters.virtualMachine.virtualMachineProperties.storageProfile !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile !== undefined) {
        var storageProfileValue = {};
        propertiesValue['storageProfile'] = storageProfileValue;
        
        if (parameters.virtualMachine.virtualMachineProperties.storageProfile.sourceImage !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile.sourceImage !== undefined) {
          var sourceImageValue = {};
          storageProfileValue['sourceImage'] = sourceImageValue;
          
          if (parameters.virtualMachine.virtualMachineProperties.storageProfile.sourceImage.referenceUri !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile.sourceImage.referenceUri !== undefined) {
            sourceImageValue['id'] = parameters.virtualMachine.virtualMachineProperties.storageProfile.sourceImage.referenceUri;
          }
        }
        
        if (parameters.virtualMachine.virtualMachineProperties.storageProfile.destinationVhdsContainer !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile.destinationVhdsContainer !== undefined) {
          storageProfileValue['destinationVhdsContainer'] = parameters.virtualMachine.virtualMachineProperties.storageProfile.destinationVhdsContainer;
        }
        
        if (parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk !== undefined) {
          var osDiskValue = {};
          storageProfileValue['osDisk'] = osDiskValue;
          
          if (parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.operatingSystemType !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.operatingSystemType !== undefined) {
            osDiskValue['osType'] = parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.operatingSystemType;
          }
          
          osDiskValue['name'] = parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.name;
          
          var vhdValue = {};
          osDiskValue['vhd'] = vhdValue;
          
          if (parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.virtualHardDisk.uri !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.virtualHardDisk.uri !== undefined) {
            vhdValue['uri'] = parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.virtualHardDisk.uri;
          }
          
          if (parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.caching !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.caching !== undefined) {
            osDiskValue['caching'] = parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.caching;
          }
        }
        
        if (parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks !== null && parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks !== undefined) {
          var dataDisksArray = [];
          for (var loweredIndex3 = 0; loweredIndex3 < parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks.length; loweredIndex3 = loweredIndex3 + 1) {
            var dataDisksItem = parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks[loweredIndex3];
            var dataDiskValue = {};
            dataDisksArray.push(dataDiskValue);
            
            if (dataDisksItem.lun !== null && dataDisksItem.lun !== undefined) {
              dataDiskValue['lun'] = dataDisksItem.lun;
            }
            
            if (dataDisksItem.diskSizeGB !== null && dataDisksItem.diskSizeGB !== undefined) {
              dataDiskValue['diskSizeGB'] = dataDisksItem.diskSizeGB;
            }
            
            dataDiskValue['name'] = dataDisksItem.name;
            
            var vhdValue2 = {};
            dataDiskValue['vhd'] = vhdValue2;
            
            if (dataDisksItem.virtualHardDisk.uri !== null && dataDisksItem.virtualHardDisk.uri !== undefined) {
              vhdValue2['uri'] = dataDisksItem.virtualHardDisk.uri;
            }
            
            if (dataDisksItem.caching !== null && dataDisksItem.caching !== undefined) {
              dataDiskValue['caching'] = dataDisksItem.caching;
            }
          }
          storageProfileValue['dataDisks'] = dataDisksArray;
        }
      }
      
      if (parameters.virtualMachine.virtualMachineProperties.oSProfile !== null && parameters.virtualMachine.virtualMachineProperties.oSProfile !== undefined) {
        var osProfileValue = {};
        propertiesValue['osProfile'] = osProfileValue;
        
        if (parameters.virtualMachine.virtualMachineProperties.oSProfile.computerName !== null && parameters.virtualMachine.virtualMachineProperties.oSProfile.computerName !== undefined) {
          osProfileValue['computerName'] = parameters.virtualMachine.virtualMachineProperties.oSProfile.computerName;
        }
        
        if (parameters.virtualMachine.virtualMachineProperties.oSProfile.adminUsername !== null && parameters.virtualMachine.virtualMachineProperties.oSProfile.adminUsername !== undefined) {
          osProfileValue['adminUsername'] = parameters.virtualMachine.virtualMachineProperties.oSProfile.adminUsername;
        }
        
        if (parameters.virtualMachine.virtualMachineProperties.oSProfile.adminPassword !== null && parameters.virtualMachine.virtualMachineProperties.oSProfile.adminPassword !== undefined) {
          osProfileValue['adminPassword'] = parameters.virtualMachine.virtualMachineProperties.oSProfile.adminPassword;
        }
        
        if (parameters.virtualMachine.virtualMachineProperties.oSProfile.windowsConfiguration !== null && parameters.virtualMachine.virtualMachineProperties.oSProfile.windowsConfiguration !== undefined) {
          var windowsConfigurationValue = {};
          osProfileValue['windowsConfiguration'] = windowsConfigurationValue;
          
          if (parameters.virtualMachine.virtualMachineProperties.oSProfile.windowsConfiguration.provisionVMAgent !== null && parameters.virtualMachine.virtualMachineProperties.oSProfile.windowsConfiguration.provisionVMAgent !== undefined) {
            windowsConfigurationValue['provisionVMAgent'] = parameters.virtualMachine.virtualMachineProperties.oSProfile.windowsConfiguration.provisionVMAgent;
          }
        }
      }
      
      if (parameters.virtualMachine.virtualMachineProperties.networkProfile !== null && parameters.virtualMachine.virtualMachineProperties.networkProfile !== undefined) {
        var networkProfileValue = {};
        propertiesValue['networkProfile'] = networkProfileValue;
        
        if (parameters.virtualMachine.virtualMachineProperties.networkProfile.networkInterfaces !== null && parameters.virtualMachine.virtualMachineProperties.networkProfile.networkInterfaces !== undefined) {
          var networkInterfacesArray = [];
          for (var loweredIndex4 = 0; loweredIndex4 < parameters.virtualMachine.virtualMachineProperties.networkProfile.networkInterfaces.length; loweredIndex4 = loweredIndex4 + 1) {
            var networkInterfacesItem = parameters.virtualMachine.virtualMachineProperties.networkProfile.networkInterfaces[loweredIndex4];
            var networkInterfaceReferenceValue = {};
            networkInterfacesArray.push(networkInterfaceReferenceValue);
            
            if (networkInterfacesItem.referenceUri !== null && networkInterfacesItem.referenceUri !== undefined) {
              networkInterfaceReferenceValue['id'] = networkInterfacesItem.referenceUri;
            }
          }
          networkProfileValue['networkInterfaces'] = networkInterfacesArray;
        }
      }
      
      if (parameters.virtualMachine.virtualMachineProperties.provisioningState !== null && parameters.virtualMachine.virtualMachineProperties.provisioningState !== undefined) {
        propertiesValue['provisioningState'] = parameters.virtualMachine.virtualMachineProperties.provisioningState;
      }
      
      if (parameters.virtualMachine.virtualMachineProperties.availabilitySetReference !== null && parameters.virtualMachine.virtualMachineProperties.availabilitySetReference !== undefined) {
        var availabilitySetValue = {};
        propertiesValue['availabilitySet'] = availabilitySetValue;
        
        if (parameters.virtualMachine.virtualMachineProperties.availabilitySetReference.referenceUri !== null && parameters.virtualMachine.virtualMachineProperties.availabilitySetReference.referenceUri !== undefined) {
          availabilitySetValue['id'] = parameters.virtualMachine.virtualMachineProperties.availabilitySetReference.referenceUri;
        }
      }
    }
    
    if (parameters.virtualMachine.virtualMachineSubResources !== null && parameters.virtualMachine.virtualMachineSubResources !== undefined) {
      var resourcesValue = {};
      virtualMachineCreateOrUpdateParametersValue['resources'] = resourcesValue;
      
      if (parameters.virtualMachine.virtualMachineSubResources.extensions !== null && parameters.virtualMachine.virtualMachineSubResources.extensions !== undefined) {
        var extensionsArray = [];
        for (var loweredIndex5 = 0; loweredIndex5 < parameters.virtualMachine.virtualMachineSubResources.extensions.length; loweredIndex5 = loweredIndex5 + 1) {
          var extensionsItem = parameters.virtualMachine.virtualMachineSubResources.extensions[loweredIndex5];
          
          if (extensionsItem.virtualMachineExtensionProperties !== null && extensionsItem.virtualMachineExtensionProperties !== undefined) {
            var propertiesValue2 = {};
            requestDoc['properties'] = propertiesValue2;
            
            propertiesValue2['publisher'] = extensionsItem.virtualMachineExtensionProperties.publisher;
            
            propertiesValue2['type'] = extensionsItem.virtualMachineExtensionProperties.type;
            
            propertiesValue2['typeHandlerVersion'] = extensionsItem.virtualMachineExtensionProperties.typeHandlerVersion;
            
            if (extensionsItem.virtualMachineExtensionProperties.settings !== null && extensionsItem.virtualMachineExtensionProperties.settings !== undefined) {
              propertiesValue2['settings'] = extensionsItem.virtualMachineExtensionProperties.settings;
            }
            
            if (extensionsItem.virtualMachineExtensionProperties.protectedSettings !== null && extensionsItem.virtualMachineExtensionProperties.protectedSettings !== undefined) {
              propertiesValue2['protectedSettings'] = extensionsItem.virtualMachineExtensionProperties.protectedSettings;
            }
            
            if (extensionsItem.virtualMachineExtensionProperties.provisioningState !== null && extensionsItem.virtualMachineExtensionProperties.provisioningState !== undefined) {
              propertiesValue2['provisioningState'] = extensionsItem.virtualMachineExtensionProperties.provisioningState;
            }
            
            if (extensionsItem.virtualMachineExtensionProperties.instanceView !== null && extensionsItem.virtualMachineExtensionProperties.instanceView !== undefined) {
              var instanceViewValue = {};
              propertiesValue2['instanceView'] = instanceViewValue;
              
              if (extensionsItem.virtualMachineExtensionProperties.instanceView.name !== null && extensionsItem.virtualMachineExtensionProperties.instanceView.name !== undefined) {
                instanceViewValue['name'] = extensionsItem.virtualMachineExtensionProperties.instanceView.name;
              }
              
              if (extensionsItem.virtualMachineExtensionProperties.instanceView.type !== null && extensionsItem.virtualMachineExtensionProperties.instanceView.type !== undefined) {
                instanceViewValue['type'] = extensionsItem.virtualMachineExtensionProperties.instanceView.type;
              }
              
              if (extensionsItem.virtualMachineExtensionProperties.instanceView.typeHandlerVersion !== null && extensionsItem.virtualMachineExtensionProperties.instanceView.typeHandlerVersion !== undefined) {
                instanceViewValue['typeHandlerVersion'] = extensionsItem.virtualMachineExtensionProperties.instanceView.typeHandlerVersion;
              }
              
              if (extensionsItem.virtualMachineExtensionProperties.instanceView.subStatuses !== null && extensionsItem.virtualMachineExtensionProperties.instanceView.subStatuses !== undefined) {
                var substatusesArray = [];
                for (var loweredIndex6 = 0; loweredIndex6 < extensionsItem.virtualMachineExtensionProperties.instanceView.subStatuses.length; loweredIndex6 = loweredIndex6 + 1) {
                  var substatusesItem = extensionsItem.virtualMachineExtensionProperties.instanceView.subStatuses[loweredIndex6];
                  
                  if (substatusesItem.code !== null && substatusesItem.code !== undefined) {
                    requestDoc['code'] = substatusesItem.code;
                  }
                  
                  if (substatusesItem.level !== null && substatusesItem.level !== undefined) {
                    requestDoc['level'] = substatusesItem.level;
                  }
                  
                  if (substatusesItem.displayStatus !== null && substatusesItem.displayStatus !== undefined) {
                    requestDoc['displayStatus'] = substatusesItem.displayStatus;
                  }
                  
                  if (substatusesItem.message !== null && substatusesItem.message !== undefined) {
                    requestDoc['message'] = substatusesItem.message;
                  }
                  
                  if (substatusesItem.time !== null && substatusesItem.time !== undefined) {
                    requestDoc['time'] = substatusesItem.time;
                  }
                }
                instanceViewValue['substatuses'] = substatusesArray;
              }
              
              if (extensionsItem.virtualMachineExtensionProperties.instanceView.statuses !== null && extensionsItem.virtualMachineExtensionProperties.instanceView.statuses !== undefined) {
                var statusesArray = [];
                for (var loweredIndex7 = 0; loweredIndex7 < extensionsItem.virtualMachineExtensionProperties.instanceView.statuses.length; loweredIndex7 = loweredIndex7 + 1) {
                  var statusesItem = extensionsItem.virtualMachineExtensionProperties.instanceView.statuses[loweredIndex7];
                  
                  if (statusesItem.code !== null && statusesItem.code !== undefined) {
                    requestDoc['code'] = statusesItem.code;
                  }
                  
                  if (statusesItem.level !== null && statusesItem.level !== undefined) {
                    requestDoc['level'] = statusesItem.level;
                  }
                  
                  if (statusesItem.displayStatus !== null && statusesItem.displayStatus !== undefined) {
                    requestDoc['displayStatus'] = statusesItem.displayStatus;
                  }
                  
                  if (statusesItem.message !== null && statusesItem.message !== undefined) {
                    requestDoc['message'] = statusesItem.message;
                  }
                  
                  if (statusesItem.time !== null && statusesItem.time !== undefined) {
                    requestDoc['time'] = statusesItem.time;
                  }
                }
                instanceViewValue['statuses'] = statusesArray;
              }
            }
          }
          
          if (extensionsItem.id !== null && extensionsItem.id !== undefined) {
            requestDoc['id'] = extensionsItem.id;
          }
          
          if (extensionsItem.name !== null && extensionsItem.name !== undefined) {
            requestDoc['name'] = extensionsItem.name;
          }
          
          if (extensionsItem.type !== null && extensionsItem.type !== undefined) {
            requestDoc['type'] = extensionsItem.type;
          }
          
          if (extensionsItem.location !== null && extensionsItem.location !== undefined) {
            requestDoc['location'] = extensionsItem.location;
          }
          
          if (extensionsItem.tags !== null && extensionsItem.tags !== undefined) {
            var tagsDictionary = {};
            for (var tagsKey in extensionsItem.tags) {
              var tagsValue = extensionsItem.tags[tagsKey];
              tagsDictionary[tagsKey] = tagsValue;
            }
            requestDoc = tagsDictionary;
          }
        }
        resourcesValue['extensions'] = extensionsArray;
      }
    }
    
    if (parameters.virtualMachine.id !== null && parameters.virtualMachine.id !== undefined) {
      virtualMachineCreateOrUpdateParametersValue['id'] = parameters.virtualMachine.id;
    }
    
    if (parameters.virtualMachine.name !== null && parameters.virtualMachine.name !== undefined) {
      virtualMachineCreateOrUpdateParametersValue['name'] = parameters.virtualMachine.name;
    }
    
    if (parameters.virtualMachine.type !== null && parameters.virtualMachine.type !== undefined) {
      virtualMachineCreateOrUpdateParametersValue['type'] = parameters.virtualMachine.type;
    }
    
    if (parameters.virtualMachine.location !== null && parameters.virtualMachine.location !== undefined) {
      virtualMachineCreateOrUpdateParametersValue['location'] = parameters.virtualMachine.location;
    }
    
    if (parameters.virtualMachine.tags !== null && parameters.virtualMachine.tags !== undefined) {
      var tagsDictionary2 = {};
      for (var tagsKey2 in parameters.virtualMachine.tags) {
        var tagsValue2 = parameters.virtualMachine.tags[tagsKey2];
        tagsDictionary2[tagsKey2] = tagsValue2;
      }
      virtualMachineCreateOrUpdateParametersValue['tags'] = tagsDictionary2;
    }
    
    requestContent = JSON.stringify(requestDoc);
    httpRequest.body = requestContent;
    httpRequest.headers['Content-Length'] = Buffer.isBuffer(requestContent) ? requestContent.length : Buffer.byteLength(requestContent, 'UTF8');
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200 && statusCode !== 201) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200 || statusCode === 201) {
        var responseContent = body;
        result = { tags: {} };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualMachineInstance = { tags: {} };
          result.virtualMachine = virtualMachineInstance;
          
          var propertiesValue3 = responseDoc['properties'];
          if (propertiesValue3 !== null && propertiesValue3 !== undefined) {
            var propertiesInstance = {};
            virtualMachineInstance.virtualMachineProperties = propertiesInstance;
            
            var hardwareProfileValue2 = propertiesValue3['hardwareProfile'];
            if (hardwareProfileValue2 !== null && hardwareProfileValue2 !== undefined) {
              var hardwareProfileInstance = {};
              propertiesInstance.hardwareProfile = hardwareProfileInstance;
              
              var vmSizeValue = hardwareProfileValue2['vmSize'];
              if (vmSizeValue !== null && vmSizeValue !== undefined) {
                var vmSizeInstance = vmSizeValue;
                hardwareProfileInstance.virtualMachineSize = vmSizeInstance;
              }
            }
            
            var storageProfileValue2 = propertiesValue3['storageProfile'];
            if (storageProfileValue2 !== null && storageProfileValue2 !== undefined) {
              var storageProfileInstance = { dataDisks: [] };
              propertiesInstance.storageProfile = storageProfileInstance;
              
              var sourceImageValue2 = storageProfileValue2['sourceImage'];
              if (sourceImageValue2 !== null && sourceImageValue2 !== undefined) {
                var sourceImageInstance = {};
                storageProfileInstance.sourceImage = sourceImageInstance;
                
                var idValue = sourceImageValue2['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  sourceImageInstance.referenceUri = idInstance;
                }
              }
              
              var destinationVhdsContainerValue = storageProfileValue2['destinationVhdsContainer'];
              if (destinationVhdsContainerValue !== null && destinationVhdsContainerValue !== undefined) {
                var destinationVhdsContainerInstance = destinationVhdsContainerValue;
                storageProfileInstance.destinationVhdsContainer = destinationVhdsContainerInstance;
              }
              
              var osDiskValue2 = storageProfileValue2['osDisk'];
              if (osDiskValue2 !== null && osDiskValue2 !== undefined) {
                var osDiskInstance = {};
                storageProfileInstance.oSDisk = osDiskInstance;
                
                var osTypeValue = osDiskValue2['osType'];
                if (osTypeValue !== null && osTypeValue !== undefined) {
                  var osTypeInstance = osTypeValue;
                  osDiskInstance.operatingSystemType = osTypeInstance;
                }
                
                var nameValue = osDiskValue2['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  osDiskInstance.name = nameInstance;
                }
                
                var vhdValue3 = osDiskValue2['vhd'];
                if (vhdValue3 !== null && vhdValue3 !== undefined) {
                  var vhdInstance = {};
                  osDiskInstance.virtualHardDisk = vhdInstance;
                  
                  var uriValue = vhdValue3['uri'];
                  if (uriValue !== null && uriValue !== undefined) {
                    var uriInstance = uriValue;
                    vhdInstance.uri = uriInstance;
                  }
                }
                
                var cachingValue = osDiskValue2['caching'];
                if (cachingValue !== null && cachingValue !== undefined) {
                  var cachingInstance = cachingValue;
                  osDiskInstance.caching = cachingInstance;
                }
              }
              
              var dataDisksArray2 = storageProfileValue2['dataDisks'];
              if (dataDisksArray2 !== null && dataDisksArray2 !== undefined) {
                for (var loweredIndex8 = 0; loweredIndex8 < dataDisksArray2.length; loweredIndex8 = loweredIndex8 + 1) {
                  var dataDisksValue = dataDisksArray2[loweredIndex8];
                  var dataDiskInstance = {};
                  storageProfileInstance.dataDisks.push(dataDiskInstance);
                  
                  var lunValue = dataDisksValue['lun'];
                  if (lunValue !== null && lunValue !== undefined) {
                    var lunInstance = lunValue;
                    dataDiskInstance.lun = lunInstance;
                  }
                  
                  var diskSizeGBValue = dataDisksValue['diskSizeGB'];
                  if (diskSizeGBValue !== null && diskSizeGBValue !== undefined) {
                    var diskSizeGBInstance = diskSizeGBValue;
                    dataDiskInstance.diskSizeGB = diskSizeGBInstance;
                  }
                  
                  var nameValue2 = dataDisksValue['name'];
                  if (nameValue2 !== null && nameValue2 !== undefined) {
                    var nameInstance2 = nameValue2;
                    dataDiskInstance.name = nameInstance2;
                  }
                  
                  var vhdValue4 = dataDisksValue['vhd'];
                  if (vhdValue4 !== null && vhdValue4 !== undefined) {
                    var vhdInstance2 = {};
                    dataDiskInstance.virtualHardDisk = vhdInstance2;
                    
                    var uriValue2 = vhdValue4['uri'];
                    if (uriValue2 !== null && uriValue2 !== undefined) {
                      var uriInstance2 = uriValue2;
                      vhdInstance2.uri = uriInstance2;
                    }
                  }
                  
                  var cachingValue2 = dataDisksValue['caching'];
                  if (cachingValue2 !== null && cachingValue2 !== undefined) {
                    var cachingInstance2 = cachingValue2;
                    dataDiskInstance.caching = cachingInstance2;
                  }
                }
              }
            }
            
            var osProfileValue2 = propertiesValue3['osProfile'];
            if (osProfileValue2 !== null && osProfileValue2 !== undefined) {
              var osProfileInstance = {};
              propertiesInstance.oSProfile = osProfileInstance;
              
              var computerNameValue = osProfileValue2['computerName'];
              if (computerNameValue !== null && computerNameValue !== undefined) {
                var computerNameInstance = computerNameValue;
                osProfileInstance.computerName = computerNameInstance;
              }
              
              var adminUsernameValue = osProfileValue2['adminUsername'];
              if (adminUsernameValue !== null && adminUsernameValue !== undefined) {
                var adminUsernameInstance = adminUsernameValue;
                osProfileInstance.adminUsername = adminUsernameInstance;
              }
              
              var adminPasswordValue = osProfileValue2['adminPassword'];
              if (adminPasswordValue !== null && adminPasswordValue !== undefined) {
                var adminPasswordInstance = adminPasswordValue;
                osProfileInstance.adminPassword = adminPasswordInstance;
              }
              
              var windowsConfigurationValue2 = osProfileValue2['windowsConfiguration'];
              if (windowsConfigurationValue2 !== null && windowsConfigurationValue2 !== undefined) {
                var windowsConfigurationInstance = {};
                osProfileInstance.windowsConfiguration = windowsConfigurationInstance;
                
                var provisionVMAgentValue = windowsConfigurationValue2['provisionVMAgent'];
                if (provisionVMAgentValue !== null && provisionVMAgentValue !== undefined) {
                  var provisionVMAgentInstance = provisionVMAgentValue;
                  windowsConfigurationInstance.provisionVMAgent = provisionVMAgentInstance;
                }
              }
            }
            
            var networkProfileValue2 = propertiesValue3['networkProfile'];
            if (networkProfileValue2 !== null && networkProfileValue2 !== undefined) {
              var networkProfileInstance = { networkInterfaces: [] };
              propertiesInstance.networkProfile = networkProfileInstance;
              
              var networkInterfacesArray2 = networkProfileValue2['networkInterfaces'];
              if (networkInterfacesArray2 !== null && networkInterfacesArray2 !== undefined) {
                for (var loweredIndex9 = 0; loweredIndex9 < networkInterfacesArray2.length; loweredIndex9 = loweredIndex9 + 1) {
                  var networkInterfacesValue = networkInterfacesArray2[loweredIndex9];
                  var networkInterfaceReferenceInstance = {};
                  networkProfileInstance.networkInterfaces.push(networkInterfaceReferenceInstance);
                  
                  var idValue2 = networkInterfacesValue['id'];
                  if (idValue2 !== null && idValue2 !== undefined) {
                    var idInstance2 = idValue2;
                    networkInterfaceReferenceInstance.referenceUri = idInstance2;
                  }
                }
              }
            }
            
            var provisioningStateValue = propertiesValue3['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var availabilitySetValue2 = propertiesValue3['availabilitySet'];
            if (availabilitySetValue2 !== null && availabilitySetValue2 !== undefined) {
              var availabilitySetInstance = {};
              propertiesInstance.availabilitySetReference = availabilitySetInstance;
              
              var idValue3 = availabilitySetValue2['id'];
              if (idValue3 !== null && idValue3 !== undefined) {
                var idInstance3 = idValue3;
                availabilitySetInstance.referenceUri = idInstance3;
              }
            }
          }
          
          var resourcesValue2 = responseDoc['resources'];
          if (resourcesValue2 !== null && resourcesValue2 !== undefined) {
            var resourcesInstance = { extensions: [] };
            virtualMachineInstance.virtualMachineSubResources = resourcesInstance;
            
            var extensionsArray2 = resourcesValue2['extensions'];
            if (extensionsArray2 !== null && extensionsArray2 !== undefined) {
              for (var loweredIndex10 = 0; loweredIndex10 < extensionsArray2.length; loweredIndex10 = loweredIndex10 + 1) {
                var extensionsValue = extensionsArray2[loweredIndex10];
                var virtualMachineExtensionInstance = { tags: {} };
                resourcesInstance.extensions.push(virtualMachineExtensionInstance);
                
                var propertiesValue4 = extensionsValue['properties'];
                if (propertiesValue4 !== null && propertiesValue4 !== undefined) {
                  var propertiesInstance2 = {};
                  virtualMachineExtensionInstance.virtualMachineExtensionProperties = propertiesInstance2;
                  
                  var publisherValue = propertiesValue4['publisher'];
                  if (publisherValue !== null && publisherValue !== undefined) {
                    var publisherInstance = publisherValue;
                    propertiesInstance2.publisher = publisherInstance;
                  }
                  
                  var typeValue = propertiesValue4['type'];
                  if (typeValue !== null && typeValue !== undefined) {
                    var typeInstance = typeValue;
                    propertiesInstance2.type = typeInstance;
                  }
                  
                  var typeHandlerVersionValue = propertiesValue4['typeHandlerVersion'];
                  if (typeHandlerVersionValue !== null && typeHandlerVersionValue !== undefined) {
                    var typeHandlerVersionInstance = typeHandlerVersionValue;
                    propertiesInstance2.typeHandlerVersion = typeHandlerVersionInstance;
                  }
                  
                  var settingsValue = propertiesValue4['settings'];
                  if (settingsValue !== null && settingsValue !== undefined) {
                    var settingsInstance = settingsValue;
                    propertiesInstance2.settings = settingsInstance;
                  }
                  
                  var protectedSettingsValue = propertiesValue4['protectedSettings'];
                  if (protectedSettingsValue !== null && protectedSettingsValue !== undefined) {
                    var protectedSettingsInstance = protectedSettingsValue;
                    propertiesInstance2.protectedSettings = protectedSettingsInstance;
                  }
                  
                  var provisioningStateValue2 = propertiesValue4['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    propertiesInstance2.provisioningState = provisioningStateInstance2;
                  }
                  
                  var instanceViewValue2 = propertiesValue4['instanceView'];
                  if (instanceViewValue2 !== null && instanceViewValue2 !== undefined) {
                    var instanceViewInstance = { statuses: [], subStatuses: [] };
                    propertiesInstance2.instanceView = instanceViewInstance;
                    
                    var nameValue3 = instanceViewValue2['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      instanceViewInstance.name = nameInstance3;
                    }
                    
                    var typeValue2 = instanceViewValue2['type'];
                    if (typeValue2 !== null && typeValue2 !== undefined) {
                      var typeInstance2 = typeValue2;
                      instanceViewInstance.type = typeInstance2;
                    }
                    
                    var typeHandlerVersionValue2 = instanceViewValue2['typeHandlerVersion'];
                    if (typeHandlerVersionValue2 !== null && typeHandlerVersionValue2 !== undefined) {
                      var typeHandlerVersionInstance2 = typeHandlerVersionValue2;
                      instanceViewInstance.typeHandlerVersion = typeHandlerVersionInstance2;
                    }
                    
                    var substatusesArray2 = instanceViewValue2['substatuses'];
                    if (substatusesArray2 !== null && substatusesArray2 !== undefined) {
                      for (var loweredIndex11 = 0; loweredIndex11 < substatusesArray2.length; loweredIndex11 = loweredIndex11 + 1) {
                        var substatusesValue = substatusesArray2[loweredIndex11];
                        var instanceViewStatusInstance = {};
                        instanceViewInstance.subStatuses.push(instanceViewStatusInstance);
                        
                        var codeValue = substatusesValue['code'];
                        if (codeValue !== null && codeValue !== undefined) {
                          var codeInstance = codeValue;
                          instanceViewStatusInstance.code = codeInstance;
                        }
                        
                        var levelValue = substatusesValue['level'];
                        if (levelValue !== null && levelValue !== undefined) {
                          var levelInstance = levelValue;
                          instanceViewStatusInstance.level = levelInstance;
                        }
                        
                        var displayStatusValue = substatusesValue['displayStatus'];
                        if (displayStatusValue !== null && displayStatusValue !== undefined) {
                          var displayStatusInstance = displayStatusValue;
                          instanceViewStatusInstance.displayStatus = displayStatusInstance;
                        }
                        
                        var messageValue = substatusesValue['message'];
                        if (messageValue !== null && messageValue !== undefined) {
                          var messageInstance = messageValue;
                          instanceViewStatusInstance.message = messageInstance;
                        }
                        
                        var timeValue = substatusesValue['time'];
                        if (timeValue !== null && timeValue !== undefined) {
                          var timeInstance = timeValue;
                          instanceViewStatusInstance.time = timeInstance;
                        }
                      }
                    }
                    
                    var statusesArray2 = instanceViewValue2['statuses'];
                    if (statusesArray2 !== null && statusesArray2 !== undefined) {
                      for (var loweredIndex12 = 0; loweredIndex12 < statusesArray2.length; loweredIndex12 = loweredIndex12 + 1) {
                        var statusesValue = statusesArray2[loweredIndex12];
                        var instanceViewStatusInstance2 = {};
                        instanceViewInstance.statuses.push(instanceViewStatusInstance2);
                        
                        var codeValue2 = statusesValue['code'];
                        if (codeValue2 !== null && codeValue2 !== undefined) {
                          var codeInstance2 = codeValue2;
                          instanceViewStatusInstance2.code = codeInstance2;
                        }
                        
                        var levelValue2 = statusesValue['level'];
                        if (levelValue2 !== null && levelValue2 !== undefined) {
                          var levelInstance2 = levelValue2;
                          instanceViewStatusInstance2.level = levelInstance2;
                        }
                        
                        var displayStatusValue2 = statusesValue['displayStatus'];
                        if (displayStatusValue2 !== null && displayStatusValue2 !== undefined) {
                          var displayStatusInstance2 = displayStatusValue2;
                          instanceViewStatusInstance2.displayStatus = displayStatusInstance2;
                        }
                        
                        var messageValue2 = statusesValue['message'];
                        if (messageValue2 !== null && messageValue2 !== undefined) {
                          var messageInstance2 = messageValue2;
                          instanceViewStatusInstance2.message = messageInstance2;
                        }
                        
                        var timeValue2 = statusesValue['time'];
                        if (timeValue2 !== null && timeValue2 !== undefined) {
                          var timeInstance2 = timeValue2;
                          instanceViewStatusInstance2.time = timeInstance2;
                        }
                      }
                    }
                  }
                }
                
                var idValue4 = extensionsValue['id'];
                if (idValue4 !== null && idValue4 !== undefined) {
                  var idInstance4 = idValue4;
                  virtualMachineExtensionInstance.id = idInstance4;
                }
                
                var nameValue4 = extensionsValue['name'];
                if (nameValue4 !== null && nameValue4 !== undefined) {
                  var nameInstance4 = nameValue4;
                  virtualMachineExtensionInstance.name = nameInstance4;
                }
                
                var typeValue3 = extensionsValue['type'];
                if (typeValue3 !== null && typeValue3 !== undefined) {
                  var typeInstance3 = typeValue3;
                  virtualMachineExtensionInstance.type = typeInstance3;
                }
                
                var locationValue = extensionsValue['location'];
                if (locationValue !== null && locationValue !== undefined) {
                  var locationInstance = locationValue;
                  virtualMachineExtensionInstance.location = locationInstance;
                }
                
                var tagsSequenceElement = extensionsValue['tags'];
                if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                  for (var property in tagsSequenceElement) {
                    var tagsKey3 = property;
                    var tagsValue3 = tagsSequenceElement[property];
                    virtualMachineExtensionInstance.tags[tagsKey3] = tagsValue3;
                  }
                }
              }
            }
          }
          
          var idValue5 = responseDoc['id'];
          if (idValue5 !== null && idValue5 !== undefined) {
            var idInstance5 = idValue5;
            virtualMachineInstance.id = idInstance5;
          }
          
          var nameValue5 = responseDoc['name'];
          if (nameValue5 !== null && nameValue5 !== undefined) {
            var nameInstance5 = nameValue5;
            virtualMachineInstance.name = nameInstance5;
          }
          
          var typeValue4 = responseDoc['type'];
          if (typeValue4 !== null && typeValue4 !== undefined) {
            var typeInstance4 = typeValue4;
            virtualMachineInstance.type = typeInstance4;
          }
          
          var locationValue2 = responseDoc['location'];
          if (locationValue2 !== null && locationValue2 !== undefined) {
            var locationInstance2 = locationValue2;
            virtualMachineInstance.location = locationInstance2;
          }
          
          var tagsSequenceElement2 = responseDoc['tags'];
          if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
            for (var property2 in tagsSequenceElement2) {
              var tagsKey4 = property2;
              var tagsValue4 = tagsSequenceElement2[property2];
              virtualMachineInstance.tags[tagsKey4] = tagsValue4;
            }
          }
          
          var nameValue6 = responseDoc['name'];
          if (nameValue6 !== null && nameValue6 !== undefined) {
            var nameInstance6 = nameValue6;
            result.name = nameInstance6;
          }
          
          var locationValue3 = responseDoc['location'];
          if (locationValue3 !== null && locationValue3 !== undefined) {
            var locationInstance3 = locationValue3;
            result.location = locationInstance3;
          }
          
          var typeValue5 = responseDoc['Type'];
          if (typeValue5 !== null && typeValue5 !== undefined) {
            var typeInstance5 = typeValue5;
            result.type = typeInstance5;
          }
          
          var tagsSequenceElement3 = responseDoc['tags'];
          if (tagsSequenceElement3 !== null && tagsSequenceElement3 !== undefined) {
            for (var property3 in tagsSequenceElement3) {
              var tagsKey5 = property3;
              var tagsValue5 = tagsSequenceElement3[property3];
              result.tags[tagsKey5] = tagsValue5;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * Shuts down the Virtual Machine and releases the compute resources. You are
   * not billed for the compute resources that this Virtual Machine uses.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.beginDeallocating = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    url2 = url2 + '/deallocate';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.beginDeleting = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'DELETE';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.beginRestarting = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    url2 = url2 + '/restart';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.beginStarting = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    url2 = url2 + '/start';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.beginStopping = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    url2 = url2 + '/stop';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'POST';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 202) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      result = {};
      result.statusCode = statusCode;
      result.azureAsyncOperation = response.headers['azure-asyncoperation'];
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {VirtualMachineCreateOrUpdateParameters} parameters Parameters
   * supplied to the Create Virtual Machine operation.
   * 
   * @param {VirtualMachine} parameters.virtualMachine Gets or sets information
   * about a virtual machine being created of updated.
   * 
   * @param {VirtualMachineProperties}
   * [parameters.virtualMachine.virtualMachineProperties] Virtual machine
   * properties.
   * 
   * @param {HardwareProfile}
   * [parameters.virtualMachine.virtualMachineProperties.hardwareProfile] The
   * hardware profile.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.hardwareProfile.virtualMachineSize]
   * The virtual machine size.
   * 
   * @param {StorageProfile}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile] The
   * storage profile.
   * 
   * @param {SourceImageReference}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.sourceImage]
   * The source image reference.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.sourceImage.referenceUri]
   * The relative URL in the previous Service Management API's namespace of
   * the source image.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.destinationVhdsContainer]
   * The destination container for VHDs.
   * 
   * @param {OSDisk}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk]
   * The OS disk.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.operatingSystemType]
   * The Operating System type.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.name]
   * The disk name.
   * 
   * @param {VirtualHardDisk}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.virtualHardDisk]
   * The Virtual Hard Disk.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.virtualHardDisk.uri]
   * The vhd uri.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.oSDisk.caching]
   * The caching type.
   * 
   * @param {array}
   * [parameters.virtualMachine.virtualMachineProperties.storageProfile.dataDisks]
   * The data disks.
   * 
   * @param {OSProfile}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile] The OS
   * profile.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile.computerName]
   * The computer name.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile.adminUsername]
   * The admin user name.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile.adminPassword]
   * The admin user password.
   * 
   * @param {WindowsConfiguration}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile.windowsConfiguration]
   * Windows Configuration of the OS profile.
   * 
   * @param {boolean}
   * [parameters.virtualMachine.virtualMachineProperties.oSProfile.windowsConfiguration.provisionVMAgent]
   * Indicates whether VM Agent should be provisioned on the Virtual Machine.
   * 
   * @param {NetworkProfile}
   * [parameters.virtualMachine.virtualMachineProperties.networkProfile] The
   * network profile.
   * 
   * @param {array}
   * [parameters.virtualMachine.virtualMachineProperties.networkProfile.networkInterfaces]
   * The network interfaces.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.provisioningState]
   * The provisioning state, which only appears in the response.
   * 
   * @param {AvailabilitySetReference}
   * [parameters.virtualMachine.virtualMachineProperties.availabilitySetReference]
   * Reference Id of the availailbity set to which this virtual machine
   * belongs.
   * 
   * @param {string}
   * [parameters.virtualMachine.virtualMachineProperties.availabilitySetReference.referenceUri]
   * The relative URL in the previous Service Management API's namespace of
   * the source image.
   * 
   * @param {VirtualMachineSubResources}
   * [parameters.virtualMachine.virtualMachineSubResources] Virtual machine
   * child resources.
   * 
   * @param {array}
   * [parameters.virtualMachine.virtualMachineSubResources.extensions] The
   * virtual machine child extension resources.
   * 
   * @param {string} [parameters.virtualMachine.id] Resource reference Id.
   * 
   * @param {string} [parameters.virtualMachine.name] The name of the resource.
   * 
   * @param {string} [parameters.virtualMachine.type] Gets or sets the type of
   * the resource, such as 'Microsoft.Compute/virtualMachines'.
   * 
   * @param {string} [parameters.virtualMachine.location] Gets or sets the
   * location of the resource.
   * 
   * @param {object} [parameters.virtualMachine.tags] Gets or sets the tags
   * attached to the resource.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.createOrUpdate = function(resourceGroupName, parameters, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginCreateOrUpdating(resourceGroupName, parameters, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * Shuts down the Virtual Machine and releases the compute resources. You are
   * not billed for the compute resources that this Virtual Machine uses.
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.deallocate = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginDeallocating(resourceGroupName, vmName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.deleteMethod = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginDeleting(resourceGroupName, vmName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.get = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { tags: {} };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualMachineInstance = { tags: {} };
          result.virtualMachine = virtualMachineInstance;
          
          var propertiesValue = responseDoc['properties'];
          if (propertiesValue !== null && propertiesValue !== undefined) {
            var propertiesInstance = {};
            virtualMachineInstance.virtualMachineProperties = propertiesInstance;
            
            var hardwareProfileValue = propertiesValue['hardwareProfile'];
            if (hardwareProfileValue !== null && hardwareProfileValue !== undefined) {
              var hardwareProfileInstance = {};
              propertiesInstance.hardwareProfile = hardwareProfileInstance;
              
              var vmSizeValue = hardwareProfileValue['vmSize'];
              if (vmSizeValue !== null && vmSizeValue !== undefined) {
                var vmSizeInstance = vmSizeValue;
                hardwareProfileInstance.virtualMachineSize = vmSizeInstance;
              }
            }
            
            var storageProfileValue = propertiesValue['storageProfile'];
            if (storageProfileValue !== null && storageProfileValue !== undefined) {
              var storageProfileInstance = { dataDisks: [] };
              propertiesInstance.storageProfile = storageProfileInstance;
              
              var sourceImageValue = storageProfileValue['sourceImage'];
              if (sourceImageValue !== null && sourceImageValue !== undefined) {
                var sourceImageInstance = {};
                storageProfileInstance.sourceImage = sourceImageInstance;
                
                var idValue = sourceImageValue['id'];
                if (idValue !== null && idValue !== undefined) {
                  var idInstance = idValue;
                  sourceImageInstance.referenceUri = idInstance;
                }
              }
              
              var destinationVhdsContainerValue = storageProfileValue['destinationVhdsContainer'];
              if (destinationVhdsContainerValue !== null && destinationVhdsContainerValue !== undefined) {
                var destinationVhdsContainerInstance = destinationVhdsContainerValue;
                storageProfileInstance.destinationVhdsContainer = destinationVhdsContainerInstance;
              }
              
              var osDiskValue = storageProfileValue['osDisk'];
              if (osDiskValue !== null && osDiskValue !== undefined) {
                var osDiskInstance = {};
                storageProfileInstance.oSDisk = osDiskInstance;
                
                var osTypeValue = osDiskValue['osType'];
                if (osTypeValue !== null && osTypeValue !== undefined) {
                  var osTypeInstance = osTypeValue;
                  osDiskInstance.operatingSystemType = osTypeInstance;
                }
                
                var nameValue = osDiskValue['name'];
                if (nameValue !== null && nameValue !== undefined) {
                  var nameInstance = nameValue;
                  osDiskInstance.name = nameInstance;
                }
                
                var vhdValue = osDiskValue['vhd'];
                if (vhdValue !== null && vhdValue !== undefined) {
                  var vhdInstance = {};
                  osDiskInstance.virtualHardDisk = vhdInstance;
                  
                  var uriValue = vhdValue['uri'];
                  if (uriValue !== null && uriValue !== undefined) {
                    var uriInstance = uriValue;
                    vhdInstance.uri = uriInstance;
                  }
                }
                
                var cachingValue = osDiskValue['caching'];
                if (cachingValue !== null && cachingValue !== undefined) {
                  var cachingInstance = cachingValue;
                  osDiskInstance.caching = cachingInstance;
                }
              }
              
              var dataDisksArray = storageProfileValue['dataDisks'];
              if (dataDisksArray !== null && dataDisksArray !== undefined) {
                for (var loweredIndex1 = 0; loweredIndex1 < dataDisksArray.length; loweredIndex1 = loweredIndex1 + 1) {
                  var dataDisksValue = dataDisksArray[loweredIndex1];
                  var dataDiskInstance = {};
                  storageProfileInstance.dataDisks.push(dataDiskInstance);
                  
                  var lunValue = dataDisksValue['lun'];
                  if (lunValue !== null && lunValue !== undefined) {
                    var lunInstance = lunValue;
                    dataDiskInstance.lun = lunInstance;
                  }
                  
                  var diskSizeGBValue = dataDisksValue['diskSizeGB'];
                  if (diskSizeGBValue !== null && diskSizeGBValue !== undefined) {
                    var diskSizeGBInstance = diskSizeGBValue;
                    dataDiskInstance.diskSizeGB = diskSizeGBInstance;
                  }
                  
                  var nameValue2 = dataDisksValue['name'];
                  if (nameValue2 !== null && nameValue2 !== undefined) {
                    var nameInstance2 = nameValue2;
                    dataDiskInstance.name = nameInstance2;
                  }
                  
                  var vhdValue2 = dataDisksValue['vhd'];
                  if (vhdValue2 !== null && vhdValue2 !== undefined) {
                    var vhdInstance2 = {};
                    dataDiskInstance.virtualHardDisk = vhdInstance2;
                    
                    var uriValue2 = vhdValue2['uri'];
                    if (uriValue2 !== null && uriValue2 !== undefined) {
                      var uriInstance2 = uriValue2;
                      vhdInstance2.uri = uriInstance2;
                    }
                  }
                  
                  var cachingValue2 = dataDisksValue['caching'];
                  if (cachingValue2 !== null && cachingValue2 !== undefined) {
                    var cachingInstance2 = cachingValue2;
                    dataDiskInstance.caching = cachingInstance2;
                  }
                }
              }
            }
            
            var osProfileValue = propertiesValue['osProfile'];
            if (osProfileValue !== null && osProfileValue !== undefined) {
              var osProfileInstance = {};
              propertiesInstance.oSProfile = osProfileInstance;
              
              var computerNameValue = osProfileValue['computerName'];
              if (computerNameValue !== null && computerNameValue !== undefined) {
                var computerNameInstance = computerNameValue;
                osProfileInstance.computerName = computerNameInstance;
              }
              
              var adminUsernameValue = osProfileValue['adminUsername'];
              if (adminUsernameValue !== null && adminUsernameValue !== undefined) {
                var adminUsernameInstance = adminUsernameValue;
                osProfileInstance.adminUsername = adminUsernameInstance;
              }
              
              var adminPasswordValue = osProfileValue['adminPassword'];
              if (adminPasswordValue !== null && adminPasswordValue !== undefined) {
                var adminPasswordInstance = adminPasswordValue;
                osProfileInstance.adminPassword = adminPasswordInstance;
              }
              
              var windowsConfigurationValue = osProfileValue['windowsConfiguration'];
              if (windowsConfigurationValue !== null && windowsConfigurationValue !== undefined) {
                var windowsConfigurationInstance = {};
                osProfileInstance.windowsConfiguration = windowsConfigurationInstance;
                
                var provisionVMAgentValue = windowsConfigurationValue['provisionVMAgent'];
                if (provisionVMAgentValue !== null && provisionVMAgentValue !== undefined) {
                  var provisionVMAgentInstance = provisionVMAgentValue;
                  windowsConfigurationInstance.provisionVMAgent = provisionVMAgentInstance;
                }
              }
            }
            
            var networkProfileValue = propertiesValue['networkProfile'];
            if (networkProfileValue !== null && networkProfileValue !== undefined) {
              var networkProfileInstance = { networkInterfaces: [] };
              propertiesInstance.networkProfile = networkProfileInstance;
              
              var networkInterfacesArray = networkProfileValue['networkInterfaces'];
              if (networkInterfacesArray !== null && networkInterfacesArray !== undefined) {
                for (var loweredIndex2 = 0; loweredIndex2 < networkInterfacesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                  var networkInterfacesValue = networkInterfacesArray[loweredIndex2];
                  var networkInterfaceReferenceInstance = {};
                  networkProfileInstance.networkInterfaces.push(networkInterfaceReferenceInstance);
                  
                  var idValue2 = networkInterfacesValue['id'];
                  if (idValue2 !== null && idValue2 !== undefined) {
                    var idInstance2 = idValue2;
                    networkInterfaceReferenceInstance.referenceUri = idInstance2;
                  }
                }
              }
            }
            
            var provisioningStateValue = propertiesValue['provisioningState'];
            if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
              var provisioningStateInstance = provisioningStateValue;
              propertiesInstance.provisioningState = provisioningStateInstance;
            }
            
            var availabilitySetValue = propertiesValue['availabilitySet'];
            if (availabilitySetValue !== null && availabilitySetValue !== undefined) {
              var availabilitySetInstance = {};
              propertiesInstance.availabilitySetReference = availabilitySetInstance;
              
              var idValue3 = availabilitySetValue['id'];
              if (idValue3 !== null && idValue3 !== undefined) {
                var idInstance3 = idValue3;
                availabilitySetInstance.referenceUri = idInstance3;
              }
            }
          }
          
          var resourcesValue = responseDoc['resources'];
          if (resourcesValue !== null && resourcesValue !== undefined) {
            var resourcesInstance = { extensions: [] };
            virtualMachineInstance.virtualMachineSubResources = resourcesInstance;
            
            var extensionsArray = resourcesValue['extensions'];
            if (extensionsArray !== null && extensionsArray !== undefined) {
              for (var loweredIndex3 = 0; loweredIndex3 < extensionsArray.length; loweredIndex3 = loweredIndex3 + 1) {
                var extensionsValue = extensionsArray[loweredIndex3];
                var virtualMachineExtensionInstance = { tags: {} };
                resourcesInstance.extensions.push(virtualMachineExtensionInstance);
                
                var propertiesValue2 = extensionsValue['properties'];
                if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                  var propertiesInstance2 = {};
                  virtualMachineExtensionInstance.virtualMachineExtensionProperties = propertiesInstance2;
                  
                  var publisherValue = propertiesValue2['publisher'];
                  if (publisherValue !== null && publisherValue !== undefined) {
                    var publisherInstance = publisherValue;
                    propertiesInstance2.publisher = publisherInstance;
                  }
                  
                  var typeValue = propertiesValue2['type'];
                  if (typeValue !== null && typeValue !== undefined) {
                    var typeInstance = typeValue;
                    propertiesInstance2.type = typeInstance;
                  }
                  
                  var typeHandlerVersionValue = propertiesValue2['typeHandlerVersion'];
                  if (typeHandlerVersionValue !== null && typeHandlerVersionValue !== undefined) {
                    var typeHandlerVersionInstance = typeHandlerVersionValue;
                    propertiesInstance2.typeHandlerVersion = typeHandlerVersionInstance;
                  }
                  
                  var settingsValue = propertiesValue2['settings'];
                  if (settingsValue !== null && settingsValue !== undefined) {
                    var settingsInstance = settingsValue;
                    propertiesInstance2.settings = settingsInstance;
                  }
                  
                  var protectedSettingsValue = propertiesValue2['protectedSettings'];
                  if (protectedSettingsValue !== null && protectedSettingsValue !== undefined) {
                    var protectedSettingsInstance = protectedSettingsValue;
                    propertiesInstance2.protectedSettings = protectedSettingsInstance;
                  }
                  
                  var provisioningStateValue2 = propertiesValue2['provisioningState'];
                  if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                    var provisioningStateInstance2 = provisioningStateValue2;
                    propertiesInstance2.provisioningState = provisioningStateInstance2;
                  }
                  
                  var instanceViewValue = propertiesValue2['instanceView'];
                  if (instanceViewValue !== null && instanceViewValue !== undefined) {
                    var instanceViewInstance = { statuses: [], subStatuses: [] };
                    propertiesInstance2.instanceView = instanceViewInstance;
                    
                    var nameValue3 = instanceViewValue['name'];
                    if (nameValue3 !== null && nameValue3 !== undefined) {
                      var nameInstance3 = nameValue3;
                      instanceViewInstance.name = nameInstance3;
                    }
                    
                    var typeValue2 = instanceViewValue['type'];
                    if (typeValue2 !== null && typeValue2 !== undefined) {
                      var typeInstance2 = typeValue2;
                      instanceViewInstance.type = typeInstance2;
                    }
                    
                    var typeHandlerVersionValue2 = instanceViewValue['typeHandlerVersion'];
                    if (typeHandlerVersionValue2 !== null && typeHandlerVersionValue2 !== undefined) {
                      var typeHandlerVersionInstance2 = typeHandlerVersionValue2;
                      instanceViewInstance.typeHandlerVersion = typeHandlerVersionInstance2;
                    }
                    
                    var substatusesArray = instanceViewValue['substatuses'];
                    if (substatusesArray !== null && substatusesArray !== undefined) {
                      for (var loweredIndex4 = 0; loweredIndex4 < substatusesArray.length; loweredIndex4 = loweredIndex4 + 1) {
                        var substatusesValue = substatusesArray[loweredIndex4];
                        var instanceViewStatusInstance = {};
                        instanceViewInstance.subStatuses.push(instanceViewStatusInstance);
                        
                        var codeValue = substatusesValue['code'];
                        if (codeValue !== null && codeValue !== undefined) {
                          var codeInstance = codeValue;
                          instanceViewStatusInstance.code = codeInstance;
                        }
                        
                        var levelValue = substatusesValue['level'];
                        if (levelValue !== null && levelValue !== undefined) {
                          var levelInstance = levelValue;
                          instanceViewStatusInstance.level = levelInstance;
                        }
                        
                        var displayStatusValue = substatusesValue['displayStatus'];
                        if (displayStatusValue !== null && displayStatusValue !== undefined) {
                          var displayStatusInstance = displayStatusValue;
                          instanceViewStatusInstance.displayStatus = displayStatusInstance;
                        }
                        
                        var messageValue = substatusesValue['message'];
                        if (messageValue !== null && messageValue !== undefined) {
                          var messageInstance = messageValue;
                          instanceViewStatusInstance.message = messageInstance;
                        }
                        
                        var timeValue = substatusesValue['time'];
                        if (timeValue !== null && timeValue !== undefined) {
                          var timeInstance = timeValue;
                          instanceViewStatusInstance.time = timeInstance;
                        }
                      }
                    }
                    
                    var statusesArray = instanceViewValue['statuses'];
                    if (statusesArray !== null && statusesArray !== undefined) {
                      for (var loweredIndex5 = 0; loweredIndex5 < statusesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                        var statusesValue = statusesArray[loweredIndex5];
                        var instanceViewStatusInstance2 = {};
                        instanceViewInstance.statuses.push(instanceViewStatusInstance2);
                        
                        var codeValue2 = statusesValue['code'];
                        if (codeValue2 !== null && codeValue2 !== undefined) {
                          var codeInstance2 = codeValue2;
                          instanceViewStatusInstance2.code = codeInstance2;
                        }
                        
                        var levelValue2 = statusesValue['level'];
                        if (levelValue2 !== null && levelValue2 !== undefined) {
                          var levelInstance2 = levelValue2;
                          instanceViewStatusInstance2.level = levelInstance2;
                        }
                        
                        var displayStatusValue2 = statusesValue['displayStatus'];
                        if (displayStatusValue2 !== null && displayStatusValue2 !== undefined) {
                          var displayStatusInstance2 = displayStatusValue2;
                          instanceViewStatusInstance2.displayStatus = displayStatusInstance2;
                        }
                        
                        var messageValue2 = statusesValue['message'];
                        if (messageValue2 !== null && messageValue2 !== undefined) {
                          var messageInstance2 = messageValue2;
                          instanceViewStatusInstance2.message = messageInstance2;
                        }
                        
                        var timeValue2 = statusesValue['time'];
                        if (timeValue2 !== null && timeValue2 !== undefined) {
                          var timeInstance2 = timeValue2;
                          instanceViewStatusInstance2.time = timeInstance2;
                        }
                      }
                    }
                  }
                }
                
                var idValue4 = extensionsValue['id'];
                if (idValue4 !== null && idValue4 !== undefined) {
                  var idInstance4 = idValue4;
                  virtualMachineExtensionInstance.id = idInstance4;
                }
                
                var nameValue4 = extensionsValue['name'];
                if (nameValue4 !== null && nameValue4 !== undefined) {
                  var nameInstance4 = nameValue4;
                  virtualMachineExtensionInstance.name = nameInstance4;
                }
                
                var typeValue3 = extensionsValue['type'];
                if (typeValue3 !== null && typeValue3 !== undefined) {
                  var typeInstance3 = typeValue3;
                  virtualMachineExtensionInstance.type = typeInstance3;
                }
                
                var locationValue = extensionsValue['location'];
                if (locationValue !== null && locationValue !== undefined) {
                  var locationInstance = locationValue;
                  virtualMachineExtensionInstance.location = locationInstance;
                }
                
                var tagsSequenceElement = extensionsValue['tags'];
                if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                  for (var property in tagsSequenceElement) {
                    var tagsKey = property;
                    var tagsValue = tagsSequenceElement[property];
                    virtualMachineExtensionInstance.tags[tagsKey] = tagsValue;
                  }
                }
              }
            }
          }
          
          var idValue5 = responseDoc['id'];
          if (idValue5 !== null && idValue5 !== undefined) {
            var idInstance5 = idValue5;
            virtualMachineInstance.id = idInstance5;
          }
          
          var nameValue5 = responseDoc['name'];
          if (nameValue5 !== null && nameValue5 !== undefined) {
            var nameInstance5 = nameValue5;
            virtualMachineInstance.name = nameInstance5;
          }
          
          var typeValue4 = responseDoc['type'];
          if (typeValue4 !== null && typeValue4 !== undefined) {
            var typeInstance4 = typeValue4;
            virtualMachineInstance.type = typeInstance4;
          }
          
          var locationValue2 = responseDoc['location'];
          if (locationValue2 !== null && locationValue2 !== undefined) {
            var locationInstance2 = locationValue2;
            virtualMachineInstance.location = locationInstance2;
          }
          
          var tagsSequenceElement2 = responseDoc['tags'];
          if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
            for (var property2 in tagsSequenceElement2) {
              var tagsKey2 = property2;
              var tagsValue2 = tagsSequenceElement2[property2];
              virtualMachineInstance.tags[tagsKey2] = tagsValue2;
            }
          }
          
          var nameValue6 = responseDoc['name'];
          if (nameValue6 !== null && nameValue6 !== undefined) {
            var nameInstance6 = nameValue6;
            result.name = nameInstance6;
          }
          
          var locationValue3 = responseDoc['location'];
          if (locationValue3 !== null && locationValue3 !== undefined) {
            var locationInstance3 = locationValue3;
            result.location = locationInstance3;
          }
          
          var typeValue5 = responseDoc['Type'];
          if (typeValue5 !== null && typeValue5 !== undefined) {
            var typeInstance5 = typeValue5;
            result.type = typeInstance5;
          }
          
          var tagsSequenceElement3 = responseDoc['tags'];
          if (tagsSequenceElement3 !== null && tagsSequenceElement3 !== undefined) {
            for (var property3 in tagsSequenceElement3) {
              var tagsKey3 = property3;
              var tagsValue3 = tagsSequenceElement3[property3];
              result.tags[tagsKey3] = tagsValue3;
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.getInstanceView = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    if (vmName === null || vmName === undefined) {
      return callback(new Error('vmName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    url2 = url2 + '/';
    url2 = url2 + encodeURIComponent(vmName);
    url2 = url2 + '/InstanceView';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = {};
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var virtualMachineInstanceViewInstance = { disks: [], extensions: [], statuses: [] };
          result.virtualMachineInstanceView = virtualMachineInstanceViewInstance;
          
          var platformUpdateDomainValue = responseDoc['platformUpdateDomain'];
          if (platformUpdateDomainValue !== null && platformUpdateDomainValue !== undefined) {
            var platformUpdateDomainInstance = platformUpdateDomainValue;
            virtualMachineInstanceViewInstance.platformUpdateDomain = platformUpdateDomainInstance;
          }
          
          var platformFaultDomainValue = responseDoc['platformFaultDomain'];
          if (platformFaultDomainValue !== null && platformFaultDomainValue !== undefined) {
            var platformFaultDomainInstance = platformFaultDomainValue;
            virtualMachineInstanceViewInstance.platformFaultDomain = platformFaultDomainInstance;
          }
          
          var rdpThumbPrintValue = responseDoc['rdpThumbPrint'];
          if (rdpThumbPrintValue !== null && rdpThumbPrintValue !== undefined) {
            var rdpThumbPrintInstance = rdpThumbPrintValue;
            virtualMachineInstanceViewInstance.remoteDesktopThumbprint = rdpThumbPrintInstance;
          }
          
          var vmAgentValue = responseDoc['vmAgent'];
          if (vmAgentValue !== null && vmAgentValue !== undefined) {
            var vmAgentInstance = { extensionHandlers: [], statuses: [] };
            virtualMachineInstanceViewInstance.vMAgent = vmAgentInstance;
            
            var vmAgentVersionValue = vmAgentValue['vmAgentVersion'];
            if (vmAgentVersionValue !== null && vmAgentVersionValue !== undefined) {
              var vmAgentVersionInstance = vmAgentVersionValue;
              vmAgentInstance.vMAgentVersion = vmAgentVersionInstance;
            }
            
            var extensionHandlersArray = vmAgentValue['extensionHandlers'];
            if (extensionHandlersArray !== null && extensionHandlersArray !== undefined) {
              for (var loweredIndex1 = 0; loweredIndex1 < extensionHandlersArray.length; loweredIndex1 = loweredIndex1 + 1) {
                var extensionHandlersValue = extensionHandlersArray[loweredIndex1];
                var virtualMachineExtensionHandlerInstanceViewInstance = {};
                vmAgentInstance.extensionHandlers.push(virtualMachineExtensionHandlerInstanceViewInstance);
                
                var typeValue = extensionHandlersValue['type'];
                if (typeValue !== null && typeValue !== undefined) {
                  var typeInstance = typeValue;
                  virtualMachineExtensionHandlerInstanceViewInstance.type = typeInstance;
                }
                
                var typeHandlerVersionValue = extensionHandlersValue['typeHandlerVersion'];
                if (typeHandlerVersionValue !== null && typeHandlerVersionValue !== undefined) {
                  var typeHandlerVersionInstance = typeHandlerVersionValue;
                  virtualMachineExtensionHandlerInstanceViewInstance.typeHandlerVersion = typeHandlerVersionInstance;
                }
                
                var statusValue = extensionHandlersValue['status'];
                if (statusValue !== null && statusValue !== undefined) {
                  var statusInstance = {};
                  virtualMachineExtensionHandlerInstanceViewInstance.status = statusInstance;
                  
                  var codeValue = statusValue['code'];
                  if (codeValue !== null && codeValue !== undefined) {
                    var codeInstance = codeValue;
                    statusInstance.code = codeInstance;
                  }
                  
                  var levelValue = statusValue['level'];
                  if (levelValue !== null && levelValue !== undefined) {
                    var levelInstance = levelValue;
                    statusInstance.level = levelInstance;
                  }
                  
                  var displayStatusValue = statusValue['displayStatus'];
                  if (displayStatusValue !== null && displayStatusValue !== undefined) {
                    var displayStatusInstance = displayStatusValue;
                    statusInstance.displayStatus = displayStatusInstance;
                  }
                  
                  var messageValue = statusValue['message'];
                  if (messageValue !== null && messageValue !== undefined) {
                    var messageInstance = messageValue;
                    statusInstance.message = messageInstance;
                  }
                  
                  var timeValue = statusValue['time'];
                  if (timeValue !== null && timeValue !== undefined) {
                    var timeInstance = timeValue;
                    statusInstance.time = timeInstance;
                  }
                }
              }
            }
            
            var statusesArray = vmAgentValue['statuses'];
            if (statusesArray !== null && statusesArray !== undefined) {
              for (var loweredIndex2 = 0; loweredIndex2 < statusesArray.length; loweredIndex2 = loweredIndex2 + 1) {
                var statusesValue = statusesArray[loweredIndex2];
                var instanceViewStatusInstance = {};
                vmAgentInstance.statuses.push(instanceViewStatusInstance);
                
                var codeValue2 = statusesValue['code'];
                if (codeValue2 !== null && codeValue2 !== undefined) {
                  var codeInstance2 = codeValue2;
                  instanceViewStatusInstance.code = codeInstance2;
                }
                
                var levelValue2 = statusesValue['level'];
                if (levelValue2 !== null && levelValue2 !== undefined) {
                  var levelInstance2 = levelValue2;
                  instanceViewStatusInstance.level = levelInstance2;
                }
                
                var displayStatusValue2 = statusesValue['displayStatus'];
                if (displayStatusValue2 !== null && displayStatusValue2 !== undefined) {
                  var displayStatusInstance2 = displayStatusValue2;
                  instanceViewStatusInstance.displayStatus = displayStatusInstance2;
                }
                
                var messageValue2 = statusesValue['message'];
                if (messageValue2 !== null && messageValue2 !== undefined) {
                  var messageInstance2 = messageValue2;
                  instanceViewStatusInstance.message = messageInstance2;
                }
                
                var timeValue2 = statusesValue['time'];
                if (timeValue2 !== null && timeValue2 !== undefined) {
                  var timeInstance2 = timeValue2;
                  instanceViewStatusInstance.time = timeInstance2;
                }
              }
            }
          }
          
          var disksArray = responseDoc['disks'];
          if (disksArray !== null && disksArray !== undefined) {
            for (var loweredIndex3 = 0; loweredIndex3 < disksArray.length; loweredIndex3 = loweredIndex3 + 1) {
              var disksValue = disksArray[loweredIndex3];
              var diskInstanceViewInstance = { statuses: [] };
              virtualMachineInstanceViewInstance.disks.push(diskInstanceViewInstance);
              
              var nameValue = disksValue['name'];
              if (nameValue !== null && nameValue !== undefined) {
                var nameInstance = nameValue;
                diskInstanceViewInstance.name = nameInstance;
              }
              
              var statusesArray2 = disksValue['statuses'];
              if (statusesArray2 !== null && statusesArray2 !== undefined) {
                for (var loweredIndex4 = 0; loweredIndex4 < statusesArray2.length; loweredIndex4 = loweredIndex4 + 1) {
                  var statusesValue2 = statusesArray2[loweredIndex4];
                  var instanceViewStatusInstance2 = {};
                  diskInstanceViewInstance.statuses.push(instanceViewStatusInstance2);
                  
                  var codeValue3 = statusesValue2['code'];
                  if (codeValue3 !== null && codeValue3 !== undefined) {
                    var codeInstance3 = codeValue3;
                    instanceViewStatusInstance2.code = codeInstance3;
                  }
                  
                  var levelValue3 = statusesValue2['level'];
                  if (levelValue3 !== null && levelValue3 !== undefined) {
                    var levelInstance3 = levelValue3;
                    instanceViewStatusInstance2.level = levelInstance3;
                  }
                  
                  var displayStatusValue3 = statusesValue2['displayStatus'];
                  if (displayStatusValue3 !== null && displayStatusValue3 !== undefined) {
                    var displayStatusInstance3 = displayStatusValue3;
                    instanceViewStatusInstance2.displayStatus = displayStatusInstance3;
                  }
                  
                  var messageValue3 = statusesValue2['message'];
                  if (messageValue3 !== null && messageValue3 !== undefined) {
                    var messageInstance3 = messageValue3;
                    instanceViewStatusInstance2.message = messageInstance3;
                  }
                  
                  var timeValue3 = statusesValue2['time'];
                  if (timeValue3 !== null && timeValue3 !== undefined) {
                    var timeInstance3 = timeValue3;
                    instanceViewStatusInstance2.time = timeInstance3;
                  }
                }
              }
            }
          }
          
          var extensionsArray = responseDoc['extensions'];
          if (extensionsArray !== null && extensionsArray !== undefined) {
            for (var loweredIndex5 = 0; loweredIndex5 < extensionsArray.length; loweredIndex5 = loweredIndex5 + 1) {
              var extensionsValue = extensionsArray[loweredIndex5];
              var virtualMachineExtensionInstanceViewInstance = { statuses: [], subStatuses: [] };
              virtualMachineInstanceViewInstance.extensions.push(virtualMachineExtensionInstanceViewInstance);
              
              var nameValue2 = extensionsValue['name'];
              if (nameValue2 !== null && nameValue2 !== undefined) {
                var nameInstance2 = nameValue2;
                virtualMachineExtensionInstanceViewInstance.name = nameInstance2;
              }
              
              var typeValue2 = extensionsValue['type'];
              if (typeValue2 !== null && typeValue2 !== undefined) {
                var typeInstance2 = typeValue2;
                virtualMachineExtensionInstanceViewInstance.type = typeInstance2;
              }
              
              var typeHandlerVersionValue2 = extensionsValue['typeHandlerVersion'];
              if (typeHandlerVersionValue2 !== null && typeHandlerVersionValue2 !== undefined) {
                var typeHandlerVersionInstance2 = typeHandlerVersionValue2;
                virtualMachineExtensionInstanceViewInstance.typeHandlerVersion = typeHandlerVersionInstance2;
              }
              
              var substatusesArray = extensionsValue['substatuses'];
              if (substatusesArray !== null && substatusesArray !== undefined) {
                for (var loweredIndex6 = 0; loweredIndex6 < substatusesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                  var substatusesValue = substatusesArray[loweredIndex6];
                  var instanceViewStatusInstance3 = {};
                  virtualMachineExtensionInstanceViewInstance.subStatuses.push(instanceViewStatusInstance3);
                  
                  var codeValue4 = substatusesValue['code'];
                  if (codeValue4 !== null && codeValue4 !== undefined) {
                    var codeInstance4 = codeValue4;
                    instanceViewStatusInstance3.code = codeInstance4;
                  }
                  
                  var levelValue4 = substatusesValue['level'];
                  if (levelValue4 !== null && levelValue4 !== undefined) {
                    var levelInstance4 = levelValue4;
                    instanceViewStatusInstance3.level = levelInstance4;
                  }
                  
                  var displayStatusValue4 = substatusesValue['displayStatus'];
                  if (displayStatusValue4 !== null && displayStatusValue4 !== undefined) {
                    var displayStatusInstance4 = displayStatusValue4;
                    instanceViewStatusInstance3.displayStatus = displayStatusInstance4;
                  }
                  
                  var messageValue4 = substatusesValue['message'];
                  if (messageValue4 !== null && messageValue4 !== undefined) {
                    var messageInstance4 = messageValue4;
                    instanceViewStatusInstance3.message = messageInstance4;
                  }
                  
                  var timeValue4 = substatusesValue['time'];
                  if (timeValue4 !== null && timeValue4 !== undefined) {
                    var timeInstance4 = timeValue4;
                    instanceViewStatusInstance3.time = timeInstance4;
                  }
                }
              }
              
              var statusesArray3 = extensionsValue['statuses'];
              if (statusesArray3 !== null && statusesArray3 !== undefined) {
                for (var loweredIndex7 = 0; loweredIndex7 < statusesArray3.length; loweredIndex7 = loweredIndex7 + 1) {
                  var statusesValue3 = statusesArray3[loweredIndex7];
                  var instanceViewStatusInstance4 = {};
                  virtualMachineExtensionInstanceViewInstance.statuses.push(instanceViewStatusInstance4);
                  
                  var codeValue5 = statusesValue3['code'];
                  if (codeValue5 !== null && codeValue5 !== undefined) {
                    var codeInstance5 = codeValue5;
                    instanceViewStatusInstance4.code = codeInstance5;
                  }
                  
                  var levelValue5 = statusesValue3['level'];
                  if (levelValue5 !== null && levelValue5 !== undefined) {
                    var levelInstance5 = levelValue5;
                    instanceViewStatusInstance4.level = levelInstance5;
                  }
                  
                  var displayStatusValue5 = statusesValue3['displayStatus'];
                  if (displayStatusValue5 !== null && displayStatusValue5 !== undefined) {
                    var displayStatusInstance5 = displayStatusValue5;
                    instanceViewStatusInstance4.displayStatus = displayStatusInstance5;
                  }
                  
                  var messageValue5 = statusesValue3['message'];
                  if (messageValue5 !== null && messageValue5 !== undefined) {
                    var messageInstance5 = messageValue5;
                    instanceViewStatusInstance4.message = messageInstance5;
                  }
                  
                  var timeValue5 = statusesValue3['time'];
                  if (timeValue5 !== null && timeValue5 !== undefined) {
                    var timeInstance5 = timeValue5;
                    instanceViewStatusInstance4.time = timeInstance5;
                  }
                }
              }
            }
          }
          
          var statusesArray4 = responseDoc['statuses'];
          if (statusesArray4 !== null && statusesArray4 !== undefined) {
            for (var loweredIndex8 = 0; loweredIndex8 < statusesArray4.length; loweredIndex8 = loweredIndex8 + 1) {
              var statusesValue4 = statusesArray4[loweredIndex8];
              var instanceViewStatusInstance5 = {};
              virtualMachineInstanceViewInstance.statuses.push(instanceViewStatusInstance5);
              
              var codeValue6 = statusesValue4['code'];
              if (codeValue6 !== null && codeValue6 !== undefined) {
                var codeInstance6 = codeValue6;
                instanceViewStatusInstance5.code = codeInstance6;
              }
              
              var levelValue6 = statusesValue4['level'];
              if (levelValue6 !== null && levelValue6 !== undefined) {
                var levelInstance6 = levelValue6;
                instanceViewStatusInstance5.level = levelInstance6;
              }
              
              var displayStatusValue6 = statusesValue4['displayStatus'];
              if (displayStatusValue6 !== null && displayStatusValue6 !== undefined) {
                var displayStatusInstance6 = displayStatusValue6;
                instanceViewStatusInstance5.displayStatus = displayStatusInstance6;
              }
              
              var messageValue6 = statusesValue4['message'];
              if (messageValue6 !== null && messageValue6 !== undefined) {
                var messageInstance6 = messageValue6;
                instanceViewStatusInstance5.message = messageInstance6;
              }
              
              var timeValue6 = statusesValue4['time'];
              if (timeValue6 !== null && timeValue6 !== undefined) {
                var timeInstance6 = timeValue6;
                instanceViewStatusInstance5.time = timeInstance6;
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.list = function(resourceGroupName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    // Validate
    if (resourceGroupName === null || resourceGroupName === undefined) {
      return callback(new Error('resourceGroupName cannot be null.'));
    }
    
    // Tracing
    
    // Construct URL
    var url2 = '';
    url2 = url2 + '/subscriptions/';
    if (this.client.credentials.subscriptionId !== null && this.client.credentials.subscriptionId !== undefined) {
      url2 = url2 + encodeURIComponent(this.client.credentials.subscriptionId);
    }
    url2 = url2 + '/resourceGroups/';
    url2 = url2 + encodeURIComponent(resourceGroupName);
    url2 = url2 + '/providers/';
    url2 = url2 + 'Microsoft.Compute';
    url2 = url2 + '/';
    url2 = url2 + 'virtualMachines';
    var queryParameters = [];
    queryParameters.push('api-version=2014-12-01-preview');
    if (queryParameters.length > 0) {
      url2 = url2 + '?' + queryParameters.join('&');
    }
    var baseUrl = this.client.baseUri;
    // Trim '/' character from the end of baseUrl and beginning of url.
    if (baseUrl[baseUrl.length - 1] === '/') {
      baseUrl = baseUrl.substring(0, (baseUrl.length - 1) + 0);
    }
    if (url2[0] === '/') {
      url2 = url2.substring(1);
    }
    url2 = baseUrl + '/' + url2;
    url2 = url2.replace(' ', '%20');
    
    // Create HTTP transport objects
    var httpRequest = new WebResource();
    httpRequest.method = 'GET';
    httpRequest.headers = {};
    httpRequest.url = url2;
    
    // Set Headers
    httpRequest.headers['Content-Type'] = 'application/json';
    
    // Send Request
    return this.client.pipeline(httpRequest, function (err, response, body) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var statusCode = response.statusCode;
      if (statusCode !== 200) {
        var error = new Error(body);
        error.statusCode = response.statusCode;
        return callback(error);
      }
      
      // Create Result
      var result = null;
      // Deserialize Response
      if (statusCode === 200) {
        var responseContent = body;
        result = { virtualMachines: [] };
        var responseDoc = null;
        if (responseContent) {
          responseDoc = JSON.parse(responseContent);
        }
        
        if (responseDoc !== null && responseDoc !== undefined) {
          var valueArray = responseDoc['value'];
          if (valueArray !== null && valueArray !== undefined) {
            for (var loweredIndex1 = 0; loweredIndex1 < valueArray.length; loweredIndex1 = loweredIndex1 + 1) {
              var valueValue = valueArray[loweredIndex1];
              var virtualMachineInstance = { tags: {} };
              result.virtualMachines.push(virtualMachineInstance);
              
              var propertiesValue = valueValue['properties'];
              if (propertiesValue !== null && propertiesValue !== undefined) {
                var propertiesInstance = {};
                virtualMachineInstance.virtualMachineProperties = propertiesInstance;
                
                var hardwareProfileValue = propertiesValue['hardwareProfile'];
                if (hardwareProfileValue !== null && hardwareProfileValue !== undefined) {
                  var hardwareProfileInstance = {};
                  propertiesInstance.hardwareProfile = hardwareProfileInstance;
                  
                  var vmSizeValue = hardwareProfileValue['vmSize'];
                  if (vmSizeValue !== null && vmSizeValue !== undefined) {
                    var vmSizeInstance = vmSizeValue;
                    hardwareProfileInstance.virtualMachineSize = vmSizeInstance;
                  }
                }
                
                var storageProfileValue = propertiesValue['storageProfile'];
                if (storageProfileValue !== null && storageProfileValue !== undefined) {
                  var storageProfileInstance = { dataDisks: [] };
                  propertiesInstance.storageProfile = storageProfileInstance;
                  
                  var sourceImageValue = storageProfileValue['sourceImage'];
                  if (sourceImageValue !== null && sourceImageValue !== undefined) {
                    var sourceImageInstance = {};
                    storageProfileInstance.sourceImage = sourceImageInstance;
                    
                    var idValue = sourceImageValue['id'];
                    if (idValue !== null && idValue !== undefined) {
                      var idInstance = idValue;
                      sourceImageInstance.referenceUri = idInstance;
                    }
                  }
                  
                  var destinationVhdsContainerValue = storageProfileValue['destinationVhdsContainer'];
                  if (destinationVhdsContainerValue !== null && destinationVhdsContainerValue !== undefined) {
                    var destinationVhdsContainerInstance = destinationVhdsContainerValue;
                    storageProfileInstance.destinationVhdsContainer = destinationVhdsContainerInstance;
                  }
                  
                  var osDiskValue = storageProfileValue['osDisk'];
                  if (osDiskValue !== null && osDiskValue !== undefined) {
                    var osDiskInstance = {};
                    storageProfileInstance.oSDisk = osDiskInstance;
                    
                    var osTypeValue = osDiskValue['osType'];
                    if (osTypeValue !== null && osTypeValue !== undefined) {
                      var osTypeInstance = osTypeValue;
                      osDiskInstance.operatingSystemType = osTypeInstance;
                    }
                    
                    var nameValue = osDiskValue['name'];
                    if (nameValue !== null && nameValue !== undefined) {
                      var nameInstance = nameValue;
                      osDiskInstance.name = nameInstance;
                    }
                    
                    var vhdValue = osDiskValue['vhd'];
                    if (vhdValue !== null && vhdValue !== undefined) {
                      var vhdInstance = {};
                      osDiskInstance.virtualHardDisk = vhdInstance;
                      
                      var uriValue = vhdValue['uri'];
                      if (uriValue !== null && uriValue !== undefined) {
                        var uriInstance = uriValue;
                        vhdInstance.uri = uriInstance;
                      }
                    }
                    
                    var cachingValue = osDiskValue['caching'];
                    if (cachingValue !== null && cachingValue !== undefined) {
                      var cachingInstance = cachingValue;
                      osDiskInstance.caching = cachingInstance;
                    }
                  }
                  
                  var dataDisksArray = storageProfileValue['dataDisks'];
                  if (dataDisksArray !== null && dataDisksArray !== undefined) {
                    for (var loweredIndex2 = 0; loweredIndex2 < dataDisksArray.length; loweredIndex2 = loweredIndex2 + 1) {
                      var dataDisksValue = dataDisksArray[loweredIndex2];
                      var dataDiskInstance = {};
                      storageProfileInstance.dataDisks.push(dataDiskInstance);
                      
                      var lunValue = dataDisksValue['lun'];
                      if (lunValue !== null && lunValue !== undefined) {
                        var lunInstance = lunValue;
                        dataDiskInstance.lun = lunInstance;
                      }
                      
                      var diskSizeGBValue = dataDisksValue['diskSizeGB'];
                      if (diskSizeGBValue !== null && diskSizeGBValue !== undefined) {
                        var diskSizeGBInstance = diskSizeGBValue;
                        dataDiskInstance.diskSizeGB = diskSizeGBInstance;
                      }
                      
                      var nameValue2 = dataDisksValue['name'];
                      if (nameValue2 !== null && nameValue2 !== undefined) {
                        var nameInstance2 = nameValue2;
                        dataDiskInstance.name = nameInstance2;
                      }
                      
                      var vhdValue2 = dataDisksValue['vhd'];
                      if (vhdValue2 !== null && vhdValue2 !== undefined) {
                        var vhdInstance2 = {};
                        dataDiskInstance.virtualHardDisk = vhdInstance2;
                        
                        var uriValue2 = vhdValue2['uri'];
                        if (uriValue2 !== null && uriValue2 !== undefined) {
                          var uriInstance2 = uriValue2;
                          vhdInstance2.uri = uriInstance2;
                        }
                      }
                      
                      var cachingValue2 = dataDisksValue['caching'];
                      if (cachingValue2 !== null && cachingValue2 !== undefined) {
                        var cachingInstance2 = cachingValue2;
                        dataDiskInstance.caching = cachingInstance2;
                      }
                    }
                  }
                }
                
                var osProfileValue = propertiesValue['osProfile'];
                if (osProfileValue !== null && osProfileValue !== undefined) {
                  var osProfileInstance = {};
                  propertiesInstance.oSProfile = osProfileInstance;
                  
                  var computerNameValue = osProfileValue['computerName'];
                  if (computerNameValue !== null && computerNameValue !== undefined) {
                    var computerNameInstance = computerNameValue;
                    osProfileInstance.computerName = computerNameInstance;
                  }
                  
                  var adminUsernameValue = osProfileValue['adminUsername'];
                  if (adminUsernameValue !== null && adminUsernameValue !== undefined) {
                    var adminUsernameInstance = adminUsernameValue;
                    osProfileInstance.adminUsername = adminUsernameInstance;
                  }
                  
                  var adminPasswordValue = osProfileValue['adminPassword'];
                  if (adminPasswordValue !== null && adminPasswordValue !== undefined) {
                    var adminPasswordInstance = adminPasswordValue;
                    osProfileInstance.adminPassword = adminPasswordInstance;
                  }
                  
                  var windowsConfigurationValue = osProfileValue['windowsConfiguration'];
                  if (windowsConfigurationValue !== null && windowsConfigurationValue !== undefined) {
                    var windowsConfigurationInstance = {};
                    osProfileInstance.windowsConfiguration = windowsConfigurationInstance;
                    
                    var provisionVMAgentValue = windowsConfigurationValue['provisionVMAgent'];
                    if (provisionVMAgentValue !== null && provisionVMAgentValue !== undefined) {
                      var provisionVMAgentInstance = provisionVMAgentValue;
                      windowsConfigurationInstance.provisionVMAgent = provisionVMAgentInstance;
                    }
                  }
                }
                
                var networkProfileValue = propertiesValue['networkProfile'];
                if (networkProfileValue !== null && networkProfileValue !== undefined) {
                  var networkProfileInstance = { networkInterfaces: [] };
                  propertiesInstance.networkProfile = networkProfileInstance;
                  
                  var networkInterfacesArray = networkProfileValue['networkInterfaces'];
                  if (networkInterfacesArray !== null && networkInterfacesArray !== undefined) {
                    for (var loweredIndex3 = 0; loweredIndex3 < networkInterfacesArray.length; loweredIndex3 = loweredIndex3 + 1) {
                      var networkInterfacesValue = networkInterfacesArray[loweredIndex3];
                      var networkInterfaceReferenceInstance = {};
                      networkProfileInstance.networkInterfaces.push(networkInterfaceReferenceInstance);
                      
                      var idValue2 = networkInterfacesValue['id'];
                      if (idValue2 !== null && idValue2 !== undefined) {
                        var idInstance2 = idValue2;
                        networkInterfaceReferenceInstance.referenceUri = idInstance2;
                      }
                    }
                  }
                }
                
                var provisioningStateValue = propertiesValue['provisioningState'];
                if (provisioningStateValue !== null && provisioningStateValue !== undefined) {
                  var provisioningStateInstance = provisioningStateValue;
                  propertiesInstance.provisioningState = provisioningStateInstance;
                }
                
                var availabilitySetValue = propertiesValue['availabilitySet'];
                if (availabilitySetValue !== null && availabilitySetValue !== undefined) {
                  var availabilitySetInstance = {};
                  propertiesInstance.availabilitySetReference = availabilitySetInstance;
                  
                  var idValue3 = availabilitySetValue['id'];
                  if (idValue3 !== null && idValue3 !== undefined) {
                    var idInstance3 = idValue3;
                    availabilitySetInstance.referenceUri = idInstance3;
                  }
                }
              }
              
              var resourcesValue = valueValue['resources'];
              if (resourcesValue !== null && resourcesValue !== undefined) {
                var resourcesInstance = { extensions: [] };
                virtualMachineInstance.virtualMachineSubResources = resourcesInstance;
                
                var extensionsArray = resourcesValue['extensions'];
                if (extensionsArray !== null && extensionsArray !== undefined) {
                  for (var loweredIndex4 = 0; loweredIndex4 < extensionsArray.length; loweredIndex4 = loweredIndex4 + 1) {
                    var extensionsValue = extensionsArray[loweredIndex4];
                    var virtualMachineExtensionInstance = { tags: {} };
                    resourcesInstance.extensions.push(virtualMachineExtensionInstance);
                    
                    var propertiesValue2 = extensionsValue['properties'];
                    if (propertiesValue2 !== null && propertiesValue2 !== undefined) {
                      var propertiesInstance2 = {};
                      virtualMachineExtensionInstance.virtualMachineExtensionProperties = propertiesInstance2;
                      
                      var publisherValue = propertiesValue2['publisher'];
                      if (publisherValue !== null && publisherValue !== undefined) {
                        var publisherInstance = publisherValue;
                        propertiesInstance2.publisher = publisherInstance;
                      }
                      
                      var typeValue = propertiesValue2['type'];
                      if (typeValue !== null && typeValue !== undefined) {
                        var typeInstance = typeValue;
                        propertiesInstance2.type = typeInstance;
                      }
                      
                      var typeHandlerVersionValue = propertiesValue2['typeHandlerVersion'];
                      if (typeHandlerVersionValue !== null && typeHandlerVersionValue !== undefined) {
                        var typeHandlerVersionInstance = typeHandlerVersionValue;
                        propertiesInstance2.typeHandlerVersion = typeHandlerVersionInstance;
                      }
                      
                      var settingsValue = propertiesValue2['settings'];
                      if (settingsValue !== null && settingsValue !== undefined) {
                        var settingsInstance = settingsValue;
                        propertiesInstance2.settings = settingsInstance;
                      }
                      
                      var protectedSettingsValue = propertiesValue2['protectedSettings'];
                      if (protectedSettingsValue !== null && protectedSettingsValue !== undefined) {
                        var protectedSettingsInstance = protectedSettingsValue;
                        propertiesInstance2.protectedSettings = protectedSettingsInstance;
                      }
                      
                      var provisioningStateValue2 = propertiesValue2['provisioningState'];
                      if (provisioningStateValue2 !== null && provisioningStateValue2 !== undefined) {
                        var provisioningStateInstance2 = provisioningStateValue2;
                        propertiesInstance2.provisioningState = provisioningStateInstance2;
                      }
                      
                      var instanceViewValue = propertiesValue2['instanceView'];
                      if (instanceViewValue !== null && instanceViewValue !== undefined) {
                        var instanceViewInstance = { statuses: [], subStatuses: [] };
                        propertiesInstance2.instanceView = instanceViewInstance;
                        
                        var nameValue3 = instanceViewValue['name'];
                        if (nameValue3 !== null && nameValue3 !== undefined) {
                          var nameInstance3 = nameValue3;
                          instanceViewInstance.name = nameInstance3;
                        }
                        
                        var typeValue2 = instanceViewValue['type'];
                        if (typeValue2 !== null && typeValue2 !== undefined) {
                          var typeInstance2 = typeValue2;
                          instanceViewInstance.type = typeInstance2;
                        }
                        
                        var typeHandlerVersionValue2 = instanceViewValue['typeHandlerVersion'];
                        if (typeHandlerVersionValue2 !== null && typeHandlerVersionValue2 !== undefined) {
                          var typeHandlerVersionInstance2 = typeHandlerVersionValue2;
                          instanceViewInstance.typeHandlerVersion = typeHandlerVersionInstance2;
                        }
                        
                        var substatusesArray = instanceViewValue['substatuses'];
                        if (substatusesArray !== null && substatusesArray !== undefined) {
                          for (var loweredIndex5 = 0; loweredIndex5 < substatusesArray.length; loweredIndex5 = loweredIndex5 + 1) {
                            var substatusesValue = substatusesArray[loweredIndex5];
                            var instanceViewStatusInstance = {};
                            instanceViewInstance.subStatuses.push(instanceViewStatusInstance);
                            
                            var codeValue = substatusesValue['code'];
                            if (codeValue !== null && codeValue !== undefined) {
                              var codeInstance = codeValue;
                              instanceViewStatusInstance.code = codeInstance;
                            }
                            
                            var levelValue = substatusesValue['level'];
                            if (levelValue !== null && levelValue !== undefined) {
                              var levelInstance = levelValue;
                              instanceViewStatusInstance.level = levelInstance;
                            }
                            
                            var displayStatusValue = substatusesValue['displayStatus'];
                            if (displayStatusValue !== null && displayStatusValue !== undefined) {
                              var displayStatusInstance = displayStatusValue;
                              instanceViewStatusInstance.displayStatus = displayStatusInstance;
                            }
                            
                            var messageValue = substatusesValue['message'];
                            if (messageValue !== null && messageValue !== undefined) {
                              var messageInstance = messageValue;
                              instanceViewStatusInstance.message = messageInstance;
                            }
                            
                            var timeValue = substatusesValue['time'];
                            if (timeValue !== null && timeValue !== undefined) {
                              var timeInstance = timeValue;
                              instanceViewStatusInstance.time = timeInstance;
                            }
                          }
                        }
                        
                        var statusesArray = instanceViewValue['statuses'];
                        if (statusesArray !== null && statusesArray !== undefined) {
                          for (var loweredIndex6 = 0; loweredIndex6 < statusesArray.length; loweredIndex6 = loweredIndex6 + 1) {
                            var statusesValue = statusesArray[loweredIndex6];
                            var instanceViewStatusInstance2 = {};
                            instanceViewInstance.statuses.push(instanceViewStatusInstance2);
                            
                            var codeValue2 = statusesValue['code'];
                            if (codeValue2 !== null && codeValue2 !== undefined) {
                              var codeInstance2 = codeValue2;
                              instanceViewStatusInstance2.code = codeInstance2;
                            }
                            
                            var levelValue2 = statusesValue['level'];
                            if (levelValue2 !== null && levelValue2 !== undefined) {
                              var levelInstance2 = levelValue2;
                              instanceViewStatusInstance2.level = levelInstance2;
                            }
                            
                            var displayStatusValue2 = statusesValue['displayStatus'];
                            if (displayStatusValue2 !== null && displayStatusValue2 !== undefined) {
                              var displayStatusInstance2 = displayStatusValue2;
                              instanceViewStatusInstance2.displayStatus = displayStatusInstance2;
                            }
                            
                            var messageValue2 = statusesValue['message'];
                            if (messageValue2 !== null && messageValue2 !== undefined) {
                              var messageInstance2 = messageValue2;
                              instanceViewStatusInstance2.message = messageInstance2;
                            }
                            
                            var timeValue2 = statusesValue['time'];
                            if (timeValue2 !== null && timeValue2 !== undefined) {
                              var timeInstance2 = timeValue2;
                              instanceViewStatusInstance2.time = timeInstance2;
                            }
                          }
                        }
                      }
                    }
                    
                    var idValue4 = extensionsValue['id'];
                    if (idValue4 !== null && idValue4 !== undefined) {
                      var idInstance4 = idValue4;
                      virtualMachineExtensionInstance.id = idInstance4;
                    }
                    
                    var nameValue4 = extensionsValue['name'];
                    if (nameValue4 !== null && nameValue4 !== undefined) {
                      var nameInstance4 = nameValue4;
                      virtualMachineExtensionInstance.name = nameInstance4;
                    }
                    
                    var typeValue3 = extensionsValue['type'];
                    if (typeValue3 !== null && typeValue3 !== undefined) {
                      var typeInstance3 = typeValue3;
                      virtualMachineExtensionInstance.type = typeInstance3;
                    }
                    
                    var locationValue = extensionsValue['location'];
                    if (locationValue !== null && locationValue !== undefined) {
                      var locationInstance = locationValue;
                      virtualMachineExtensionInstance.location = locationInstance;
                    }
                    
                    var tagsSequenceElement = extensionsValue['tags'];
                    if (tagsSequenceElement !== null && tagsSequenceElement !== undefined) {
                      for (var property in tagsSequenceElement) {
                        var tagsKey = property;
                        var tagsValue = tagsSequenceElement[property];
                        virtualMachineExtensionInstance.tags[tagsKey] = tagsValue;
                      }
                    }
                  }
                }
              }
              
              var idValue5 = valueValue['id'];
              if (idValue5 !== null && idValue5 !== undefined) {
                var idInstance5 = idValue5;
                virtualMachineInstance.id = idInstance5;
              }
              
              var nameValue5 = valueValue['name'];
              if (nameValue5 !== null && nameValue5 !== undefined) {
                var nameInstance5 = nameValue5;
                virtualMachineInstance.name = nameInstance5;
              }
              
              var typeValue4 = valueValue['type'];
              if (typeValue4 !== null && typeValue4 !== undefined) {
                var typeInstance4 = typeValue4;
                virtualMachineInstance.type = typeInstance4;
              }
              
              var locationValue2 = valueValue['location'];
              if (locationValue2 !== null && locationValue2 !== undefined) {
                var locationInstance2 = locationValue2;
                virtualMachineInstance.location = locationInstance2;
              }
              
              var tagsSequenceElement2 = valueValue['tags'];
              if (tagsSequenceElement2 !== null && tagsSequenceElement2 !== undefined) {
                for (var property2 in tagsSequenceElement2) {
                  var tagsKey2 = property2;
                  var tagsValue2 = tagsSequenceElement2[property2];
                  virtualMachineInstance.tags[tagsKey2] = tagsValue2;
                }
              }
            }
          }
        }
        
      }
      result.statusCode = statusCode;
      result.requestId = response.headers['x-ms-request-id'];
      
      return callback(null, result);
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.restart = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginRestarting(resourceGroupName, vmName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.start = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginStarting(resourceGroupName, vmName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  /**
   * 
   * @param {string} resourceGroupName The name of the resource group.
   * 
   * @param {string} vmName The name of the virtual machine.
   * 
   * @param {function} callback
   * 
   * @returns {Stream} The response stream.
   */
  VirtualMachineOperations.prototype.stop = function(resourceGroupName, vmName, callback) {
    if (callback === null || callback === undefined) {
      throw new Error('callback cannot be null.');
    }
    var client2 = this.client;
    
    return client2.virtualMachines.beginStopping(resourceGroupName, vmName, function (err, result) {
      if (err !== null && err !== undefined) {
        return callback(err);
      }
      var delayInSeconds = 30;
      if (client2.longRunningOperationInitialTimeout >= 0) {
        delayInSeconds = client2.longRunningOperationInitialTimeout;
      }
      
      var pollOperation = function () {
        setTimeout(function () {
          return client2.getLongRunningOperationStatus(result.azureAsyncOperation, function (err2, result2) {
            if (err2 !== null && err2 !== undefined) {
              return callback(err2);
            } else {
              if (result2.status !== 'InProgress') {
                return callback(null, result2);
              } else {
                delayInSeconds = 30;
                if (client2.longRunningOperationRetryTimeout >= 0) {
                  delayInSeconds = client2.longRunningOperationRetryTimeout;
                }
                pollOperation();
              }
            }
          });
        }, delayInSeconds * 1000);
      };
      
      pollOperation();
    });
  };
  
  return VirtualMachineOperations;
})();
